
test_code_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f130  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  0800f3d0  0800f3d0  000103d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f794  0800f794  000111d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f794  0800f794  00010794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f79c  0800f79c  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f79c  0800f79c  0001079c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f7a0  0800f7a0  000107a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800f7a4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a4  240001d8  0800f97c  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400127c  0800f97c  0001127c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027409  00000000  00000000  00011206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005219  00000000  00000000  0003860f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  0003d828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001885  00000000  00000000  0003f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004779c  00000000  00000000  0004105d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e8df  00000000  00000000  000887f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b6259  00000000  00000000  000b70d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0026d331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009328  00000000  00000000  0026d374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0027669c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f3b8 	.word	0x0800f3b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800f3b8 	.word	0x0800f3b8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <SystemInit+0x12c>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <SystemInit+0x12c>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <SystemInit+0x12c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <SystemInit+0x12c>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <SystemInit+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <SystemInit+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ec <SystemInit+0x130>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemInit+0x134>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <SystemInit+0x134>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <SystemInit+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <SystemInit+0x134>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4938      	ldr	r1, [pc, #224]	@ (80007f0 <SystemInit+0x134>)
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <SystemInit+0x138>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <SystemInit+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <SystemInit+0x130>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SystemInit+0x130>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <SystemInit+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x134>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <SystemInit+0x13c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0x134>)
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemInit+0x140>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemInit+0x134>)
 8000752:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemInit+0x144>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemInit+0x134>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0x144>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemInit+0x134>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemInit+0x134>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemInit+0x144>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemInit+0x134>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemInit+0x134>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <SystemInit+0x134>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemInit+0x148>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <SystemInit+0x148>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <SystemInit+0x14c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemInit+0x150>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x154>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0x134>)
 80007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <SystemInit+0x134>)
 80007b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <SystemInit+0x134>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <SystemInit+0x158>)
 80007c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <SystemInit+0x134>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <SystemInit+0x134>)
 80007d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	580000c0 	.word	0x580000c0
 8000808:	5c001000 	.word	0x5c001000
 800080c:	ffff0000 	.word	0xffff0000
 8000810:	51008108 	.word	0x51008108
 8000814:	52004000 	.word	0x52004000

08000818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <ExitRun0Mode+0x30>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f023 0306 	bic.w	r3, r3, #6
 8000824:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <ExitRun0Mode+0x30>)
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800082c:	bf00      	nop
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <ExitRun0Mode+0x30>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f9      	beq.n	800082e <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	58024800 	.word	0x58024800

0800084c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	4bb6      	ldr	r3, [pc, #728]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000868:	4ab4      	ldr	r2, [pc, #720]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000872:	4bb2      	ldr	r3, [pc, #712]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000878:	f003 0310 	and.w	r3, r3, #16
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000880:	4bae      	ldr	r3, [pc, #696]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000886:	4aad      	ldr	r2, [pc, #692]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000890:	4baa      	ldr	r3, [pc, #680]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 8000892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4ba7      	ldr	r3, [pc, #668]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a4:	4aa5      	ldr	r2, [pc, #660]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ae:	4ba3      	ldr	r3, [pc, #652]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b9f      	ldr	r3, [pc, #636]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c2:	4a9e      	ldr	r2, [pc, #632]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008cc:	4b9b      	ldr	r3, [pc, #620]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b98      	ldr	r3, [pc, #608]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e0:	4a96      	ldr	r2, [pc, #600]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008e2:	f043 0302 	orr.w	r3, r3, #2
 80008e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ea:	4b94      	ldr	r3, [pc, #592]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f8:	4b90      	ldr	r3, [pc, #576]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fe:	4a8f      	ldr	r2, [pc, #572]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000904:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000908:	4b8c      	ldr	r3, [pc, #560]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b89      	ldr	r3, [pc, #548]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	4a87      	ldr	r2, [pc, #540]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000926:	4b85      	ldr	r3, [pc, #532]	@ (8000b3c <MX_GPIO_Init+0x2f0>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU3_CS_GPIO_Port, IMU3_CS_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2110      	movs	r1, #16
 8000938:	4881      	ldr	r0, [pc, #516]	@ (8000b40 <MX_GPIO_Init+0x2f4>)
 800093a:	f003 f809 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAR1_CS_Pin|MCU_ARM_1_Pin|WD_EN_Pin|OUT_LS_2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f242 012a 	movw	r1, #8234	@ 0x202a
 8000944:	487f      	ldr	r0, [pc, #508]	@ (8000b44 <MX_GPIO_Init+0x2f8>)
 8000946:	f003 f803 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DET_0_Pin|ARM_0_Pin|IMU1_CS_Pin|OUT_LS_5_Pin
 800094a:	2200      	movs	r2, #0
 800094c:	f645 410c 	movw	r1, #23564	@ 0x5c0c
 8000950:	487d      	ldr	r0, [pc, #500]	@ (8000b48 <MX_GPIO_Init+0x2fc>)
 8000952:	f002 fffd 	bl	8003950 <HAL_GPIO_WritePin>
                          |OUT_LS_4_Pin|OUT_LS_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_LS_1_Pin|BAR2_CS_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f248 0110 	movw	r1, #32784	@ 0x8010
 800095c:	487b      	ldr	r0, [pc, #492]	@ (8000b4c <MX_GPIO_Init+0x300>)
 800095e:	f002 fff7 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LS_3_GPIO_Port, OUT_LS_3_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2104      	movs	r1, #4
 8000966:	487a      	ldr	r0, [pc, #488]	@ (8000b50 <MX_GPIO_Init+0x304>)
 8000968:	f002 fff2 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	4878      	ldr	r0, [pc, #480]	@ (8000b54 <MX_GPIO_Init+0x308>)
 8000972:	f002 ffed 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SPI_LS_CS_Pin|IMU3_RESET_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 800097c:	4875      	ldr	r0, [pc, #468]	@ (8000b54 <MX_GPIO_Init+0x308>)
 800097e:	f002 ffe7 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU2_CS_GPIO_Port, IMU2_CS_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	4874      	ldr	r0, [pc, #464]	@ (8000b58 <MX_GPIO_Init+0x30c>)
 8000988:	f002 ffe2 	bl	8003950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU3_INT_Pin */
  GPIO_InitStruct.Pin = IMU3_INT_Pin;
 800098c:	2308      	movs	r3, #8
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000990:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IMU3_INT_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4867      	ldr	r0, [pc, #412]	@ (8000b40 <MX_GPIO_Init+0x2f4>)
 80009a2:	f002 fe0d 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU3_CS_Pin */
  GPIO_InitStruct.Pin = IMU3_CS_Pin;
 80009a6:	2310      	movs	r3, #16
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IMU3_CS_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4860      	ldr	r0, [pc, #384]	@ (8000b40 <MX_GPIO_Init+0x2f4>)
 80009be:	f002 fdff 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR1_CS_Pin MCU_ARM_1_Pin WD_EN_Pin OUT_LS_2_Pin */
  GPIO_InitStruct.Pin = BAR1_CS_Pin|MCU_ARM_1_Pin|WD_EN_Pin|OUT_LS_2_Pin;
 80009c2:	f242 032a 	movw	r3, #8234	@ 0x202a
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	485a      	ldr	r0, [pc, #360]	@ (8000b44 <MX_GPIO_Init+0x2f8>)
 80009dc:	f002 fdf0 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DET_0_Pin ARM_0_Pin IMU1_CS_Pin OUT_LS_5_Pin
                           OUT_LS_4_Pin OUT_LS_6_Pin */
  GPIO_InitStruct.Pin = DET_0_Pin|ARM_0_Pin|IMU1_CS_Pin|OUT_LS_5_Pin
 80009e0:	f645 430c 	movw	r3, #23564	@ 0x5c0c
 80009e4:	61fb      	str	r3, [r7, #28]
                          |OUT_LS_4_Pin|OUT_LS_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4853      	ldr	r0, [pc, #332]	@ (8000b48 <MX_GPIO_Init+0x2fc>)
 80009fa:	f002 fde1 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_STAT_Pin BATT_SENSE_Pin IN_LS_1_Pin */
  GPIO_InitStruct.Pin = MUX_STAT_Pin|BATT_SENSE_Pin|IN_LS_1_Pin;
 80009fe:	f24a 0310 	movw	r3, #40976	@ 0xa010
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	484d      	ldr	r0, [pc, #308]	@ (8000b48 <MX_GPIO_Init+0x2fc>)
 8000a14:	f002 fdd4 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_WDI_Pin WD_IN_Pin */
  GPIO_InitStruct.Pin = MCU_WDI_Pin|WD_IN_Pin;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4846      	ldr	r0, [pc, #280]	@ (8000b44 <MX_GPIO_Init+0x2f8>)
 8000a2c:	f002 fdc8 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LS_1_Pin BAR2_CS_Pin */
  GPIO_InitStruct.Pin = OUT_LS_1_Pin|BAR2_CS_Pin;
 8000a30:	f248 0310 	movw	r3, #32784	@ 0x8010
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4840      	ldr	r0, [pc, #256]	@ (8000b4c <MX_GPIO_Init+0x300>)
 8000a4a:	f002 fdb9 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LS_3_Pin */
  GPIO_InitStruct.Pin = OUT_LS_3_Pin;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OUT_LS_3_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	483a      	ldr	r0, [pc, #232]	@ (8000b50 <MX_GPIO_Init+0x304>)
 8000a66:	f002 fdab 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_LS_2_Pin IN_LS_3_Pin VDD_12_PG_Pin VDD_5_PG_Pin
                           VDD_3V3_SNS_PG_Pin VDD_3V3_SYS_PG_Pin VDD_3V3_SEC_PG_Pin */
  GPIO_InitStruct.Pin = IN_LS_2_Pin|IN_LS_3_Pin|VDD_12_PG_Pin|VDD_5_PG_Pin
 8000a6a:	237f      	movs	r3, #127	@ 0x7f
 8000a6c:	61fb      	str	r3, [r7, #28]
                          |VDD_3V3_SNS_PG_Pin|VDD_3V3_SYS_PG_Pin|VDD_3V3_SEC_PG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4835      	ldr	r0, [pc, #212]	@ (8000b54 <MX_GPIO_Init+0x308>)
 8000a7e:	f002 fd9f 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_LS_4_Pin IN_LS_5_Pin IN_LS_6_Pin */
  GPIO_InitStruct.Pin = IN_LS_4_Pin|IN_LS_5_Pin|IN_LS_6_Pin;
 8000a82:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	482a      	ldr	r0, [pc, #168]	@ (8000b40 <MX_GPIO_Init+0x2f4>)
 8000a98:	f002 fd92 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_DET_Pin MAG1_INT_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin|MAG1_INT_Pin;
 8000a9c:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4829      	ldr	r0, [pc, #164]	@ (8000b58 <MX_GPIO_Init+0x30c>)
 8000ab2:	f002 fd85 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000ab6:	2380      	movs	r3, #128	@ 0x80
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000aba:	2311      	movs	r3, #17
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4821      	ldr	r0, [pc, #132]	@ (8000b54 <MX_GPIO_Init+0x308>)
 8000ace:	f002 fd77 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_LS_CS_Pin IMU3_RESET_Pin */
  GPIO_InitStruct.Pin = SPI_LS_CS_Pin|IMU3_RESET_Pin;
 8000ad2:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481a      	ldr	r0, [pc, #104]	@ (8000b54 <MX_GPIO_Init+0x308>)
 8000aec:	f002 fd68 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU2_CS_Pin */
  GPIO_InitStruct.Pin = IMU2_CS_Pin;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4814      	ldr	r0, [pc, #80]	@ (8000b58 <MX_GPIO_Init+0x30c>)
 8000b08:	f002 fd5a 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU2_INT1_Pin IMU2_INT2_Pin IMU1_INT_Pin */
  GPIO_InitStruct.Pin = IMU2_INT1_Pin|IMU2_INT2_Pin|IMU1_INT_Pin;
 8000b0c:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <MX_GPIO_Init+0x308>)
 8000b24:	f002 fd4c 	bl	80035c0 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_CLOSE);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000b2e:	f002 fbd5 	bl	80032dc <HAL_SYSCFG_AnalogSwitchConfig>

}
 8000b32:	bf00      	nop
 8000b34:	3730      	adds	r7, #48	@ 0x30
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	58021000 	.word	0x58021000
 8000b44:	58020800 	.word	0x58020800
 8000b48:	58021400 	.word	0x58021400
 8000b4c:	58020000 	.word	0x58020000
 8000b50:	58020400 	.word	0x58020400
 8000b54:	58021800 	.word	0x58021800
 8000b58:	58020c00 	.word	0x58020c00

08000b5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b62:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd4 <MX_I2C1_Init+0x78>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b68:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd8 <MX_I2C1_Init+0x7c>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b96:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b98:	f002 ff22 	bl	80039e0 <HAL_I2C_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba2:	f000 fac7 	bl	8001134 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000baa:	f002 ffb5 	bl	8003b18 <HAL_I2CEx_ConfigAnalogFilter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 fabe 	bl	8001134 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000bbc:	f002 fff7 	bl	8003bae <HAL_I2CEx_ConfigDigitalFilter>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bc6:	f000 fab5 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	240001f4 	.word	0x240001f4
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	307075b1 	.word	0x307075b1

08000bdc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000be2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c54 <MX_I2C2_Init+0x78>)
 8000be4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000be8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c58 <MX_I2C2_Init+0x7c>)
 8000bea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c16:	480e      	ldr	r0, [pc, #56]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000c18:	f002 fee2 	bl	80039e0 <HAL_I2C_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c22:	f000 fa87 	bl	8001134 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4809      	ldr	r0, [pc, #36]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000c2a:	f002 ff75 	bl	8003b18 <HAL_I2CEx_ConfigAnalogFilter>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c34:	f000 fa7e 	bl	8001134 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_I2C2_Init+0x74>)
 8000c3c:	f002 ffb7 	bl	8003bae <HAL_I2CEx_ConfigDigitalFilter>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c46:	f000 fa75 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	24000248 	.word	0x24000248
 8000c54:	40005800 	.word	0x40005800
 8000c58:	307075b1 	.word	0x307075b1

08000c5c <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <MX_I2C4_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <MX_I2C4_Init+0x7c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c96:	480e      	ldr	r0, [pc, #56]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000c98:	f002 fea2 	bl	80039e0 <HAL_I2C_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f000 fa47 	bl	8001134 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000caa:	f002 ff35 	bl	8003b18 <HAL_I2CEx_ConfigAnalogFilter>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 fa3e 	bl	8001134 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_I2C4_Init+0x74>)
 8000cbc:	f002 ff77 	bl	8003bae <HAL_I2CEx_ConfigDigitalFilter>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 fa35 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2400029c 	.word	0x2400029c
 8000cd4:	58001c00 	.word	0x58001c00
 8000cd8:	307075b1 	.word	0x307075b1

08000cdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0c0      	sub	sp, #256	@ 0x100
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf4:	f107 0320 	add.w	r3, r7, #32
 8000cf8:	22c8      	movs	r2, #200	@ 0xc8
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00c fca6 	bl	800d64e <memset>
  if(i2cHandle->Instance==I2C1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a73      	ldr	r2, [pc, #460]	@ (8000ed4 <HAL_I2C_MspInit+0x1f8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d147      	bne.n	8000d9c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d0c:	f04f 0208 	mov.w	r2, #8
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 f910 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000d2e:	f000 fa01 	bl	8001134 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b69      	ldr	r3, [pc, #420]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	4a67      	ldr	r2, [pc, #412]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d42:	4b65      	ldr	r3, [pc, #404]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = PITOT_SCL_Pin|PITOT_SDA_Pin;
 8000d50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d74:	4619      	mov	r1, r3
 8000d76:	4859      	ldr	r0, [pc, #356]	@ (8000edc <HAL_I2C_MspInit+0x200>)
 8000d78:	f002 fc22 	bl	80035c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7c:	4b56      	ldr	r3, [pc, #344]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d82:	4a55      	ldr	r2, [pc, #340]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000d84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d8c:	4b52      	ldr	r3, [pc, #328]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000d9a:	e096      	b.n	8000eca <HAL_I2C_MspInit+0x1ee>
  else if(i2cHandle->Instance==I2C2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a4f      	ldr	r2, [pc, #316]	@ (8000ee0 <HAL_I2C_MspInit+0x204>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d146      	bne.n	8000e34 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000da6:	f04f 0208 	mov.w	r2, #8
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 f8c3 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000dc8:	f000 f9b4 	bl	8001134 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dcc:	4b42      	ldr	r3, [pc, #264]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	4a41      	ldr	r2, [pc, #260]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dea:	2303      	movs	r3, #3
 8000dec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df0:	2312      	movs	r3, #18
 8000df2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e02:	2304      	movs	r3, #4
 8000e04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e08:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4835      	ldr	r0, [pc, #212]	@ (8000ee4 <HAL_I2C_MspInit+0x208>)
 8000e10:	f002 fbd6 	bl	80035c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e14:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000e1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e24:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
}
 8000e32:	e04a      	b.n	8000eca <HAL_I2C_MspInit+0x1ee>
  else if(i2cHandle->Instance==I2C4)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee8 <HAL_I2C_MspInit+0x20c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d145      	bne.n	8000eca <HAL_I2C_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000e3e:	f04f 0210 	mov.w	r2, #16
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	4618      	mov	r0, r3
 8000e56:	f004 f877 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000e60:	f000 f968 	bl	8001134 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG1_SCL_Pin|MAG1_SDA_Pin;
 8000e82:	23c0      	movs	r3, #192	@ 0xc0
 8000e84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e88:	2312      	movs	r3, #18
 8000e8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	@ (8000edc <HAL_I2C_MspInit+0x200>)
 8000ea8:	f002 fb8a 	bl	80035c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eb2:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_I2C_MspInit+0x1fc>)
 8000ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
}
 8000eca:	bf00      	nop
 8000ecc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020400 	.word	0x58020400
 8000ee0:	40005800 	.word	0x40005800
 8000ee4:	58021400 	.word	0x58021400
 8000ee8:	58001c00 	.word	0x58001c00

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ef2:	f000 f8f3 	bl	80010dc <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ef6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000efa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000efc:	bf00      	nop
 8000efe:	4b39      	ldr	r3, [pc, #228]	@ (8000fe4 <main+0xf8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <main+0x28>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dcf4      	bgt.n	8000efe <main+0x12>
  if ( timeout < 0 )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da01      	bge.n	8000f1e <main+0x32>
  {
  Error_Handler();
 8000f1a:	f000 f90b 	bl	8001134 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f002 f91b 	bl	8003158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f861 	bl	8000fe8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <main+0xf8>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe4 <main+0xf8>)
 8000f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f36:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe4 <main+0xf8>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f002 fd1d 	bl	8003984 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f002 fd33 	bl	80039b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f56:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f58:	bf00      	nop
 8000f5a:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <main+0xf8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d104      	bne.n	8000f70 <main+0x84>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dcf4      	bgt.n	8000f5a <main+0x6e>
if ( timeout < 0 )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	da01      	bge.n	8000f7a <main+0x8e>
{
Error_Handler();
 8000f76:	f000 f8dd 	bl	8001134 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f7ff fc67 	bl	800084c <MX_GPIO_Init>
  MX_SPI6_Init();
 8000f7e:	f000 fb01 	bl	8001584 <MX_SPI6_Init>
  MX_I2C2_Init();
 8000f82:	f7ff fe2b 	bl	8000bdc <MX_I2C2_Init>
  MX_SPI5_Init();
 8000f86:	f000 faa7 	bl	80014d8 <MX_SPI5_Init>
  MX_TIM16_Init();
 8000f8a:	f001 f89b 	bl	80020c4 <MX_TIM16_Init>
  MX_SDMMC1_SD_Init();
 8000f8e:	f000 f8d7 	bl	8001140 <MX_SDMMC1_SD_Init>
  MX_SPI4_Init();
 8000f92:	f000 fa49 	bl	8001428 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000f96:	f000 fe1d 	bl	8001bd4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f9a:	f001 f805 	bl	8001fa8 <MX_TIM4_Init>
  MX_UART7_Init();
 8000f9e:	f001 fb3d 	bl	800261c <MX_UART7_Init>
  MX_UART8_Init();
 8000fa2:	f001 fb87 	bl	80026b4 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8000fa6:	f001 fc1d 	bl	80027e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000faa:	f001 fc69 	bl	8002880 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000fae:	f7ff fdd5 	bl	8000b5c <MX_I2C1_Init>
  MX_I2C4_Init();
 8000fb2:	f7ff fe53 	bl	8000c5c <MX_I2C4_Init>
  MX_SPI1_Init();
 8000fb6:	f000 f98b 	bl	80012d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000fba:	f000 f9df 	bl	800137c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fbe:	f000 fed9 	bl	8001d74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fc2:	f000 ff59 	bl	8001e78 <MX_TIM3_Init>
  MX_UART4_Init();
 8000fc6:	f001 fa91 	bl	80024ec <MX_UART4_Init>
  MX_UART5_Init();
 8000fca:	f001 fadb 	bl	8002584 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000fce:	f001 fbbd 	bl	800274c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fd2:	f001 fff7 	bl	8002fc4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000fd6:	f001 fca1 	bl	800291c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000fda:	f00b fc05 	bl	800c7e8 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fde:	bf00      	nop
 8000fe0:	e7fd      	b.n	8000fde <main+0xf2>
 8000fe2:	bf00      	nop
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09c      	sub	sp, #112	@ 0x70
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff2:	224c      	movs	r2, #76	@ 0x4c
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00c fb29 	bl	800d64e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2220      	movs	r2, #32
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f00c fb23 	bl	800d64e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001008:	2002      	movs	r0, #2
 800100a:	f002 ff4d 	bl	8003ea8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b30      	ldr	r3, [pc, #192]	@ (80010d4 <SystemClock_Config+0xec>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a2f      	ldr	r2, [pc, #188]	@ (80010d4 <SystemClock_Config+0xec>)
 8001018:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <SystemClock_Config+0xec>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	4b2b      	ldr	r3, [pc, #172]	@ (80010d8 <SystemClock_Config+0xf0>)
 800102a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102c:	4a2a      	ldr	r2, [pc, #168]	@ (80010d8 <SystemClock_Config+0xf0>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <SystemClock_Config+0xf0>)
 8001036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001040:	bf00      	nop
 8001042:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <SystemClock_Config+0xec>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800104a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800104e:	d1f8      	bne.n	8001042 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001050:	2301      	movs	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001054:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	2302      	movs	r3, #2
 8001060:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001066:	233c      	movs	r3, #60	@ 0x3c
 8001068:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 800106e:	230f      	movs	r3, #15
 8001070:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001076:	230c      	movs	r3, #12
 8001078:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800107a:	2300      	movs	r3, #0
 800107c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4618      	mov	r0, r3
 8001088:	f002 ff78 	bl	8003f7c <HAL_RCC_OscConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001092:	f000 f84f 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	233f      	movs	r3, #63	@ 0x3f
 8001098:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109a:	2303      	movs	r3, #3
 800109c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010a2:	2308      	movs	r3, #8
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010a6:	2340      	movs	r3, #64	@ 0x40
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010aa:	2340      	movs	r3, #64	@ 0x40
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010b4:	2340      	movs	r3, #64	@ 0x40
 80010b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2104      	movs	r1, #4
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 fbb7 	bl	8004830 <HAL_RCC_ClockConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80010c8:	f000 f834 	bl	8001134 <Error_Handler>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3770      	adds	r7, #112	@ 0x70
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58024800 	.word	0x58024800
 80010d8:	58000400 	.word	0x58000400

080010dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010e2:	463b      	mov	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010ee:	f002 f9ef 	bl	80034d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010fe:	231f      	movs	r3, #31
 8001100:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001102:	2387      	movs	r3, #135	@ 0x87
 8001104:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001106:	2300      	movs	r3, #0
 8001108:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800110a:	2300      	movs	r3, #0
 800110c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800110e:	2301      	movs	r3, #1
 8001110:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001112:	2301      	movs	r3, #1
 8001114:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800111e:	463b      	mov	r3, r7
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fa0d 	bl	8003540 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001126:	2004      	movs	r0, #4
 8001128:	f002 f9ea 	bl	8003500 <HAL_MPU_Enable>

}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <Error_Handler+0x8>

08001140 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_SDMMC1_SD_Init+0x40>)
 8001146:	4a0f      	ldr	r2, [pc, #60]	@ (8001184 <MX_SDMMC1_SD_Init+0x44>)
 8001148:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_SDMMC1_SD_Init+0x40>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <MX_SDMMC1_SD_Init+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_SDMMC1_SD_Init+0x40>)
 8001158:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800115c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <MX_SDMMC1_SD_Init+0x40>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_SDMMC1_SD_Init+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_SDMMC1_SD_Init+0x40>)
 800116c:	f006 fc2a 	bl	80079c4 <HAL_SD_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001176:	f7ff ffdd 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	240002f0 	.word	0x240002f0
 8001184:	52007000 	.word	0x52007000

08001188 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0be      	sub	sp, #248	@ 0xf8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	22c8      	movs	r2, #200	@ 0xc8
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00c fa50 	bl	800d64e <memset>
  if(sdHandle->Instance==SDMMC1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a38      	ldr	r2, [pc, #224]	@ (8001294 <HAL_SD_MspInit+0x10c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d169      	bne.n	800128c <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80011b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 febb 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80011d8:	f7ff ffac 	bl	8001134 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80011dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <HAL_SD_MspInit+0x110>)
 80011de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001298 <HAL_SD_MspInit+0x110>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80011ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <HAL_SD_MspInit+0x110>)
 80011ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <HAL_SD_MspInit+0x110>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001200:	4a25      	ldr	r2, [pc, #148]	@ (8001298 <HAL_SD_MspInit+0x110>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <HAL_SD_MspInit+0x110>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <HAL_SD_MspInit+0x110>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <HAL_SD_MspInit+0x110>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001228:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <HAL_SD_MspInit+0x110>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001236:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800123a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001250:	230c      	movs	r3, #12
 8001252:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800125a:	4619      	mov	r1, r3
 800125c:	480f      	ldr	r0, [pc, #60]	@ (800129c <HAL_SD_MspInit+0x114>)
 800125e:	f002 f9af 	bl	80035c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001262:	2304      	movs	r3, #4
 8001264:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800127a:	230c      	movs	r3, #12
 800127c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <HAL_SD_MspInit+0x118>)
 8001288:	f002 f99a 	bl	80035c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800128c:	bf00      	nop
 800128e:	37f8      	adds	r7, #248	@ 0xf8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	52007000 	.word	0x52007000
 8001298:	58024400 	.word	0x58024400
 800129c:	58020800 	.word	0x58020800
 80012a0:	58020c00 	.word	0x58020c00

080012a4 <_write>:




int _write(int file, char *ptr, int len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	4804      	ldr	r0, [pc, #16]	@ (80012cc <_write+0x28>)
 80012bc:	f009 f8a8 	bl	800a410 <HAL_UART_Transmit>
 return len;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	240009e4 	.word	0x240009e4

080012d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012d4:	4b27      	ldr	r3, [pc, #156]	@ (8001374 <MX_SPI1_Init+0xa4>)
 80012d6:	4a28      	ldr	r2, [pc, #160]	@ (8001378 <MX_SPI1_Init+0xa8>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <MX_SPI1_Init+0xa4>)
 80012dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <MX_SPI1_Init+0xa4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <MX_SPI1_Init+0xa4>)
 80012ea:	2203      	movs	r2, #3
 80012ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <MX_SPI1_Init+0xa4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <MX_SPI1_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <MX_SPI1_Init+0xa4>)
 80012fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_SPI1_Init+0xa4>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_SPI1_Init+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001322:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001326:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_SPI1_Init+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001336:	2200      	movs	r2, #0
 8001338:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_SPI1_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001342:	2200      	movs	r2, #0
 8001344:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_SPI1_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001354:	2200      	movs	r2, #0
 8001356:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_SPI1_Init+0xa4>)
 800135a:	2200      	movs	r2, #0
 800135c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_SPI1_Init+0xa4>)
 8001360:	f007 fee2 	bl	8009128 <HAL_SPI_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800136a:	f7ff fee3 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2400036c 	.word	0x2400036c
 8001378:	40013000 	.word	0x40013000

0800137c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001380:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <MX_SPI2_Init+0xa4>)
 8001382:	4a28      	ldr	r2, [pc, #160]	@ (8001424 <MX_SPI2_Init+0xa8>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <MX_SPI2_Init+0xa4>)
 8001388:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800138c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <MX_SPI2_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001394:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <MX_SPI2_Init+0xa4>)
 8001396:	2207      	movs	r2, #7
 8001398:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <MX_SPI2_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013dc:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <MX_SPI2_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <MX_SPI2_Init+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <MX_SPI2_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	@ (8001420 <MX_SPI2_Init+0xa4>)
 800140e:	f007 fe8b 	bl	8009128 <HAL_SPI_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001418:	f7ff fe8c 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	240003f4 	.word	0x240003f4
 8001424:	40003800 	.word	0x40003800

08001428 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800142c:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 800142e:	4a29      	ldr	r2, [pc, #164]	@ (80014d4 <MX_SPI4_Init+0xac>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001434:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001438:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8001440:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001442:	220f      	movs	r2, #15
 8001444:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001446:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001448:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800144c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001454:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001456:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800145a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 800145e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001462:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001466:	2200      	movs	r2, #0
 8001468:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001470:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001472:	2200      	movs	r2, #0
 8001474:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001478:	2200      	movs	r2, #0
 800147a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800147c:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 800147e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001482:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_SPI4_Init+0xa8>)
 80014bc:	f007 fe34 	bl	8009128 <HAL_SPI_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80014c6:	f7ff fe35 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2400047c 	.word	0x2400047c
 80014d4:	40013400 	.word	0x40013400

080014d8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80014dc:	4b27      	ldr	r3, [pc, #156]	@ (800157c <MX_SPI5_Init+0xa4>)
 80014de:	4a28      	ldr	r2, [pc, #160]	@ (8001580 <MX_SPI5_Init+0xa8>)
 80014e0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014e2:	4b26      	ldr	r3, [pc, #152]	@ (800157c <MX_SPI5_Init+0xa4>)
 80014e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014e8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <MX_SPI5_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_SPI5_Init+0xa4>)
 80014f2:	2203      	movs	r2, #3
 80014f4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_SPI5_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_SPI5_Init+0xa4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001504:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001508:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_SPI5_Init+0xa4>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_SPI5_Init+0xa4>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001524:	2200      	movs	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_SPI5_Init+0xa4>)
 800152a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800152e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800153c:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_SPI5_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <MX_SPI5_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <MX_SPI5_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001562:	2200      	movs	r2, #0
 8001564:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_SPI5_Init+0xa4>)
 8001568:	f007 fdde 	bl	8009128 <HAL_SPI_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8001572:	f7ff fddf 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	24000504 	.word	0x24000504
 8001580:	40015000 	.word	0x40015000

08001584 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8001588:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <MX_SPI6_Init+0xa4>)
 800158a:	4a28      	ldr	r2, [pc, #160]	@ (800162c <MX_SPI6_Init+0xa8>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b26      	ldr	r3, [pc, #152]	@ (8001628 <MX_SPI6_Init+0xa4>)
 8001590:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001594:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <MX_SPI6_Init+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <MX_SPI6_Init+0xa4>)
 800159e:	2207      	movs	r2, #7
 80015a0:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015b4:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015bc:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <MX_SPI6_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_SPI6_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <MX_SPI6_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_SPI6_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_SPI6_Init+0xa4>)
 8001616:	f007 fd87 	bl	8009128 <HAL_SPI_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 8001620:	f7ff fd88 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2400058c 	.word	0x2400058c
 800162c:	58001400 	.word	0x58001400

08001630 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0c4      	sub	sp, #272	@ 0x110
 8001634:	af00      	add	r7, sp, #0
 8001636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800163a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800163e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001650:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001654:	22c8      	movs	r2, #200	@ 0xc8
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f00b fff8 	bl	800d64e <memset>
  if(spiHandle->Instance==SPI1)
 800165e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001662:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4aa2      	ldr	r2, [pc, #648]	@ (80018f4 <HAL_SPI_MspInit+0x2c4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d146      	bne.n	80016fe <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001670:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001682:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fc5e 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 8001692:	f7ff fd4f 	bl	8001134 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001696:	4b98      	ldr	r3, [pc, #608]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 8001698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800169c:	4a96      	ldr	r2, [pc, #600]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 800169e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016a6:	4b94      	ldr	r3, [pc, #592]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80016a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b90      	ldr	r3, [pc, #576]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ba:	4a8f      	ldr	r2, [pc, #572]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c4:	4b8c      	ldr	r3, [pc, #560]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016d2:	2338      	movs	r3, #56	@ 0x38
 80016d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ea:	2305      	movs	r3, #5
 80016ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016f4:	4619      	mov	r1, r3
 80016f6:	4881      	ldr	r0, [pc, #516]	@ (80018fc <HAL_SPI_MspInit+0x2cc>)
 80016f8:	f001 ff62 	bl	80035c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 80016fc:	e16a      	b.n	80019d4 <HAL_SPI_MspInit+0x3a4>
  else if(spiHandle->Instance==SPI2)
 80016fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001702:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a7d      	ldr	r2, [pc, #500]	@ (8001900 <HAL_SPI_MspInit+0x2d0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d147      	bne.n	80017a0 <HAL_SPI_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001710:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001722:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001726:	4618      	mov	r0, r3
 8001728:	f003 fc0e 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_SPI_MspInit+0x106>
      Error_Handler();
 8001732:	f7ff fcff 	bl	8001134 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001736:	4b70      	ldr	r3, [pc, #448]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 8001738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800173c:	4a6e      	ldr	r2, [pc, #440]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001742:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001746:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 8001748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800174c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	4b68      	ldr	r3, [pc, #416]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175a:	4a67      	ldr	r2, [pc, #412]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001764:	4b64      	ldr	r3, [pc, #400]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8001772:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001776:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800178c:	2305      	movs	r3, #5
 800178e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001796:	4619      	mov	r1, r3
 8001798:	4858      	ldr	r0, [pc, #352]	@ (80018fc <HAL_SPI_MspInit+0x2cc>)
 800179a:	f001 ff11 	bl	80035c0 <HAL_GPIO_Init>
}
 800179e:	e119      	b.n	80019d4 <HAL_SPI_MspInit+0x3a4>
  else if(spiHandle->Instance==SPI4)
 80017a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a55      	ldr	r2, [pc, #340]	@ (8001904 <HAL_SPI_MspInit+0x2d4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d146      	bne.n	8001840 <HAL_SPI_MspInit+0x210>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80017b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fbbd 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_SPI_MspInit+0x1a8>
      Error_Handler();
 80017d4:	f7ff fcae 	bl	8001134 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017d8:	4b47      	ldr	r3, [pc, #284]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80017da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017de:	4a46      	ldr	r2, [pc, #280]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80017e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017e8:	4b43      	ldr	r3, [pc, #268]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80017ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	4b40      	ldr	r3, [pc, #256]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fc:	4a3e      	ldr	r2, [pc, #248]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001806:	4b3c      	ldr	r3, [pc, #240]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IMU3_SCK_Pin|IMU3_MISO_Pin|IMU3_MOSI_Pin;
 8001814:	2364      	movs	r3, #100	@ 0x64
 8001816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800182c:	2305      	movs	r3, #5
 800182e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001832:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001836:	4619      	mov	r1, r3
 8001838:	4833      	ldr	r0, [pc, #204]	@ (8001908 <HAL_SPI_MspInit+0x2d8>)
 800183a:	f001 fec1 	bl	80035c0 <HAL_GPIO_Init>
}
 800183e:	e0c9      	b.n	80019d4 <HAL_SPI_MspInit+0x3a4>
  else if(spiHandle->Instance==SPI5)
 8001840:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001844:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2f      	ldr	r2, [pc, #188]	@ (800190c <HAL_SPI_MspInit+0x2dc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d160      	bne.n	8001914 <HAL_SPI_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001852:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001864:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fb6d 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_SPI_MspInit+0x248>
      Error_Handler();
 8001874:	f7ff fc5e 	bl	8001134 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 800187a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800187e:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 8001880:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001884:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 800188a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800188e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001896:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189c:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 800189e:	f043 0320 	orr.w	r3, r3, #32
 80018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_SPI_MspInit+0x2c8>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ac:	f003 0220 	and.w	r2, r3, #32
 80018b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018c2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = IMU1_SCK_Pin|IMU1_MISO_Pin|IMU1_MOSI_Pin;
 80018c4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80018c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80018de:	2305      	movs	r3, #5
 80018e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018e4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80018e8:	4619      	mov	r1, r3
 80018ea:	4809      	ldr	r0, [pc, #36]	@ (8001910 <HAL_SPI_MspInit+0x2e0>)
 80018ec:	f001 fe68 	bl	80035c0 <HAL_GPIO_Init>
}
 80018f0:	e070      	b.n	80019d4 <HAL_SPI_MspInit+0x3a4>
 80018f2:	bf00      	nop
 80018f4:	40013000 	.word	0x40013000
 80018f8:	58024400 	.word	0x58024400
 80018fc:	58020400 	.word	0x58020400
 8001900:	40003800 	.word	0x40003800
 8001904:	40013400 	.word	0x40013400
 8001908:	58021000 	.word	0x58021000
 800190c:	40015000 	.word	0x40015000
 8001910:	58021400 	.word	0x58021400
  else if(spiHandle->Instance==SPI6)
 8001914:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001918:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2f      	ldr	r2, [pc, #188]	@ (80019e0 <HAL_SPI_MspInit+0x3b0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d156      	bne.n	80019d4 <HAL_SPI_MspInit+0x3a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8001926:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001938:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fb03 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_SPI_MspInit+0x31c>
      Error_Handler();
 8001948:	f7ff fbf4 	bl	8001134 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800194c:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <HAL_SPI_MspInit+0x3b4>)
 800194e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001952:	4a24      	ldr	r2, [pc, #144]	@ (80019e4 <HAL_SPI_MspInit+0x3b4>)
 8001954:	f043 0320 	orr.w	r3, r3, #32
 8001958:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800195c:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <HAL_SPI_MspInit+0x3b4>)
 800195e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001962:	f003 0220 	and.w	r2, r3, #32
 8001966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800196a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001974:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001978:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800197a:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <HAL_SPI_MspInit+0x3b4>)
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001980:	4a18      	ldr	r2, [pc, #96]	@ (80019e4 <HAL_SPI_MspInit+0x3b4>)
 8001982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198a:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_SPI_MspInit+0x3b4>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001990:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001994:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019a6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80019a8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80019ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80019c2:	2305      	movs	r3, #5
 80019c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	@ (80019e8 <HAL_SPI_MspInit+0x3b8>)
 80019d0:	f001 fdf6 	bl	80035c0 <HAL_GPIO_Init>
}
 80019d4:	bf00      	nop
 80019d6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	58001400 	.word	0x58001400
 80019e4:	58024400 	.word	0x58024400
 80019e8:	58021800 	.word	0x58021800

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_MspInit+0x30>)
 80019f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019f8:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <HAL_MspInit+0x30>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_MspInit+0x30>)
 8001a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	58024400 	.word	0x58024400

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <NMI_Handler+0x4>

08001a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a76:	f001 fbe1 	bl	800323c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  return 1;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_kill>:

int _kill(int pid, int sig)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a98:	f00b fe2c 	bl	800d6f4 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2216      	movs	r2, #22
 8001aa0:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_exit>:

void _exit (int status)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffe7 	bl	8001a8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <_exit+0x12>

08001ac4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e00a      	b.n	8001aec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad6:	f3af 8000 	nop.w
 8001ada:	4601      	mov	r1, r0
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	60ba      	str	r2, [r7, #8]
 8001ae2:	b2ca      	uxtb	r2, r1
 8001ae4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dbf0      	blt.n	8001ad6 <_read+0x12>
  }

  return len;
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_close>:
  }
  return len;
}

int _close(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b26:	605a      	str	r2, [r3, #4]
  return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <_isatty>:

int _isatty(int file)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	@ (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	@ (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f00b fdac 	bl	800d6f4 <__errno>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	@ (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	24080000 	.word	0x24080000
 8001bc8:	00000400 	.word	0x00000400
 8001bcc:	24000614 	.word	0x24000614
 8001bd0:	24001280 	.word	0x24001280

08001bd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b09a      	sub	sp, #104	@ 0x68
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	222c      	movs	r2, #44	@ 0x2c
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f00b fd1d 	bl	800d64e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c14:	4b55      	ldr	r3, [pc, #340]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c16:	4a56      	ldr	r2, [pc, #344]	@ (8001d70 <MX_TIM1_Init+0x19c>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c1a:	4b54      	ldr	r3, [pc, #336]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b52      	ldr	r3, [pc, #328]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c26:	4b51      	ldr	r3, [pc, #324]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c34:	4b4d      	ldr	r3, [pc, #308]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c40:	484a      	ldr	r0, [pc, #296]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c42:	f007 fbb0 	bl	80093a6 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c4c:	f7ff fa72 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c54:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4843      	ldr	r0, [pc, #268]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c5e:	f007 fd6f 	bl	8009740 <HAL_TIM_ConfigClockSource>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c68:	f7ff fa64 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c6c:	483f      	ldr	r0, [pc, #252]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c6e:	f007 fbf1 	bl	8009454 <HAL_TIM_PWM_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c78:	f7ff fa5c 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4837      	ldr	r0, [pc, #220]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001c90:	f008 fa62 	bl	800a158 <HAL_TIMEx_MasterConfigSynchronization>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c9a:	f7ff fa4b 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c9e:	2360      	movs	r3, #96	@ 0x60
 8001ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001caa:	2300      	movs	r3, #0
 8001cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	482a      	ldr	r0, [pc, #168]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001cc4:	f007 fc28 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001cce:	f7ff fa31 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4824      	ldr	r0, [pc, #144]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001cdc:	f007 fc1c 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001ce6:	f7ff fa25 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cee:	2208      	movs	r2, #8
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481e      	ldr	r0, [pc, #120]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001cf4:	f007 fc10 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001cfe:	f7ff fa19 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d06:	220c      	movs	r2, #12
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4818      	ldr	r0, [pc, #96]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001d0c:	f007 fc04 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001d16:	f7ff fa0d 	bl	8001134 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4807      	ldr	r0, [pc, #28]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001d50:	f008 fa90 	bl	800a274 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001d5a:	f7ff f9eb 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d5e:	4803      	ldr	r0, [pc, #12]	@ (8001d6c <MX_TIM1_Init+0x198>)
 8001d60:	f000 faa6 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 8001d64:	bf00      	nop
 8001d66:	3768      	adds	r7, #104	@ 0x68
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	24000618 	.word	0x24000618
 8001d70:	40010000 	.word	0x40010000

08001d74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08e      	sub	sp, #56	@ 0x38
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d94:	463b      	mov	r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001da6:	4b33      	ldr	r3, [pc, #204]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001da8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dae:	4b31      	ldr	r3, [pc, #196]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001dba:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dce:	4829      	ldr	r0, [pc, #164]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001dd0:	f007 fae9 	bl	80093a6 <HAL_TIM_Base_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001dda:	f7ff f9ab 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001de4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001de8:	4619      	mov	r1, r3
 8001dea:	4822      	ldr	r0, [pc, #136]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001dec:	f007 fca8 	bl	8009740 <HAL_TIM_ConfigClockSource>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001df6:	f7ff f99d 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dfa:	481e      	ldr	r0, [pc, #120]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001dfc:	f007 fb2a 	bl	8009454 <HAL_TIM_PWM_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e06:	f7ff f995 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	4816      	ldr	r0, [pc, #88]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001e1a:	f008 f99d 	bl	800a158 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e24:	f7ff f986 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e28:	2360      	movs	r3, #96	@ 0x60
 8001e2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e38:	463b      	mov	r3, r7
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480d      	ldr	r0, [pc, #52]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001e40:	f007 fb6a 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e4a:	f7ff f973 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e4e:	463b      	mov	r3, r7
 8001e50:	220c      	movs	r2, #12
 8001e52:	4619      	mov	r1, r3
 8001e54:	4807      	ldr	r0, [pc, #28]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001e56:	f007 fb5f 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001e60:	f7ff f968 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e64:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <MX_TIM2_Init+0x100>)
 8001e66:	f000 fa23 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 8001e6a:	bf00      	nop
 8001e6c:	3738      	adds	r7, #56	@ 0x38
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	24000664 	.word	0x24000664

08001e78 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	@ 0x38
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e98:	463b      	mov	r3, r7
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
 8001ea6:	615a      	str	r2, [r3, #20]
 8001ea8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001eac:	4a3d      	ldr	r2, [pc, #244]	@ (8001fa4 <MX_TIM3_Init+0x12c>)
 8001eae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ebc:	4b38      	ldr	r3, [pc, #224]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec4:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eca:	4b35      	ldr	r3, [pc, #212]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ed0:	4833      	ldr	r0, [pc, #204]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001ed2:	f007 fa68 	bl	80093a6 <HAL_TIM_Base_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001edc:	f7ff f92a 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eea:	4619      	mov	r1, r3
 8001eec:	482c      	ldr	r0, [pc, #176]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001eee:	f007 fc27 	bl	8009740 <HAL_TIM_ConfigClockSource>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ef8:	f7ff f91c 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001efc:	4828      	ldr	r0, [pc, #160]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001efe:	f007 faa9 	bl	8009454 <HAL_TIM_PWM_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f08:	f7ff f914 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4821      	ldr	r0, [pc, #132]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001f1c:	f008 f91c 	bl	800a158 <HAL_TIMEx_MasterConfigSynchronization>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f26:	f7ff f905 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2a:	2360      	movs	r3, #96	@ 0x60
 8001f2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4817      	ldr	r0, [pc, #92]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001f42:	f007 fae9 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f4c:	f7ff f8f2 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f50:	463b      	mov	r3, r7
 8001f52:	2204      	movs	r2, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4812      	ldr	r0, [pc, #72]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001f58:	f007 fade 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001f62:	f7ff f8e7 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f66:	463b      	mov	r3, r7
 8001f68:	2208      	movs	r2, #8
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480c      	ldr	r0, [pc, #48]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001f6e:	f007 fad3 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001f78:	f7ff f8dc 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	220c      	movs	r2, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001f84:	f007 fac8 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001f8e:	f7ff f8d1 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f92:	4803      	ldr	r0, [pc, #12]	@ (8001fa0 <MX_TIM3_Init+0x128>)
 8001f94:	f000 f98c 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 8001f98:	bf00      	nop
 8001f9a:	3738      	adds	r7, #56	@ 0x38
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	240006b0 	.word	0x240006b0
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	@ 0x38
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc8:	463b      	mov	r3, r7
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	615a      	str	r2, [r3, #20]
 8001fd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fda:	4b38      	ldr	r3, [pc, #224]	@ (80020bc <MX_TIM4_Init+0x114>)
 8001fdc:	4a38      	ldr	r2, [pc, #224]	@ (80020c0 <MX_TIM4_Init+0x118>)
 8001fde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fe0:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <MX_TIM4_Init+0x114>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b35      	ldr	r3, [pc, #212]	@ (80020bc <MX_TIM4_Init+0x114>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fec:	4b33      	ldr	r3, [pc, #204]	@ (80020bc <MX_TIM4_Init+0x114>)
 8001fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff4:	4b31      	ldr	r3, [pc, #196]	@ (80020bc <MX_TIM4_Init+0x114>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffa:	4b30      	ldr	r3, [pc, #192]	@ (80020bc <MX_TIM4_Init+0x114>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002000:	482e      	ldr	r0, [pc, #184]	@ (80020bc <MX_TIM4_Init+0x114>)
 8002002:	f007 f9d0 	bl	80093a6 <HAL_TIM_Base_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800200c:	f7ff f892 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002016:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800201a:	4619      	mov	r1, r3
 800201c:	4827      	ldr	r0, [pc, #156]	@ (80020bc <MX_TIM4_Init+0x114>)
 800201e:	f007 fb8f 	bl	8009740 <HAL_TIM_ConfigClockSource>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002028:	f7ff f884 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800202c:	4823      	ldr	r0, [pc, #140]	@ (80020bc <MX_TIM4_Init+0x114>)
 800202e:	f007 fa11 	bl	8009454 <HAL_TIM_PWM_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002038:	f7ff f87c 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	481c      	ldr	r0, [pc, #112]	@ (80020bc <MX_TIM4_Init+0x114>)
 800204c:	f008 f884 	bl	800a158 <HAL_TIMEx_MasterConfigSynchronization>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002056:	f7ff f86d 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205a:	2360      	movs	r3, #96	@ 0x60
 800205c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800206a:	463b      	mov	r3, r7
 800206c:	2204      	movs	r2, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4812      	ldr	r0, [pc, #72]	@ (80020bc <MX_TIM4_Init+0x114>)
 8002072:	f007 fa51 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800207c:	f7ff f85a 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002080:	463b      	mov	r3, r7
 8002082:	2208      	movs	r2, #8
 8002084:	4619      	mov	r1, r3
 8002086:	480d      	ldr	r0, [pc, #52]	@ (80020bc <MX_TIM4_Init+0x114>)
 8002088:	f007 fa46 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8002092:	f7ff f84f 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002096:	463b      	mov	r3, r7
 8002098:	220c      	movs	r2, #12
 800209a:	4619      	mov	r1, r3
 800209c:	4807      	ldr	r0, [pc, #28]	@ (80020bc <MX_TIM4_Init+0x114>)
 800209e:	f007 fa3b 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80020a8:	f7ff f844 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020ac:	4803      	ldr	r0, [pc, #12]	@ (80020bc <MX_TIM4_Init+0x114>)
 80020ae:	f000 f8ff 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 80020b2:	bf00      	nop
 80020b4:	3738      	adds	r7, #56	@ 0x38
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	240006fc 	.word	0x240006fc
 80020c0:	40000800 	.word	0x40000800

080020c4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b092      	sub	sp, #72	@ 0x48
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
 80020d8:	611a      	str	r2, [r3, #16]
 80020da:	615a      	str	r2, [r3, #20]
 80020dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020de:	463b      	mov	r3, r7
 80020e0:	222c      	movs	r2, #44	@ 0x2c
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00b fab2 	bl	800d64e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80020ea:	4b31      	ldr	r3, [pc, #196]	@ (80021b0 <MX_TIM16_Init+0xec>)
 80020ec:	4a31      	ldr	r2, [pc, #196]	@ (80021b4 <MX_TIM16_Init+0xf0>)
 80020ee:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80020f0:	4b2f      	ldr	r3, [pc, #188]	@ (80021b0 <MX_TIM16_Init+0xec>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f6:	4b2e      	ldr	r3, [pc, #184]	@ (80021b0 <MX_TIM16_Init+0xec>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80020fc:	4b2c      	ldr	r3, [pc, #176]	@ (80021b0 <MX_TIM16_Init+0xec>)
 80020fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002102:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002104:	4b2a      	ldr	r3, [pc, #168]	@ (80021b0 <MX_TIM16_Init+0xec>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800210a:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <MX_TIM16_Init+0xec>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b27      	ldr	r3, [pc, #156]	@ (80021b0 <MX_TIM16_Init+0xec>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002116:	4826      	ldr	r0, [pc, #152]	@ (80021b0 <MX_TIM16_Init+0xec>)
 8002118:	f007 f945 	bl	80093a6 <HAL_TIM_Base_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002122:	f7ff f807 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002126:	4822      	ldr	r0, [pc, #136]	@ (80021b0 <MX_TIM16_Init+0xec>)
 8002128:	f007 f994 	bl	8009454 <HAL_TIM_PWM_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002132:	f7fe ffff 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002136:	2360      	movs	r3, #96	@ 0x60
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213e:	2300      	movs	r3, #0
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002142:	2300      	movs	r3, #0
 8002144:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002156:	2200      	movs	r2, #0
 8002158:	4619      	mov	r1, r3
 800215a:	4815      	ldr	r0, [pc, #84]	@ (80021b0 <MX_TIM16_Init+0xec>)
 800215c:	f007 f9dc 	bl	8009518 <HAL_TIM_PWM_ConfigChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002166:	f7fe ffe5 	bl	8001134 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800217e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002182:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	4619      	mov	r1, r3
 8002190:	4807      	ldr	r0, [pc, #28]	@ (80021b0 <MX_TIM16_Init+0xec>)
 8002192:	f008 f86f 	bl	800a274 <HAL_TIMEx_ConfigBreakDeadTime>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800219c:	f7fe ffca 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80021a0:	4803      	ldr	r0, [pc, #12]	@ (80021b0 <MX_TIM16_Init+0xec>)
 80021a2:	f000 f885 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 80021a6:	bf00      	nop
 80021a8:	3748      	adds	r7, #72	@ 0x48
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	24000748 	.word	0x24000748
 80021b4:	40014400 	.word	0x40014400

080021b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	@ 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a35      	ldr	r2, [pc, #212]	@ (800229c <HAL_TIM_Base_MspInit+0xe4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10f      	bne.n	80021ea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ca:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 80021cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d0:	4a33      	ldr	r2, [pc, #204]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021da:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 80021dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80021e8:	e052      	b.n	8002290 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f2:	d10f      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021f4:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 80021f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021fa:	4a29      	ldr	r2, [pc, #164]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002204:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 8002206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]
}
 8002212:	e03d      	b.n	8002290 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a22      	ldr	r2, [pc, #136]	@ (80022a4 <HAL_TIM_Base_MspInit+0xec>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10f      	bne.n	800223e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 8002220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002224:	4a1e      	ldr	r2, [pc, #120]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800222e:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 8002230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697b      	ldr	r3, [r7, #20]
}
 800223c:	e028      	b.n	8002290 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <HAL_TIM_Base_MspInit+0xf0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d10f      	bne.n	8002268 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 800224a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800224e:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 800225a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
}
 8002266:	e013      	b.n	8002290 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM16)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0f      	ldr	r2, [pc, #60]	@ (80022ac <HAL_TIM_Base_MspInit+0xf4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 8002274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002278:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 800227a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800227e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <HAL_TIM_Base_MspInit+0xe8>)
 8002284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	bf00      	nop
 8002292:	3724      	adds	r7, #36	@ 0x24
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40010000 	.word	0x40010000
 80022a0:	58024400 	.word	0x58024400
 80022a4:	40000400 	.word	0x40000400
 80022a8:	40000800 	.word	0x40000800
 80022ac:	40014400 	.word	0x40014400

080022b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08e      	sub	sp, #56	@ 0x38
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a7d      	ldr	r2, [pc, #500]	@ (80024c4 <HAL_TIM_MspPostInit+0x214>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d120      	bne.n	8002314 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d2:	4b7d      	ldr	r3, [pc, #500]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d8:	4a7b      	ldr	r2, [pc, #492]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 80022da:	f043 0310 	orr.w	r3, r3, #16
 80022de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e2:	4b79      	ldr	r3, [pc, #484]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	623b      	str	r3, [r7, #32]
 80022ee:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80022f0:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002302:	2301      	movs	r3, #1
 8002304:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800230a:	4619      	mov	r1, r3
 800230c:	486f      	ldr	r0, [pc, #444]	@ (80024cc <HAL_TIM_MspPostInit+0x21c>)
 800230e:	f001 f957 	bl	80035c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002312:	e0d2      	b.n	80024ba <HAL_TIM_MspPostInit+0x20a>
  else if(timHandle->Instance==TIM2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231c:	d13f      	bne.n	800239e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b6a      	ldr	r3, [pc, #424]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002324:	4a68      	ldr	r2, [pc, #416]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800232e:	4b66      	ldr	r3, [pc, #408]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 8002330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233c:	4b62      	ldr	r3, [pc, #392]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002342:	4a61      	ldr	r2, [pc, #388]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800234c:	4b5e      	ldr	r3, [pc, #376]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800235a:	2320      	movs	r3, #32
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800236a:	2301      	movs	r3, #1
 800236c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002372:	4619      	mov	r1, r3
 8002374:	4856      	ldr	r0, [pc, #344]	@ (80024d0 <HAL_TIM_MspPostInit+0x220>)
 8002376:	f001 f923 	bl	80035c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_LS_10_Pin;
 800237a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238c:	2301      	movs	r3, #1
 800238e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PWM_LS_10_GPIO_Port, &GPIO_InitStruct);
 8002390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002394:	4619      	mov	r1, r3
 8002396:	484f      	ldr	r0, [pc, #316]	@ (80024d4 <HAL_TIM_MspPostInit+0x224>)
 8002398:	f001 f912 	bl	80035c0 <HAL_GPIO_Init>
}
 800239c:	e08d      	b.n	80024ba <HAL_TIM_MspPostInit+0x20a>
  else if(timHandle->Instance==TIM3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a4d      	ldr	r2, [pc, #308]	@ (80024d8 <HAL_TIM_MspPostInit+0x228>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d13e      	bne.n	8002426 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b47      	ldr	r3, [pc, #284]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ae:	4a46      	ldr	r2, [pc, #280]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b8:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	4b40      	ldr	r3, [pc, #256]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023cc:	4a3e      	ldr	r2, [pc, #248]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d6:	4b3c      	ldr	r3, [pc, #240]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 80023d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e4:	23c0      	movs	r3, #192	@ 0xc0
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023f4:	2302      	movs	r3, #2
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023fc:	4619      	mov	r1, r3
 80023fe:	4834      	ldr	r0, [pc, #208]	@ (80024d0 <HAL_TIM_MspPostInit+0x220>)
 8002400:	f001 f8de 	bl	80035c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002404:	2303      	movs	r3, #3
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002414:	2302      	movs	r3, #2
 8002416:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800241c:	4619      	mov	r1, r3
 800241e:	482d      	ldr	r0, [pc, #180]	@ (80024d4 <HAL_TIM_MspPostInit+0x224>)
 8002420:	f001 f8ce 	bl	80035c0 <HAL_GPIO_Init>
}
 8002424:	e049      	b.n	80024ba <HAL_TIM_MspPostInit+0x20a>
  else if(timHandle->Instance==TIM4)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2c      	ldr	r2, [pc, #176]	@ (80024dc <HAL_TIM_MspPostInit+0x22c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d120      	bne.n	8002472 <HAL_TIM_MspPostInit+0x1c2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002430:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	4a24      	ldr	r2, [pc, #144]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002440:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800244e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002460:	2302      	movs	r3, #2
 8002462:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002468:	4619      	mov	r1, r3
 800246a:	481d      	ldr	r0, [pc, #116]	@ (80024e0 <HAL_TIM_MspPostInit+0x230>)
 800246c:	f001 f8a8 	bl	80035c0 <HAL_GPIO_Init>
}
 8002470:	e023      	b.n	80024ba <HAL_TIM_MspPostInit+0x20a>
  else if(timHandle->Instance==TIM16)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1b      	ldr	r2, [pc, #108]	@ (80024e4 <HAL_TIM_MspPostInit+0x234>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d11e      	bne.n	80024ba <HAL_TIM_MspPostInit+0x20a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002482:	4a11      	ldr	r2, [pc, #68]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <HAL_TIM_MspPostInit+0x218>)
 800248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_LS_16_Pin;
 800249a:	2340      	movs	r3, #64	@ 0x40
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80024aa:	2301      	movs	r3, #1
 80024ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PWM_LS_16_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b2:	4619      	mov	r1, r3
 80024b4:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <HAL_TIM_MspPostInit+0x238>)
 80024b6:	f001 f883 	bl	80035c0 <HAL_GPIO_Init>
}
 80024ba:	bf00      	nop
 80024bc:	3738      	adds	r7, #56	@ 0x38
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40010000 	.word	0x40010000
 80024c8:	58024400 	.word	0x58024400
 80024cc:	58021000 	.word	0x58021000
 80024d0:	58020000 	.word	0x58020000
 80024d4:	58020400 	.word	0x58020400
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800
 80024e0:	58020c00 	.word	0x58020c00
 80024e4:	40014400 	.word	0x40014400
 80024e8:	58021400 	.word	0x58021400

080024ec <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024f0:	4b22      	ldr	r3, [pc, #136]	@ (800257c <MX_UART4_Init+0x90>)
 80024f2:	4a23      	ldr	r2, [pc, #140]	@ (8002580 <MX_UART4_Init+0x94>)
 80024f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024f6:	4b21      	ldr	r3, [pc, #132]	@ (800257c <MX_UART4_Init+0x90>)
 80024f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024fe:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <MX_UART4_Init+0x90>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <MX_UART4_Init+0x90>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800250a:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <MX_UART4_Init+0x90>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <MX_UART4_Init+0x90>)
 8002512:	220c      	movs	r2, #12
 8002514:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002516:	4b19      	ldr	r3, [pc, #100]	@ (800257c <MX_UART4_Init+0x90>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <MX_UART4_Init+0x90>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <MX_UART4_Init+0x90>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <MX_UART4_Init+0x90>)
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800252e:	4b13      	ldr	r3, [pc, #76]	@ (800257c <MX_UART4_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002534:	4811      	ldr	r0, [pc, #68]	@ (800257c <MX_UART4_Init+0x90>)
 8002536:	f007 ff1b 	bl	800a370 <HAL_UART_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002540:	f7fe fdf8 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002544:	2100      	movs	r1, #0
 8002546:	480d      	ldr	r0, [pc, #52]	@ (800257c <MX_UART4_Init+0x90>)
 8002548:	f008 ffb1 	bl	800b4ae <HAL_UARTEx_SetTxFifoThreshold>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002552:	f7fe fdef 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002556:	2100      	movs	r1, #0
 8002558:	4808      	ldr	r0, [pc, #32]	@ (800257c <MX_UART4_Init+0x90>)
 800255a:	f008 ffe6 	bl	800b52a <HAL_UARTEx_SetRxFifoThreshold>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002564:	f7fe fde6 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002568:	4804      	ldr	r0, [pc, #16]	@ (800257c <MX_UART4_Init+0x90>)
 800256a:	f008 ff67 	bl	800b43c <HAL_UARTEx_DisableFifoMode>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002574:	f7fe fdde 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	24000794 	.word	0x24000794
 8002580:	40004c00 	.word	0x40004c00

08002584 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002588:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <MX_UART5_Init+0x90>)
 800258a:	4a23      	ldr	r2, [pc, #140]	@ (8002618 <MX_UART5_Init+0x94>)
 800258c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800258e:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <MX_UART5_Init+0x90>)
 8002590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002594:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b1f      	ldr	r3, [pc, #124]	@ (8002614 <MX_UART5_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <MX_UART5_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <MX_UART5_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <MX_UART5_Init+0x90>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <MX_UART5_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <MX_UART5_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ba:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <MX_UART5_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c0:	4b14      	ldr	r3, [pc, #80]	@ (8002614 <MX_UART5_Init+0x90>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c6:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <MX_UART5_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80025cc:	4811      	ldr	r0, [pc, #68]	@ (8002614 <MX_UART5_Init+0x90>)
 80025ce:	f007 fecf 	bl	800a370 <HAL_UART_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80025d8:	f7fe fdac 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025dc:	2100      	movs	r1, #0
 80025de:	480d      	ldr	r0, [pc, #52]	@ (8002614 <MX_UART5_Init+0x90>)
 80025e0:	f008 ff65 	bl	800b4ae <HAL_UARTEx_SetTxFifoThreshold>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80025ea:	f7fe fda3 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ee:	2100      	movs	r1, #0
 80025f0:	4808      	ldr	r0, [pc, #32]	@ (8002614 <MX_UART5_Init+0x90>)
 80025f2:	f008 ff9a 	bl	800b52a <HAL_UARTEx_SetRxFifoThreshold>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80025fc:	f7fe fd9a 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	@ (8002614 <MX_UART5_Init+0x90>)
 8002602:	f008 ff1b 	bl	800b43c <HAL_UARTEx_DisableFifoMode>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800260c:	f7fe fd92 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	24000828 	.word	0x24000828
 8002618:	40005000 	.word	0x40005000

0800261c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002620:	4b22      	ldr	r3, [pc, #136]	@ (80026ac <MX_UART7_Init+0x90>)
 8002622:	4a23      	ldr	r2, [pc, #140]	@ (80026b0 <MX_UART7_Init+0x94>)
 8002624:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002626:	4b21      	ldr	r3, [pc, #132]	@ (80026ac <MX_UART7_Init+0x90>)
 8002628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800262c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b1f      	ldr	r3, [pc, #124]	@ (80026ac <MX_UART7_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <MX_UART7_Init+0x90>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800263a:	4b1c      	ldr	r3, [pc, #112]	@ (80026ac <MX_UART7_Init+0x90>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <MX_UART7_Init+0x90>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <MX_UART7_Init+0x90>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b17      	ldr	r3, [pc, #92]	@ (80026ac <MX_UART7_Init+0x90>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002652:	4b16      	ldr	r3, [pc, #88]	@ (80026ac <MX_UART7_Init+0x90>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002658:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <MX_UART7_Init+0x90>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800265e:	4b13      	ldr	r3, [pc, #76]	@ (80026ac <MX_UART7_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002664:	4811      	ldr	r0, [pc, #68]	@ (80026ac <MX_UART7_Init+0x90>)
 8002666:	f007 fe83 	bl	800a370 <HAL_UART_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002670:	f7fe fd60 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002674:	2100      	movs	r1, #0
 8002676:	480d      	ldr	r0, [pc, #52]	@ (80026ac <MX_UART7_Init+0x90>)
 8002678:	f008 ff19 	bl	800b4ae <HAL_UARTEx_SetTxFifoThreshold>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002682:	f7fe fd57 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002686:	2100      	movs	r1, #0
 8002688:	4808      	ldr	r0, [pc, #32]	@ (80026ac <MX_UART7_Init+0x90>)
 800268a:	f008 ff4e 	bl	800b52a <HAL_UARTEx_SetRxFifoThreshold>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002694:	f7fe fd4e 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002698:	4804      	ldr	r0, [pc, #16]	@ (80026ac <MX_UART7_Init+0x90>)
 800269a:	f008 fecf 	bl	800b43c <HAL_UARTEx_DisableFifoMode>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80026a4:	f7fe fd46 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	240008bc 	.word	0x240008bc
 80026b0:	40007800 	.word	0x40007800

080026b4 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80026b8:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <MX_UART8_Init+0x90>)
 80026ba:	4a23      	ldr	r2, [pc, #140]	@ (8002748 <MX_UART8_Init+0x94>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80026be:	4b21      	ldr	r3, [pc, #132]	@ (8002744 <MX_UART8_Init+0x90>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002744 <MX_UART8_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <MX_UART8_Init+0x90>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <MX_UART8_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002744 <MX_UART8_Init+0x90>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b19      	ldr	r3, [pc, #100]	@ (8002744 <MX_UART8_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <MX_UART8_Init+0x90>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ea:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <MX_UART8_Init+0x90>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026f0:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <MX_UART8_Init+0x90>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f6:	4b13      	ldr	r3, [pc, #76]	@ (8002744 <MX_UART8_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80026fc:	4811      	ldr	r0, [pc, #68]	@ (8002744 <MX_UART8_Init+0x90>)
 80026fe:	f007 fe37 	bl	800a370 <HAL_UART_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002708:	f7fe fd14 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800270c:	2100      	movs	r1, #0
 800270e:	480d      	ldr	r0, [pc, #52]	@ (8002744 <MX_UART8_Init+0x90>)
 8002710:	f008 fecd 	bl	800b4ae <HAL_UARTEx_SetTxFifoThreshold>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800271a:	f7fe fd0b 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800271e:	2100      	movs	r1, #0
 8002720:	4808      	ldr	r0, [pc, #32]	@ (8002744 <MX_UART8_Init+0x90>)
 8002722:	f008 ff02 	bl	800b52a <HAL_UARTEx_SetRxFifoThreshold>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800272c:	f7fe fd02 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	@ (8002744 <MX_UART8_Init+0x90>)
 8002732:	f008 fe83 	bl	800b43c <HAL_UARTEx_DisableFifoMode>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800273c:	f7fe fcfa 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	24000950 	.word	0x24000950
 8002748:	40007c00 	.word	0x40007c00

0800274c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002750:	4b22      	ldr	r3, [pc, #136]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 8002752:	4a23      	ldr	r2, [pc, #140]	@ (80027e0 <MX_USART1_UART_Init+0x94>)
 8002754:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002756:	4b21      	ldr	r3, [pc, #132]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 8002758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800275c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800275e:	4b1f      	ldr	r3, [pc, #124]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800276a:	4b1c      	ldr	r3, [pc, #112]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002770:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 8002772:	220c      	movs	r2, #12
 8002774:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002776:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800277c:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 8002784:	2200      	movs	r2, #0
 8002786:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002788:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800278e:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002794:	4811      	ldr	r0, [pc, #68]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 8002796:	f007 fdeb 	bl	800a370 <HAL_UART_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027a0:	f7fe fcc8 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027a4:	2100      	movs	r1, #0
 80027a6:	480d      	ldr	r0, [pc, #52]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 80027a8:	f008 fe81 	bl	800b4ae <HAL_UARTEx_SetTxFifoThreshold>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027b2:	f7fe fcbf 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b6:	2100      	movs	r1, #0
 80027b8:	4808      	ldr	r0, [pc, #32]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 80027ba:	f008 feb6 	bl	800b52a <HAL_UARTEx_SetRxFifoThreshold>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027c4:	f7fe fcb6 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027c8:	4804      	ldr	r0, [pc, #16]	@ (80027dc <MX_USART1_UART_Init+0x90>)
 80027ca:	f008 fe37 	bl	800b43c <HAL_UARTEx_DisableFifoMode>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027d4:	f7fe fcae 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	240009e4 	.word	0x240009e4
 80027e0:	40011000 	.word	0x40011000

080027e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027e8:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 80027ea:	4a24      	ldr	r2, [pc, #144]	@ (800287c <MX_USART2_UART_Init+0x98>)
 80027ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ee:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 80027f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 800280a:	220c      	movs	r2, #12
 800280c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 8002810:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002814:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002816:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800281c:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 8002824:	2200      	movs	r2, #0
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 800282a:	2200      	movs	r2, #0
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800282e:	4812      	ldr	r0, [pc, #72]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 8002830:	f007 fd9e 	bl	800a370 <HAL_UART_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800283a:	f7fe fc7b 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283e:	2100      	movs	r1, #0
 8002840:	480d      	ldr	r0, [pc, #52]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 8002842:	f008 fe34 	bl	800b4ae <HAL_UARTEx_SetTxFifoThreshold>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800284c:	f7fe fc72 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002850:	2100      	movs	r1, #0
 8002852:	4809      	ldr	r0, [pc, #36]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 8002854:	f008 fe69 	bl	800b52a <HAL_UARTEx_SetRxFifoThreshold>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800285e:	f7fe fc69 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	@ (8002878 <MX_USART2_UART_Init+0x94>)
 8002864:	f008 fdea 	bl	800b43c <HAL_UARTEx_DisableFifoMode>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800286e:	f7fe fc61 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	24000a78 	.word	0x24000a78
 800287c:	40004400 	.word	0x40004400

08002880 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002884:	4b23      	ldr	r3, [pc, #140]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 8002886:	4a24      	ldr	r2, [pc, #144]	@ (8002918 <MX_USART3_UART_Init+0x98>)
 8002888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800288a:	4b22      	ldr	r3, [pc, #136]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 800288c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b20      	ldr	r3, [pc, #128]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b1e      	ldr	r3, [pc, #120]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800289e:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80028aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028ac:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80028b0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b2:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b8:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c4:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028ca:	4812      	ldr	r0, [pc, #72]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028cc:	f007 fd50 	bl	800a370 <HAL_UART_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80028d6:	f7fe fc2d 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028da:	2100      	movs	r1, #0
 80028dc:	480d      	ldr	r0, [pc, #52]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028de:	f008 fde6 	bl	800b4ae <HAL_UARTEx_SetTxFifoThreshold>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80028e8:	f7fe fc24 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ec:	2100      	movs	r1, #0
 80028ee:	4809      	ldr	r0, [pc, #36]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 80028f0:	f008 fe1b 	bl	800b52a <HAL_UARTEx_SetRxFifoThreshold>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 80028fa:	f7fe fc1b 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	@ (8002914 <MX_USART3_UART_Init+0x94>)
 8002900:	f008 fd9c 	bl	800b43c <HAL_UARTEx_DisableFifoMode>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 800290a:	f7fe fc13 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	24000b0c 	.word	0x24000b0c
 8002918:	40004800 	.word	0x40004800

0800291c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002920:	4b22      	ldr	r3, [pc, #136]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002922:	4a23      	ldr	r2, [pc, #140]	@ (80029b0 <MX_USART6_UART_Init+0x94>)
 8002924:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002926:	4b21      	ldr	r3, [pc, #132]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800292c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b1f      	ldr	r3, [pc, #124]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800293a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b17      	ldr	r3, [pc, #92]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002952:	4b16      	ldr	r3, [pc, #88]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002958:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295e:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002960:	2200      	movs	r2, #0
 8002962:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002964:	4811      	ldr	r0, [pc, #68]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002966:	f007 fd03 	bl	800a370 <HAL_UART_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002970:	f7fe fbe0 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002974:	2100      	movs	r1, #0
 8002976:	480d      	ldr	r0, [pc, #52]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 8002978:	f008 fd99 	bl	800b4ae <HAL_UARTEx_SetTxFifoThreshold>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002982:	f7fe fbd7 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002986:	2100      	movs	r1, #0
 8002988:	4808      	ldr	r0, [pc, #32]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 800298a:	f008 fdce 	bl	800b52a <HAL_UARTEx_SetRxFifoThreshold>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002994:	f7fe fbce 	bl	8001134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002998:	4804      	ldr	r0, [pc, #16]	@ (80029ac <MX_USART6_UART_Init+0x90>)
 800299a:	f008 fd4f 	bl	800b43c <HAL_UARTEx_DisableFifoMode>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80029a4:	f7fe fbc6 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	24000ba0 	.word	0x24000ba0
 80029b0:	40011400 	.word	0x40011400

080029b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0ca      	sub	sp, #296	@ 0x128
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80029c2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029d8:	22c8      	movs	r2, #200	@ 0xc8
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f00a fe36 	bl	800d64e <memset>
  if(uartHandle->Instance==UART4)
 80029e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029e6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4aa2      	ldr	r2, [pc, #648]	@ (8002c78 <HAL_UART_MspInit+0x2c4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d146      	bne.n	8002a82 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80029f4:	f04f 0202 	mov.w	r2, #2
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 fa9c 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002a16:	f7fe fb8d 	bl	8001134 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a1a:	4b98      	ldr	r3, [pc, #608]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a20:	4a96      	ldr	r2, [pc, #600]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002a22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a2a:	4b94      	ldr	r3, [pc, #592]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	4b90      	ldr	r3, [pc, #576]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a3e:	4a8f      	ldr	r2, [pc, #572]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a48:	4b8c      	ldr	r3, [pc, #560]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a56:	2303      	movs	r3, #3
 8002a58:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a6e:	2308      	movs	r3, #8
 8002a70:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4881      	ldr	r0, [pc, #516]	@ (8002c80 <HAL_UART_MspInit+0x2cc>)
 8002a7c:	f000 fda0 	bl	80035c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002a80:	e28b      	b.n	8002f9a <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==UART5)
 8002a82:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a86:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c84 <HAL_UART_MspInit+0x2d0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d147      	bne.n	8002b24 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002a94:	f04f 0202 	mov.w	r2, #2
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aa6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fa4c 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_MspInit+0x106>
      Error_Handler();
 8002ab6:	f7fe fb3d 	bl	8001134 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002aba:	4b70      	ldr	r3, [pc, #448]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ac0:	4a6e      	ldr	r2, [pc, #440]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ac6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002aca:	4b6c      	ldr	r3, [pc, #432]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	4b68      	ldr	r3, [pc, #416]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ade:	4a67      	ldr	r2, [pc, #412]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ae8:	4b64      	ldr	r3, [pc, #400]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002af6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002afa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002b10:	230e      	movs	r3, #14
 8002b12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	485a      	ldr	r0, [pc, #360]	@ (8002c88 <HAL_UART_MspInit+0x2d4>)
 8002b1e:	f000 fd4f 	bl	80035c0 <HAL_GPIO_Init>
}
 8002b22:	e23a      	b.n	8002f9a <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==UART7)
 8002b24:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b28:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a56      	ldr	r2, [pc, #344]	@ (8002c8c <HAL_UART_MspInit+0x2d8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d147      	bne.n	8002bc6 <HAL_UART_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002b36:	f04f 0202 	mov.w	r2, #2
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b48:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 f9fb 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002b58:	f7fe faec 	bl	8001134 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002b5c:	4b47      	ldr	r3, [pc, #284]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002b5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b62:	4a46      	ldr	r2, [pc, #280]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002b64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b6c:	4b43      	ldr	r3, [pc, #268]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b7a:	4b40      	ldr	r3, [pc, #256]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b80:	4a3e      	ldr	r2, [pc, #248]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002b82:	f043 0310 	orr.w	r3, r3, #16
 8002b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b98:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b9c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002bb2:	2307      	movs	r3, #7
 8002bb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4834      	ldr	r0, [pc, #208]	@ (8002c90 <HAL_UART_MspInit+0x2dc>)
 8002bc0:	f000 fcfe 	bl	80035c0 <HAL_GPIO_Init>
}
 8002bc4:	e1e9      	b.n	8002f9a <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==UART8)
 8002bc6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002bca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a30      	ldr	r2, [pc, #192]	@ (8002c94 <HAL_UART_MspInit+0x2e0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d15f      	bne.n	8002c98 <HAL_UART_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002bd8:	f04f 0202 	mov.w	r2, #2
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 f9aa 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8002bfa:	f7fe fa9b 	bl	8001134 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c04:	4a1d      	ldr	r2, [pc, #116]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c1c:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c22:	4a16      	ldr	r2, [pc, #88]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002c24:	f043 0310 	orr.w	r3, r3, #16
 8002c28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <HAL_UART_MspInit+0x2c8>)
 8002c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c32:	f003 0210 	and.w	r2, r3, #16
 8002c36:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c3a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c48:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002c62:	2308      	movs	r3, #8
 8002c64:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c68:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4808      	ldr	r0, [pc, #32]	@ (8002c90 <HAL_UART_MspInit+0x2dc>)
 8002c70:	f000 fca6 	bl	80035c0 <HAL_GPIO_Init>
}
 8002c74:	e191      	b.n	8002f9a <HAL_UART_MspInit+0x5e6>
 8002c76:	bf00      	nop
 8002c78:	40004c00 	.word	0x40004c00
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	58020000 	.word	0x58020000
 8002c84:	40005000 	.word	0x40005000
 8002c88:	58020400 	.word	0x58020400
 8002c8c:	40007800 	.word	0x40007800
 8002c90:	58021000 	.word	0x58021000
 8002c94:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==USART1)
 8002c98:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c9c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4abf      	ldr	r2, [pc, #764]	@ (8002fa4 <HAL_UART_MspInit+0x5f0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d157      	bne.n	8002d5a <HAL_UART_MspInit+0x3a6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002caa:	f04f 0201 	mov.w	r2, #1
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cbc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 f941 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_UART_MspInit+0x31c>
      Error_Handler();
 8002ccc:	f7fe fa32 	bl	8001134 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cd0:	4bb5      	ldr	r3, [pc, #724]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cd6:	4ab4      	ldr	r2, [pc, #720]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ce0:	4bb1      	ldr	r3, [pc, #708]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ce6:	f003 0210 	and.w	r2, r3, #16
 8002cea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002cee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cfc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	4baa      	ldr	r3, [pc, #680]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d04:	4aa8      	ldr	r2, [pc, #672]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d0e:	4ba6      	ldr	r3, [pc, #664]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d14:	f003 0201 	and.w	r2, r3, #1
 8002d18:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d2a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d2c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d30:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d46:	2307      	movs	r3, #7
 8002d48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002d50:	4619      	mov	r1, r3
 8002d52:	4896      	ldr	r0, [pc, #600]	@ (8002fac <HAL_UART_MspInit+0x5f8>)
 8002d54:	f000 fc34 	bl	80035c0 <HAL_GPIO_Init>
}
 8002d58:	e11f      	b.n	8002f9a <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==USART2)
 8002d5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d5e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a92      	ldr	r2, [pc, #584]	@ (8002fb0 <HAL_UART_MspInit+0x5fc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d156      	bne.n	8002e1a <HAL_UART_MspInit+0x466>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d6c:	f04f 0202 	mov.w	r2, #2
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d7e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 f8e0 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_UART_MspInit+0x3de>
      Error_Handler();
 8002d8e:	f7fe f9d1 	bl	8001134 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d92:	4b85      	ldr	r3, [pc, #532]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d98:	4a83      	ldr	r2, [pc, #524]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002da2:	4b81      	ldr	r3, [pc, #516]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002da8:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8002dac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002db0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002dba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002dbe:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc0:	4b79      	ldr	r3, [pc, #484]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dc6:	4a78      	ldr	r2, [pc, #480]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dd0:	4b75      	ldr	r3, [pc, #468]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd6:	f003 0208 	and.w	r2, r3, #8
 8002dda:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002dde:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002de8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dec:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002dee:	2378      	movs	r3, #120	@ 0x78
 8002df0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e06:	2307      	movs	r3, #7
 8002e08:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002e10:	4619      	mov	r1, r3
 8002e12:	4868      	ldr	r0, [pc, #416]	@ (8002fb4 <HAL_UART_MspInit+0x600>)
 8002e14:	f000 fbd4 	bl	80035c0 <HAL_GPIO_Init>
}
 8002e18:	e0bf      	b.n	8002f9a <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==USART3)
 8002e1a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e1e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a64      	ldr	r2, [pc, #400]	@ (8002fb8 <HAL_UART_MspInit+0x604>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d157      	bne.n	8002edc <HAL_UART_MspInit+0x528>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e2c:	f04f 0202 	mov.w	r2, #2
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e42:	4618      	mov	r0, r3
 8002e44:	f002 f880 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_UART_MspInit+0x49e>
      Error_Handler();
 8002e4e:	f7fe f971 	bl	8001134 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e52:	4b55      	ldr	r3, [pc, #340]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e58:	4a53      	ldr	r2, [pc, #332]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002e5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e62:	4b51      	ldr	r3, [pc, #324]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e68:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002e6c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e70:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e7e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e80:	4b49      	ldr	r3, [pc, #292]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e86:	4a48      	ldr	r2, [pc, #288]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002e88:	f043 0308 	orr.w	r3, r3, #8
 8002e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e90:	4b45      	ldr	r3, [pc, #276]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e96:	f003 0208 	and.w	r2, r3, #8
 8002e9a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002ea8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002eac:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8002eae:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8002eb2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ec8:	2307      	movs	r3, #7
 8002eca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ece:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4837      	ldr	r0, [pc, #220]	@ (8002fb4 <HAL_UART_MspInit+0x600>)
 8002ed6:	f000 fb73 	bl	80035c0 <HAL_GPIO_Init>
}
 8002eda:	e05e      	b.n	8002f9a <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==USART6)
 8002edc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002ee0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a34      	ldr	r2, [pc, #208]	@ (8002fbc <HAL_UART_MspInit+0x608>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d155      	bne.n	8002f9a <HAL_UART_MspInit+0x5e6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002eee:	f04f 0201 	mov.w	r2, #1
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f00:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 f81f 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_UART_MspInit+0x560>
      Error_Handler();
 8002f10:	f7fe f910 	bl	8001134 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f14:	4b24      	ldr	r3, [pc, #144]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f1a:	4a23      	ldr	r2, [pc, #140]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002f1c:	f043 0320 	orr.w	r3, r3, #32
 8002f20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f24:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f2a:	f003 0220 	and.w	r2, r3, #32
 8002f2e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f32:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f40:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f48:	4a17      	ldr	r2, [pc, #92]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_UART_MspInit+0x5f4>)
 8002f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f58:	f003 0204 	and.w	r2, r3, #4
 8002f5c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f60:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f6e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f70:	23c0      	movs	r3, #192	@ 0xc0
 8002f72:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002f88:	2307      	movs	r3, #7
 8002f8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002f92:	4619      	mov	r1, r3
 8002f94:	480a      	ldr	r0, [pc, #40]	@ (8002fc0 <HAL_UART_MspInit+0x60c>)
 8002f96:	f000 fb13 	bl	80035c0 <HAL_GPIO_Init>
}
 8002f9a:	bf00      	nop
 8002f9c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40011000 	.word	0x40011000
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	58020000 	.word	0x58020000
 8002fb0:	40004400 	.word	0x40004400
 8002fb4:	58020c00 	.word	0x58020c00
 8002fb8:	40004800 	.word	0x40004800
 8002fbc:	40011400 	.word	0x40011400
 8002fc0:	58020800 	.word	0x58020800

08002fc4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002fc8:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002fca:	4a16      	ldr	r2, [pc, #88]	@ (8003024 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002fcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002fce:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002fd0:	2209      	movs	r2, #9
 8002fd2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002fd4:	4b12      	ldr	r3, [pc, #72]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002fda:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003000:	2200      	movs	r2, #0
 8003002:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003006:	2200      	movs	r2, #0
 8003008:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	@ (8003020 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800300c:	f000 fe1b 	bl	8003c46 <HAL_PCD_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8003016:	f7fe f88d 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	24000c34 	.word	0x24000c34
 8003024:	40080000 	.word	0x40080000

08003028 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b0bc      	sub	sp, #240	@ 0xf0
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003040:	f107 0310 	add.w	r3, r7, #16
 8003044:	22c8      	movs	r2, #200	@ 0xc8
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f00a fb00 	bl	800d64e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a28      	ldr	r2, [pc, #160]	@ (80030f4 <HAL_PCD_MspInit+0xcc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d149      	bne.n	80030ec <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003058:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003064:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800306c:	f107 0310 	add.w	r3, r7, #16
 8003070:	4618      	mov	r0, r3
 8003072:	f001 ff69 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800307c:	f7fe f85a 	bl	8001134 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003080:	f000 ff6c 	bl	8003f5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003084:	4b1c      	ldr	r3, [pc, #112]	@ (80030f8 <HAL_PCD_MspInit+0xd0>)
 8003086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800308a:	4a1b      	ldr	r2, [pc, #108]	@ (80030f8 <HAL_PCD_MspInit+0xd0>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003094:	4b18      	ldr	r3, [pc, #96]	@ (80030f8 <HAL_PCD_MspInit+0xd0>)
 8003096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80030a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80030bc:	230a      	movs	r3, #10
 80030be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030c6:	4619      	mov	r1, r3
 80030c8:	480c      	ldr	r0, [pc, #48]	@ (80030fc <HAL_PCD_MspInit+0xd4>)
 80030ca:	f000 fa79 	bl	80035c0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030ce:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <HAL_PCD_MspInit+0xd0>)
 80030d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030d4:	4a08      	ldr	r2, [pc, #32]	@ (80030f8 <HAL_PCD_MspInit+0xd0>)
 80030d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_PCD_MspInit+0xd0>)
 80030e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80030ec:	bf00      	nop
 80030ee:	37f0      	adds	r7, #240	@ 0xf0
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40080000 	.word	0x40080000
 80030f8:	58024400 	.word	0x58024400
 80030fc:	58020000 	.word	0x58020000

08003100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003100:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800313c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003104:	f7fd fb88 	bl	8000818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003108:	f7fd fad8 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800310c:	480c      	ldr	r0, [pc, #48]	@ (8003140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800310e:	490d      	ldr	r1, [pc, #52]	@ (8003144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003110:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003114:	e002      	b.n	800311c <LoopCopyDataInit>

08003116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800311a:	3304      	adds	r3, #4

0800311c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800311c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800311e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003120:	d3f9      	bcc.n	8003116 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003122:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003124:	4c0a      	ldr	r4, [pc, #40]	@ (8003150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003128:	e001      	b.n	800312e <LoopFillZerobss>

0800312a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800312a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800312c:	3204      	adds	r2, #4

0800312e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800312e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003130:	d3fb      	bcc.n	800312a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003132:	f00a fae5 	bl	800d700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003136:	f7fd fed9 	bl	8000eec <main>
  bx  lr
 800313a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800313c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003140:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003144:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8003148:	0800f7a4 	.word	0x0800f7a4
  ldr r2, =_sbss
 800314c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8003150:	2400127c 	.word	0x2400127c

08003154 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003154:	e7fe      	b.n	8003154 <ADC3_IRQHandler>
	...

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800315e:	2003      	movs	r0, #3
 8003160:	f000 f984 	bl	800346c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003164:	f001 fd1a 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_Init+0x68>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	4913      	ldr	r1, [pc, #76]	@ (80031c4 <HAL_Init+0x6c>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
 8003180:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <HAL_Init+0x68>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	4a0e      	ldr	r2, [pc, #56]	@ (80031c4 <HAL_Init+0x6c>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	4a0b      	ldr	r2, [pc, #44]	@ (80031c8 <HAL_Init+0x70>)
 800319a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800319c:	4a0b      	ldr	r2, [pc, #44]	@ (80031cc <HAL_Init+0x74>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031a2:	200f      	movs	r0, #15
 80031a4:	f000 f814 	bl	80031d0 <HAL_InitTick>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e002      	b.n	80031b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80031b2:	f7fe fc1b 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	58024400 	.word	0x58024400
 80031c4:	0800f3d0 	.word	0x0800f3d0
 80031c8:	24000004 	.word	0x24000004
 80031cc:	24000000 	.word	0x24000000

080031d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80031d8:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <HAL_InitTick+0x60>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e021      	b.n	8003228 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80031e4:	4b13      	ldr	r3, [pc, #76]	@ (8003234 <HAL_InitTick+0x64>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <HAL_InitTick+0x60>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f95b 	bl	80034b6 <HAL_SYSTICK_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e00e      	b.n	8003228 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d80a      	bhi.n	8003226 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003210:	2200      	movs	r2, #0
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f000 f933 	bl	8003482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800321c:	4a06      	ldr	r2, [pc, #24]	@ (8003238 <HAL_InitTick+0x68>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2400000c 	.word	0x2400000c
 8003234:	24000000 	.word	0x24000000
 8003238:	24000008 	.word	0x24000008

0800323c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_IncTick+0x20>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <HAL_IncTick+0x24>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4413      	add	r3, r2
 800324c:	4a04      	ldr	r2, [pc, #16]	@ (8003260 <HAL_IncTick+0x24>)
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	2400000c 	.word	0x2400000c
 8003260:	24001118 	.word	0x24001118

08003264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return uwTick;
 8003268:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <HAL_GetTick+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	24001118 	.word	0x24001118

0800327c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff ffee 	bl	8003264 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d005      	beq.n	80032a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_Delay+0x44>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032a2:	bf00      	nop
 80032a4:	f7ff ffde 	bl	8003264 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d8f7      	bhi.n	80032a4 <HAL_Delay+0x28>
  {
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	2400000c 	.word	0x2400000c

080032c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80032c8:	4b03      	ldr	r3, [pc, #12]	@ (80032d8 <HAL_GetREVID+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0c1b      	lsrs	r3, r3, #16
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	5c001000 	.word	0x5c001000

080032dc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80032e6:	4b07      	ldr	r3, [pc, #28]	@ (8003304 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	4904      	ldr	r1, [pc, #16]	@ (8003304 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	58000400 	.word	0x58000400

08003308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003318:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <__NVIC_SetPriorityGrouping+0x40>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003324:	4013      	ands	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003330:	4b06      	ldr	r3, [pc, #24]	@ (800334c <__NVIC_SetPriorityGrouping+0x44>)
 8003332:	4313      	orrs	r3, r2
 8003334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003336:	4a04      	ldr	r2, [pc, #16]	@ (8003348 <__NVIC_SetPriorityGrouping+0x40>)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	60d3      	str	r3, [r2, #12]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00
 800334c:	05fa0000 	.word	0x05fa0000

08003350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003354:	4b04      	ldr	r3, [pc, #16]	@ (8003368 <__NVIC_GetPriorityGrouping+0x18>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	f003 0307 	and.w	r3, r3, #7
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db0a      	blt.n	8003396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	490c      	ldr	r1, [pc, #48]	@ (80033b8 <__NVIC_SetPriority+0x4c>)
 8003386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	440b      	add	r3, r1
 8003390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003394:	e00a      	b.n	80033ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4908      	ldr	r1, [pc, #32]	@ (80033bc <__NVIC_SetPriority+0x50>)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3b04      	subs	r3, #4
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	761a      	strb	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	@ 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f1c3 0307 	rsb	r3, r3, #7
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf28      	it	cs
 80033de:	2304      	movcs	r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d902      	bls.n	80033f0 <NVIC_EncodePriority+0x30>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3b03      	subs	r3, #3
 80033ee:	e000      	b.n	80033f2 <NVIC_EncodePriority+0x32>
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	401a      	ands	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003408:	f04f 31ff 	mov.w	r1, #4294967295
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43d9      	mvns	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	4313      	orrs	r3, r2
         );
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	@ 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003438:	d301      	bcc.n	800343e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343a:	2301      	movs	r3, #1
 800343c:	e00f      	b.n	800345e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343e:	4a0a      	ldr	r2, [pc, #40]	@ (8003468 <SysTick_Config+0x40>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003446:	210f      	movs	r1, #15
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	f7ff ff8e 	bl	800336c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003450:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <SysTick_Config+0x40>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003456:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <SysTick_Config+0x40>)
 8003458:	2207      	movs	r2, #7
 800345a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	e000e010 	.word	0xe000e010

0800346c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff47 	bl	8003308 <__NVIC_SetPriorityGrouping>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003490:	f7ff ff5e 	bl	8003350 <__NVIC_GetPriorityGrouping>
 8003494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff ff90 	bl	80033c0 <NVIC_EncodePriority>
 80034a0:	4602      	mov	r2, r0
 80034a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff5f 	bl	800336c <__NVIC_SetPriority>
}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffb2 	bl	8003428 <SysTick_Config>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80034d4:	f3bf 8f5f 	dmb	sy
}
 80034d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80034da:	4b07      	ldr	r3, [pc, #28]	@ (80034f8 <HAL_MPU_Disable+0x28>)
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	4a06      	ldr	r2, [pc, #24]	@ (80034f8 <HAL_MPU_Disable+0x28>)
 80034e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_MPU_Disable+0x2c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000ed00 	.word	0xe000ed00
 80034fc:	e000ed90 	.word	0xe000ed90

08003500 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003508:	4a0b      	ldr	r2, [pc, #44]	@ (8003538 <HAL_MPU_Enable+0x38>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003512:	4b0a      	ldr	r3, [pc, #40]	@ (800353c <HAL_MPU_Enable+0x3c>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	4a09      	ldr	r2, [pc, #36]	@ (800353c <HAL_MPU_Enable+0x3c>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800351e:	f3bf 8f4f 	dsb	sy
}
 8003522:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003524:	f3bf 8f6f 	isb	sy
}
 8003528:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed90 	.word	0xe000ed90
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	785a      	ldrb	r2, [r3, #1]
 800354c:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <HAL_MPU_ConfigRegion+0x7c>)
 800354e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003550:	4b1a      	ldr	r3, [pc, #104]	@ (80035bc <HAL_MPU_ConfigRegion+0x7c>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <HAL_MPU_ConfigRegion+0x7c>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800355c:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <HAL_MPU_ConfigRegion+0x7c>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7b1b      	ldrb	r3, [r3, #12]
 8003568:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7adb      	ldrb	r3, [r3, #11]
 800356e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003570:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7a9b      	ldrb	r3, [r3, #10]
 8003576:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003578:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7b5b      	ldrb	r3, [r3, #13]
 800357e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003580:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7b9b      	ldrb	r3, [r3, #14]
 8003586:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003588:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7bdb      	ldrb	r3, [r3, #15]
 800358e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003590:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7a5b      	ldrb	r3, [r3, #9]
 8003596:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003598:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7a1b      	ldrb	r3, [r3, #8]
 800359e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	7812      	ldrb	r2, [r2, #0]
 80035a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035a8:	4a04      	ldr	r2, [pc, #16]	@ (80035bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035ac:	6113      	str	r3, [r2, #16]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000ed90 	.word	0xe000ed90

080035c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	@ 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035ce:	4b89      	ldr	r3, [pc, #548]	@ (80037f4 <HAL_GPIO_Init+0x234>)
 80035d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035d2:	e194      	b.n	80038fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2101      	movs	r1, #1
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8186 	beq.w	80038f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d005      	beq.n	8003604 <HAL_GPIO_Init+0x44>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d130      	bne.n	8003666 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800363a:	2201      	movs	r2, #1
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	f003 0201 	and.w	r2, r3, #1
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b03      	cmp	r3, #3
 8003670:	d017      	beq.n	80036a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d123      	bne.n	80036f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	08da      	lsrs	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3208      	adds	r2, #8
 80036b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	220f      	movs	r2, #15
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	08da      	lsrs	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3208      	adds	r2, #8
 80036f0:	69b9      	ldr	r1, [r7, #24]
 80036f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	2203      	movs	r2, #3
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0203 	and.w	r2, r3, #3
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80e0 	beq.w	80038f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003738:	4b2f      	ldr	r3, [pc, #188]	@ (80037f8 <HAL_GPIO_Init+0x238>)
 800373a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800373e:	4a2e      	ldr	r2, [pc, #184]	@ (80037f8 <HAL_GPIO_Init+0x238>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003748:	4b2b      	ldr	r3, [pc, #172]	@ (80037f8 <HAL_GPIO_Init+0x238>)
 800374a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003756:	4a29      	ldr	r2, [pc, #164]	@ (80037fc <HAL_GPIO_Init+0x23c>)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	3302      	adds	r3, #2
 800375e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	220f      	movs	r2, #15
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a20      	ldr	r2, [pc, #128]	@ (8003800 <HAL_GPIO_Init+0x240>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d052      	beq.n	8003828 <HAL_GPIO_Init+0x268>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1f      	ldr	r2, [pc, #124]	@ (8003804 <HAL_GPIO_Init+0x244>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d031      	beq.n	80037ee <HAL_GPIO_Init+0x22e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a1e      	ldr	r2, [pc, #120]	@ (8003808 <HAL_GPIO_Init+0x248>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d02b      	beq.n	80037ea <HAL_GPIO_Init+0x22a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <HAL_GPIO_Init+0x24c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d025      	beq.n	80037e6 <HAL_GPIO_Init+0x226>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1c      	ldr	r2, [pc, #112]	@ (8003810 <HAL_GPIO_Init+0x250>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01f      	beq.n	80037e2 <HAL_GPIO_Init+0x222>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003814 <HAL_GPIO_Init+0x254>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d019      	beq.n	80037de <HAL_GPIO_Init+0x21e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003818 <HAL_GPIO_Init+0x258>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <HAL_GPIO_Init+0x21a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a19      	ldr	r2, [pc, #100]	@ (800381c <HAL_GPIO_Init+0x25c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00d      	beq.n	80037d6 <HAL_GPIO_Init+0x216>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a18      	ldr	r2, [pc, #96]	@ (8003820 <HAL_GPIO_Init+0x260>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <HAL_GPIO_Init+0x212>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a17      	ldr	r2, [pc, #92]	@ (8003824 <HAL_GPIO_Init+0x264>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <HAL_GPIO_Init+0x20e>
 80037ca:	2309      	movs	r3, #9
 80037cc:	e02d      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037ce:	230a      	movs	r3, #10
 80037d0:	e02b      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037d2:	2308      	movs	r3, #8
 80037d4:	e029      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037d6:	2307      	movs	r3, #7
 80037d8:	e027      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037da:	2306      	movs	r3, #6
 80037dc:	e025      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037de:	2305      	movs	r3, #5
 80037e0:	e023      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037e2:	2304      	movs	r3, #4
 80037e4:	e021      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037e6:	2303      	movs	r3, #3
 80037e8:	e01f      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e01d      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e01b      	b.n	800382a <HAL_GPIO_Init+0x26a>
 80037f2:	bf00      	nop
 80037f4:	58000080 	.word	0x58000080
 80037f8:	58024400 	.word	0x58024400
 80037fc:	58000400 	.word	0x58000400
 8003800:	58020000 	.word	0x58020000
 8003804:	58020400 	.word	0x58020400
 8003808:	58020800 	.word	0x58020800
 800380c:	58020c00 	.word	0x58020c00
 8003810:	58021000 	.word	0x58021000
 8003814:	58021400 	.word	0x58021400
 8003818:	58021800 	.word	0x58021800
 800381c:	58021c00 	.word	0x58021c00
 8003820:	58022000 	.word	0x58022000
 8003824:	58022400 	.word	0x58022400
 8003828:	2300      	movs	r3, #0
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	f002 0203 	and.w	r2, r2, #3
 8003830:	0092      	lsls	r2, r2, #2
 8003832:	4093      	lsls	r3, r2
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800383a:	4938      	ldr	r1, [pc, #224]	@ (800391c <HAL_GPIO_Init+0x35c>)
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	3302      	adds	r3, #2
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800386e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800389c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	3301      	adds	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	f47f ae63 	bne.w	80035d4 <HAL_GPIO_Init+0x14>
  }
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	3724      	adds	r7, #36	@ 0x24
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	58000400 	.word	0x58000400

08003920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
 800393c:	e001      	b.n	8003942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800396c:	e003      	b.n	8003976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800398c:	4a08      	ldr	r2, [pc, #32]	@ (80039b0 <HAL_HSEM_FastTake+0x2c>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3320      	adds	r3, #32
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	4a07      	ldr	r2, [pc, #28]	@ (80039b4 <HAL_HSEM_FastTake+0x30>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e000      	b.n	80039a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	58026400 	.word	0x58026400
 80039b4:	80000300 	.word	0x80000300

080039b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80039c2:	4906      	ldr	r1, [pc, #24]	@ (80039dc <HAL_HSEM_Release+0x24>)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	58026400 	.word	0x58026400

080039e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e08b      	b.n	8003b0a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd f968 	bl	8000cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	@ 0x24
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d107      	bne.n	8003a5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	e006      	b.n	8003a68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d108      	bne.n	8003a82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	e007      	b.n	8003a92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_I2C_Init+0x134>)
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ab0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69d9      	ldr	r1, [r3, #28]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1a      	ldr	r2, [r3, #32]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	02008000 	.word	0x02008000

08003b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d138      	bne.n	8003ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e032      	b.n	8003ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	@ 0x24
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d139      	bne.n	8003c38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e033      	b.n	8003c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2224      	movs	r2, #36	@ 0x24
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af02      	add	r7, sp, #8
 8003c4c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0fe      	b.n	8003e56 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff f9db 	bl	8003028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2203      	movs	r2, #3
 8003c76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f008 fb1c 	bl	800c2bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7c1a      	ldrb	r2, [r3, #16]
 8003c8c:	f88d 2000 	strb.w	r2, [sp]
 8003c90:	3304      	adds	r3, #4
 8003c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c94:	f008 faa0 	bl	800c1d8 <USB_CoreInit>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0d5      	b.n	8003e56 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f008 fb14 	bl	800c2de <USB_SetCurrentMode>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0c6      	b.n	8003e56 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e04a      	b.n	8003d64 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3315      	adds	r3, #21
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3314      	adds	r3, #20
 8003cf2:	7bfa      	ldrb	r2, [r7, #15]
 8003cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	b298      	uxth	r0, r3
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	332e      	adds	r3, #46	@ 0x2e
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3318      	adds	r3, #24
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	331c      	adds	r3, #28
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3320      	adds	r3, #32
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3324      	adds	r3, #36	@ 0x24
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	3301      	adds	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	791b      	ldrb	r3, [r3, #4]
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d3af      	bcc.n	8003cce <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
 8003d72:	e044      	b.n	8003dfe <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003db6:	7bfa      	ldrb	r2, [r7, #15]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	791b      	ldrb	r3, [r3, #4]
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d3b5      	bcc.n	8003d74 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7c1a      	ldrb	r2, [r3, #16]
 8003e10:	f88d 2000 	strb.w	r2, [sp]
 8003e14:	3304      	adds	r3, #4
 8003e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e18:	f008 faae 	bl	800c378 <USB_DevInit>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e013      	b.n	8003e56 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7b1b      	ldrb	r3, [r3, #12]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d102      	bne.n	8003e4a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f80b 	bl	8003e60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f008 fc69 	bl	800c726 <USB_DevDisconnect>

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	10000003 	.word	0x10000003

08003ea8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003eb0:	4b29      	ldr	r3, [pc, #164]	@ (8003f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d00a      	beq.n	8003ed2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ebc:	4b26      	ldr	r3, [pc, #152]	@ (8003f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d001      	beq.n	8003ece <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e040      	b.n	8003f50 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e03e      	b.n	8003f50 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ed2:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003eda:	491f      	ldr	r1, [pc, #124]	@ (8003f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003ee2:	f7ff f9bf 	bl	8003264 <HAL_GetTick>
 8003ee6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ee8:	e009      	b.n	8003efe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003eea:	f7ff f9bb 	bl	8003264 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ef8:	d901      	bls.n	8003efe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e028      	b.n	8003f50 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003efe:	4b16      	ldr	r3, [pc, #88]	@ (8003f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f0a:	d1ee      	bne.n	8003eea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b1e      	cmp	r3, #30
 8003f10:	d008      	beq.n	8003f24 <HAL_PWREx_ConfigSupply+0x7c>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f16:	d005      	beq.n	8003f24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b1d      	cmp	r3, #29
 8003f1c:	d002      	beq.n	8003f24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b2d      	cmp	r3, #45	@ 0x2d
 8003f22:	d114      	bne.n	8003f4e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003f24:	f7ff f99e 	bl	8003264 <HAL_GetTick>
 8003f28:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f2a:	e009      	b.n	8003f40 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f2c:	f7ff f99a 	bl	8003264 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f3a:	d901      	bls.n	8003f40 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f4c:	d1ee      	bne.n	8003f2c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	58024800 	.word	0x58024800

08003f5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a04      	ldr	r2, [pc, #16]	@ (8003f78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f6a:	60d3      	str	r3, [r2, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	58024800 	.word	0x58024800

08003f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08c      	sub	sp, #48	@ 0x30
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f000 bc48 	b.w	8004820 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8088 	beq.w	80040ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f9e:	4b99      	ldr	r3, [pc, #612]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fa8:	4b96      	ldr	r3, [pc, #600]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d007      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x48>
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb6:	2b18      	cmp	r3, #24
 8003fb8:	d111      	bne.n	8003fde <HAL_RCC_OscConfig+0x62>
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d10c      	bne.n	8003fde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d06d      	beq.n	80040ac <HAL_RCC_OscConfig+0x130>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d169      	bne.n	80040ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f000 bc21 	b.w	8004820 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x7a>
 8003fe8:	4b86      	ldr	r3, [pc, #536]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a85      	ldr	r2, [pc, #532]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e02e      	b.n	8004054 <HAL_RCC_OscConfig+0xd8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x9c>
 8003ffe:	4b81      	ldr	r3, [pc, #516]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a80      	ldr	r2, [pc, #512]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b7e      	ldr	r3, [pc, #504]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7d      	ldr	r2, [pc, #500]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004010:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e01d      	b.n	8004054 <HAL_RCC_OscConfig+0xd8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0xc0>
 8004022:	4b78      	ldr	r3, [pc, #480]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a77      	ldr	r2, [pc, #476]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b75      	ldr	r3, [pc, #468]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a74      	ldr	r2, [pc, #464]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0xd8>
 800403c:	4b71      	ldr	r3, [pc, #452]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a70      	ldr	r2, [pc, #448]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b6e      	ldr	r3, [pc, #440]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6d      	ldr	r2, [pc, #436]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7ff f902 	bl	8003264 <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7ff f8fe 	bl	8003264 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e3d4      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004076:	4b63      	ldr	r3, [pc, #396]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0xe8>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7ff f8ee 	bl	8003264 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7ff f8ea 	bl	8003264 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	@ 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e3c0      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800409e:	4b59      	ldr	r3, [pc, #356]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x110>
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80ca 	beq.w	8004250 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040bc:	4b51      	ldr	r3, [pc, #324]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_RCC_OscConfig+0x166>
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	2b18      	cmp	r3, #24
 80040d6:	d156      	bne.n	8004186 <HAL_RCC_OscConfig+0x20a>
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d151      	bne.n	8004186 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e2:	4b48      	ldr	r3, [pc, #288]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_RCC_OscConfig+0x17e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e392      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040fa:	4b42      	ldr	r3, [pc, #264]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 0219 	bic.w	r2, r3, #25
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	493f      	ldr	r1, [pc, #252]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7ff f8aa 	bl	8003264 <HAL_GetTick>
 8004110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004114:	f7ff f8a6 	bl	8003264 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e37c      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004126:	4b37      	ldr	r3, [pc, #220]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	f7ff f8c7 	bl	80032c4 <HAL_GetREVID>
 8004136:	4603      	mov	r3, r0
 8004138:	f241 0203 	movw	r2, #4099	@ 0x1003
 800413c:	4293      	cmp	r3, r2
 800413e:	d817      	bhi.n	8004170 <HAL_RCC_OscConfig+0x1f4>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b40      	cmp	r3, #64	@ 0x40
 8004146:	d108      	bne.n	800415a <HAL_RCC_OscConfig+0x1de>
 8004148:	4b2e      	ldr	r3, [pc, #184]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004150:	4a2c      	ldr	r2, [pc, #176]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004156:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004158:	e07a      	b.n	8004250 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415a:	4b2a      	ldr	r3, [pc, #168]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	031b      	lsls	r3, r3, #12
 8004168:	4926      	ldr	r1, [pc, #152]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 800416a:	4313      	orrs	r3, r2
 800416c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416e:	e06f      	b.n	8004250 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b24      	ldr	r3, [pc, #144]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	4921      	ldr	r1, [pc, #132]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004184:	e064      	b.n	8004250 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d047      	beq.n	800421e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800418e:	4b1d      	ldr	r3, [pc, #116]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 0219 	bic.w	r2, r3, #25
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	491a      	ldr	r1, [pc, #104]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7ff f860 	bl	8003264 <HAL_GetTick>
 80041a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a8:	f7ff f85c 	bl	8003264 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e332      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ba:	4b12      	ldr	r3, [pc, #72]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c6:	f7ff f87d 	bl	80032c4 <HAL_GetREVID>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d819      	bhi.n	8004208 <HAL_RCC_OscConfig+0x28c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b40      	cmp	r3, #64	@ 0x40
 80041da:	d108      	bne.n	80041ee <HAL_RCC_OscConfig+0x272>
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80041e4:	4a07      	ldr	r2, [pc, #28]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80041e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ea:	6053      	str	r3, [r2, #4]
 80041ec:	e030      	b.n	8004250 <HAL_RCC_OscConfig+0x2d4>
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	031b      	lsls	r3, r3, #12
 80041fc:	4901      	ldr	r1, [pc, #4]	@ (8004204 <HAL_RCC_OscConfig+0x288>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
 8004202:	e025      	b.n	8004250 <HAL_RCC_OscConfig+0x2d4>
 8004204:	58024400 	.word	0x58024400
 8004208:	4b9a      	ldr	r3, [pc, #616]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	061b      	lsls	r3, r3, #24
 8004216:	4997      	ldr	r1, [pc, #604]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
 800421c:	e018      	b.n	8004250 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421e:	4b95      	ldr	r3, [pc, #596]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a94      	ldr	r2, [pc, #592]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7ff f81b 	bl	8003264 <HAL_GetTick>
 800422e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004232:	f7ff f817 	bl	8003264 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e2ed      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004244:	4b8b      	ldr	r3, [pc, #556]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f0      	bne.n	8004232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80a9 	beq.w	80043b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425e:	4b85      	ldr	r3, [pc, #532]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004266:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004268:	4b82      	ldr	r3, [pc, #520]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 800426a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d007      	beq.n	8004284 <HAL_RCC_OscConfig+0x308>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b18      	cmp	r3, #24
 8004278:	d13a      	bne.n	80042f0 <HAL_RCC_OscConfig+0x374>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d135      	bne.n	80042f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004284:	4b7b      	ldr	r3, [pc, #492]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_OscConfig+0x320>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2b80      	cmp	r3, #128	@ 0x80
 8004296:	d001      	beq.n	800429c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e2c1      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800429c:	f7ff f812 	bl	80032c4 <HAL_GetREVID>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d817      	bhi.n	80042da <HAL_RCC_OscConfig+0x35e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d108      	bne.n	80042c4 <HAL_RCC_OscConfig+0x348>
 80042b2:	4b70      	ldr	r3, [pc, #448]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80042ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80042bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042c2:	e075      	b.n	80043b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	069b      	lsls	r3, r3, #26
 80042d2:	4968      	ldr	r1, [pc, #416]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042d8:	e06a      	b.n	80043b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042da:	4b66      	ldr	r3, [pc, #408]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	4962      	ldr	r1, [pc, #392]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042ee:	e05f      	b.n	80043b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d042      	beq.n	800437e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80042fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fe ffae 	bl	8003264 <HAL_GetTick>
 8004308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800430c:	f7fe ffaa 	bl	8003264 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e280      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800431e:	4b55      	ldr	r3, [pc, #340]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800432a:	f7fe ffcb 	bl	80032c4 <HAL_GetREVID>
 800432e:	4603      	mov	r3, r0
 8004330:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004334:	4293      	cmp	r3, r2
 8004336:	d817      	bhi.n	8004368 <HAL_RCC_OscConfig+0x3ec>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	2b20      	cmp	r3, #32
 800433e:	d108      	bne.n	8004352 <HAL_RCC_OscConfig+0x3d6>
 8004340:	4b4c      	ldr	r3, [pc, #304]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004348:	4a4a      	ldr	r2, [pc, #296]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 800434a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800434e:	6053      	str	r3, [r2, #4]
 8004350:	e02e      	b.n	80043b0 <HAL_RCC_OscConfig+0x434>
 8004352:	4b48      	ldr	r3, [pc, #288]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	069b      	lsls	r3, r3, #26
 8004360:	4944      	ldr	r1, [pc, #272]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
 8004366:	e023      	b.n	80043b0 <HAL_RCC_OscConfig+0x434>
 8004368:	4b42      	ldr	r3, [pc, #264]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	493f      	ldr	r1, [pc, #252]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004378:	4313      	orrs	r3, r2
 800437a:	60cb      	str	r3, [r1, #12]
 800437c:	e018      	b.n	80043b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800437e:	4b3d      	ldr	r3, [pc, #244]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a3c      	ldr	r2, [pc, #240]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438a:	f7fe ff6b 	bl	8003264 <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004392:	f7fe ff67 	bl	8003264 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e23d      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043a4:	4b33      	ldr	r3, [pc, #204]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f0      	bne.n	8004392 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d036      	beq.n	800442a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d019      	beq.n	80043f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80043c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fe ff48 	bl	8003264 <HAL_GetTick>
 80043d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d8:	f7fe ff44 	bl	8003264 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e21a      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043ea:	4b22      	ldr	r3, [pc, #136]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80043ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x45c>
 80043f6:	e018      	b.n	800442a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80043fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fe ff2e 	bl	8003264 <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440c:	f7fe ff2a 	bl	8003264 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e200      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800441e:	4b15      	ldr	r3, [pc, #84]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d039      	beq.n	80044aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01c      	beq.n	8004478 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800443e:	4b0d      	ldr	r3, [pc, #52]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a0c      	ldr	r2, [pc, #48]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004444:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004448:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800444a:	f7fe ff0b 	bl	8003264 <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004452:	f7fe ff07 	bl	8003264 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e1dd      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004464:	4b03      	ldr	r3, [pc, #12]	@ (8004474 <HAL_RCC_OscConfig+0x4f8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x4d6>
 8004470:	e01b      	b.n	80044aa <HAL_RCC_OscConfig+0x52e>
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004478:	4b9b      	ldr	r3, [pc, #620]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a9a      	ldr	r2, [pc, #616]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800447e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004482:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004484:	f7fe feee 	bl	8003264 <HAL_GetTick>
 8004488:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800448c:	f7fe feea 	bl	8003264 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e1c0      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800449e:	4b92      	ldr	r3, [pc, #584]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8081 	beq.w	80045ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044b8:	4b8c      	ldr	r3, [pc, #560]	@ (80046ec <HAL_RCC_OscConfig+0x770>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a8b      	ldr	r2, [pc, #556]	@ (80046ec <HAL_RCC_OscConfig+0x770>)
 80044be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c4:	f7fe fece 	bl	8003264 <HAL_GetTick>
 80044c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044cc:	f7fe feca 	bl	8003264 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	@ 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1a0      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044de:	4b83      	ldr	r3, [pc, #524]	@ (80046ec <HAL_RCC_OscConfig+0x770>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d106      	bne.n	8004500 <HAL_RCC_OscConfig+0x584>
 80044f2:	4b7d      	ldr	r3, [pc, #500]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f6:	4a7c      	ldr	r2, [pc, #496]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80044fe:	e02d      	b.n	800455c <HAL_RCC_OscConfig+0x5e0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10c      	bne.n	8004522 <HAL_RCC_OscConfig+0x5a6>
 8004508:	4b77      	ldr	r3, [pc, #476]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450c:	4a76      	ldr	r2, [pc, #472]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	6713      	str	r3, [r2, #112]	@ 0x70
 8004514:	4b74      	ldr	r3, [pc, #464]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004518:	4a73      	ldr	r2, [pc, #460]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800451a:	f023 0304 	bic.w	r3, r3, #4
 800451e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004520:	e01c      	b.n	800455c <HAL_RCC_OscConfig+0x5e0>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b05      	cmp	r3, #5
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0x5c8>
 800452a:	4b6f      	ldr	r3, [pc, #444]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452e:	4a6e      	ldr	r2, [pc, #440]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	6713      	str	r3, [r2, #112]	@ 0x70
 8004536:	4b6c      	ldr	r3, [pc, #432]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	4a6b      	ldr	r2, [pc, #428]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6713      	str	r3, [r2, #112]	@ 0x70
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0x5e0>
 8004544:	4b68      	ldr	r3, [pc, #416]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004548:	4a67      	ldr	r2, [pc, #412]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004550:	4b65      	ldr	r3, [pc, #404]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004554:	4a64      	ldr	r2, [pc, #400]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004556:	f023 0304 	bic.w	r3, r3, #4
 800455a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d015      	beq.n	8004590 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fe fe7e 	bl	8003264 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fe fe7a 	bl	8003264 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e14e      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004582:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ee      	beq.n	800456c <HAL_RCC_OscConfig+0x5f0>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fe fe68 	bl	8003264 <HAL_GetTick>
 8004594:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fe fe64 	bl	8003264 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e138      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045ae:	4b4e      	ldr	r3, [pc, #312]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ee      	bne.n	8004598 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 812d 	beq.w	800481e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80045c4:	4b48      	ldr	r3, [pc, #288]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045cc:	2b18      	cmp	r3, #24
 80045ce:	f000 80bd 	beq.w	800474c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	f040 809e 	bne.w	8004718 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b42      	ldr	r3, [pc, #264]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a41      	ldr	r2, [pc, #260]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fe fe3c 	bl	8003264 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fe fe38 	bl	8003264 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e10e      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004602:	4b39      	ldr	r3, [pc, #228]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460e:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004612:	4b37      	ldr	r3, [pc, #220]	@ (80046f0 <HAL_RCC_OscConfig+0x774>)
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800461e:	0112      	lsls	r2, r2, #4
 8004620:	430a      	orrs	r2, r1
 8004622:	4931      	ldr	r1, [pc, #196]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	628b      	str	r3, [r1, #40]	@ 0x28
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	3b01      	subs	r3, #1
 800462e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004636:	3b01      	subs	r3, #1
 8004638:	025b      	lsls	r3, r3, #9
 800463a:	b29b      	uxth	r3, r3
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	3b01      	subs	r3, #1
 8004644:	041b      	lsls	r3, r3, #16
 8004646:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	3b01      	subs	r3, #1
 8004652:	061b      	lsls	r3, r3, #24
 8004654:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004658:	4923      	ldr	r1, [pc, #140]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800465a:	4313      	orrs	r3, r2
 800465c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800465e:	4b22      	ldr	r3, [pc, #136]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	4a21      	ldr	r2, [pc, #132]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800466a:	4b1f      	ldr	r3, [pc, #124]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800466c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800466e:	4b21      	ldr	r3, [pc, #132]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004670:	4013      	ands	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004676:	00d2      	lsls	r2, r2, #3
 8004678:	491b      	ldr	r1, [pc, #108]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800467a:	4313      	orrs	r3, r2
 800467c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800467e:	4b1a      	ldr	r3, [pc, #104]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	f023 020c 	bic.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	4917      	ldr	r1, [pc, #92]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004690:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	f023 0202 	bic.w	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469c:	4912      	ldr	r1, [pc, #72]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046a2:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	4a10      	ldr	r2, [pc, #64]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ae:	4b0e      	ldr	r3, [pc, #56]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	4a0d      	ldr	r2, [pc, #52]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80046ba:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	4a0a      	ldr	r2, [pc, #40]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80046c6:	4b08      	ldr	r3, [pc, #32]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ca:	4a07      	ldr	r2, [pc, #28]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d2:	4b05      	ldr	r3, [pc, #20]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <HAL_RCC_OscConfig+0x76c>)
 80046d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fe fdc1 	bl	8003264 <HAL_GetTick>
 80046e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046e4:	e011      	b.n	800470a <HAL_RCC_OscConfig+0x78e>
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400
 80046ec:	58024800 	.word	0x58024800
 80046f0:	fffffc0c 	.word	0xfffffc0c
 80046f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe fdb4 	bl	8003264 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e08a      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800470a:	4b47      	ldr	r3, [pc, #284]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x77c>
 8004716:	e082      	b.n	800481e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004718:	4b43      	ldr	r3, [pc, #268]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a42      	ldr	r2, [pc, #264]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 800471e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fe fd9e 	bl	8003264 <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fe fd9a 	bl	8003264 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e070      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800473e:	4b3a      	ldr	r3, [pc, #232]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x7b0>
 800474a:	e068      	b.n	800481e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800474c:	4b36      	ldr	r3, [pc, #216]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 800474e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004750:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004752:	4b35      	ldr	r3, [pc, #212]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004756:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	2b01      	cmp	r3, #1
 800475e:	d031      	beq.n	80047c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f003 0203 	and.w	r2, r3, #3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d12a      	bne.n	80047c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d122      	bne.n	80047c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004788:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d11a      	bne.n	80047c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	0a5b      	lsrs	r3, r3, #9
 8004792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d111      	bne.n	80047c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d108      	bne.n	80047c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	0e1b      	lsrs	r3, r3, #24
 80047b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e02b      	b.n	8004820 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80047c8:	4b17      	ldr	r3, [pc, #92]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	08db      	lsrs	r3, r3, #3
 80047ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d01f      	beq.n	800481e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80047de:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	4a11      	ldr	r2, [pc, #68]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047ea:	f7fe fd3b 	bl	8003264 <HAL_GetTick>
 80047ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80047f0:	bf00      	nop
 80047f2:	f7fe fd37 	bl	8003264 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d0f9      	beq.n	80047f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 8004800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004802:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <HAL_RCC_OscConfig+0x8b0>)
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800480a:	00d2      	lsls	r2, r2, #3
 800480c:	4906      	ldr	r1, [pc, #24]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 800480e:	4313      	orrs	r3, r2
 8004810:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004812:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	4a04      	ldr	r2, [pc, #16]	@ (8004828 <HAL_RCC_OscConfig+0x8ac>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3730      	adds	r7, #48	@ 0x30
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	58024400 	.word	0x58024400
 800482c:	ffff0007 	.word	0xffff0007

08004830 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e19c      	b.n	8004b7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004844:	4b8a      	ldr	r3, [pc, #552]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d910      	bls.n	8004874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b87      	ldr	r3, [pc, #540]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 020f 	bic.w	r2, r3, #15
 800485a:	4985      	ldr	r1, [pc, #532]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b83      	ldr	r3, [pc, #524]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e184      	b.n	8004b7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d010      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	4b7b      	ldr	r3, [pc, #492]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800488c:	429a      	cmp	r2, r3
 800488e:	d908      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004890:	4b78      	ldr	r3, [pc, #480]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	4975      	ldr	r1, [pc, #468]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d010      	beq.n	80048d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	4b70      	ldr	r3, [pc, #448]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d908      	bls.n	80048d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048be:	4b6d      	ldr	r3, [pc, #436]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	496a      	ldr	r1, [pc, #424]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	4b64      	ldr	r3, [pc, #400]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d908      	bls.n	80048fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048ec:	4b61      	ldr	r3, [pc, #388]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	495e      	ldr	r1, [pc, #376]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	4b59      	ldr	r3, [pc, #356]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004916:	429a      	cmp	r2, r3
 8004918:	d908      	bls.n	800492c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800491a:	4b56      	ldr	r3, [pc, #344]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4953      	ldr	r1, [pc, #332]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004928:	4313      	orrs	r3, r2
 800492a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	429a      	cmp	r2, r3
 8004946:	d908      	bls.n	800495a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b4a      	ldr	r3, [pc, #296]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f023 020f 	bic.w	r2, r3, #15
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4947      	ldr	r1, [pc, #284]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004956:	4313      	orrs	r3, r2
 8004958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d055      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004966:	4b43      	ldr	r3, [pc, #268]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4940      	ldr	r1, [pc, #256]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004974:	4313      	orrs	r3, r2
 8004976:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d107      	bne.n	8004990 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004980:	4b3c      	ldr	r3, [pc, #240]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d121      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0f6      	b.n	8004b7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d107      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004998:	4b36      	ldr	r3, [pc, #216]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d115      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0ea      	b.n	8004b7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049b0:	4b30      	ldr	r3, [pc, #192]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0de      	b.n	8004b7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0d6      	b.n	8004b7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049d0:	4b28      	ldr	r3, [pc, #160]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f023 0207 	bic.w	r2, r3, #7
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4925      	ldr	r1, [pc, #148]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e2:	f7fe fc3f 	bl	8003264 <HAL_GetTick>
 80049e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e8:	e00a      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ea:	f7fe fc3b 	bl	8003264 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e0be      	b.n	8004b7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a00:	4b1c      	ldr	r3, [pc, #112]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d1eb      	bne.n	80049ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d010      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d208      	bcs.n	8004a40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a2e:	4b11      	ldr	r3, [pc, #68]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f023 020f 	bic.w	r2, r3, #15
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	490e      	ldr	r1, [pc, #56]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a40:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d214      	bcs.n	8004a78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b08      	ldr	r3, [pc, #32]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 020f 	bic.w	r2, r3, #15
 8004a56:	4906      	ldr	r1, [pc, #24]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e086      	b.n	8004b7e <HAL_RCC_ClockConfig+0x34e>
 8004a70:	52002000 	.word	0x52002000
 8004a74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d010      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	4b3f      	ldr	r3, [pc, #252]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d208      	bcs.n	8004aa6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a94:	4b3c      	ldr	r3, [pc, #240]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	4939      	ldr	r1, [pc, #228]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	4b34      	ldr	r3, [pc, #208]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d208      	bcs.n	8004ad4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ac2:	4b31      	ldr	r3, [pc, #196]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	492e      	ldr	r1, [pc, #184]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699a      	ldr	r2, [r3, #24]
 8004ae4:	4b28      	ldr	r3, [pc, #160]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d208      	bcs.n	8004b02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004af0:	4b25      	ldr	r3, [pc, #148]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	4922      	ldr	r1, [pc, #136]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d010      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	4b1d      	ldr	r3, [pc, #116]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d208      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	4917      	ldr	r1, [pc, #92]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b30:	f000 f834 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b14      	ldr	r3, [pc, #80]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	4912      	ldr	r1, [pc, #72]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <HAL_RCC_ClockConfig+0x358>)
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	4a0d      	ldr	r2, [pc, #52]	@ (8004b8c <HAL_RCC_ClockConfig+0x35c>)
 8004b58:	5cd3      	ldrb	r3, [r2, r3]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
 8004b64:	4a0a      	ldr	r2, [pc, #40]	@ (8004b90 <HAL_RCC_ClockConfig+0x360>)
 8004b66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b68:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <HAL_RCC_ClockConfig+0x364>)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <HAL_RCC_ClockConfig+0x368>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fb2c 	bl	80031d0 <HAL_InitTick>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	0800f3d0 	.word	0x0800f3d0
 8004b90:	24000004 	.word	0x24000004
 8004b94:	24000000 	.word	0x24000000
 8004b98:	24000008 	.word	0x24000008

08004b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b089      	sub	sp, #36	@ 0x24
 8004ba0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba2:	4bb3      	ldr	r3, [pc, #716]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004baa:	2b18      	cmp	r3, #24
 8004bac:	f200 8155 	bhi.w	8004e5a <HAL_RCC_GetSysClockFreq+0x2be>
 8004bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004c1d 	.word	0x08004c1d
 8004bbc:	08004e5b 	.word	0x08004e5b
 8004bc0:	08004e5b 	.word	0x08004e5b
 8004bc4:	08004e5b 	.word	0x08004e5b
 8004bc8:	08004e5b 	.word	0x08004e5b
 8004bcc:	08004e5b 	.word	0x08004e5b
 8004bd0:	08004e5b 	.word	0x08004e5b
 8004bd4:	08004e5b 	.word	0x08004e5b
 8004bd8:	08004c43 	.word	0x08004c43
 8004bdc:	08004e5b 	.word	0x08004e5b
 8004be0:	08004e5b 	.word	0x08004e5b
 8004be4:	08004e5b 	.word	0x08004e5b
 8004be8:	08004e5b 	.word	0x08004e5b
 8004bec:	08004e5b 	.word	0x08004e5b
 8004bf0:	08004e5b 	.word	0x08004e5b
 8004bf4:	08004e5b 	.word	0x08004e5b
 8004bf8:	08004c49 	.word	0x08004c49
 8004bfc:	08004e5b 	.word	0x08004e5b
 8004c00:	08004e5b 	.word	0x08004e5b
 8004c04:	08004e5b 	.word	0x08004e5b
 8004c08:	08004e5b 	.word	0x08004e5b
 8004c0c:	08004e5b 	.word	0x08004e5b
 8004c10:	08004e5b 	.word	0x08004e5b
 8004c14:	08004e5b 	.word	0x08004e5b
 8004c18:	08004c4f 	.word	0x08004c4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c1c:	4b94      	ldr	r3, [pc, #592]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c28:	4b91      	ldr	r3, [pc, #580]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	08db      	lsrs	r3, r3, #3
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	4a90      	ldr	r2, [pc, #576]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
 8004c38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004c3a:	e111      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c3c:	4b8d      	ldr	r3, [pc, #564]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c3e:	61bb      	str	r3, [r7, #24]
      break;
 8004c40:	e10e      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004c42:	4b8d      	ldr	r3, [pc, #564]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c44:	61bb      	str	r3, [r7, #24]
      break;
 8004c46:	e10b      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004c48:	4b8c      	ldr	r3, [pc, #560]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004c4a:	61bb      	str	r3, [r7, #24]
      break;
 8004c4c:	e108      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c4e:	4b88      	ldr	r3, [pc, #544]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004c58:	4b85      	ldr	r3, [pc, #532]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c64:	4b82      	ldr	r3, [pc, #520]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c6e:	4b80      	ldr	r3, [pc, #512]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c72:	08db      	lsrs	r3, r3, #3
 8004c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80e1 	beq.w	8004e54 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	f000 8083 	beq.w	8004da0 <HAL_RCC_GetSysClockFreq+0x204>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	f200 80a1 	bhi.w	8004de4 <HAL_RCC_GetSysClockFreq+0x248>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x114>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d056      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004cae:	e099      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d02d      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	08db      	lsrs	r3, r3, #3
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	4a6b      	ldr	r2, [pc, #428]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ccc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce6:	4b62      	ldr	r3, [pc, #392]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cfa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d16:	e087      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004e84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2a:	4b51      	ldr	r3, [pc, #324]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d5a:	e065      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6e:	4b40      	ldr	r3, [pc, #256]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d9e:	e043      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004daa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004e8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db2:	4b2f      	ldr	r3, [pc, #188]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004de2:	e021      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004e28:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2c:	0a5b      	lsrs	r3, r3, #9
 8004e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e32:	3301      	adds	r3, #1
 8004e34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	ee07 3a90 	vmov	s15, r3
 8004e3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e4c:	ee17 3a90 	vmov	r3, s15
 8004e50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004e52:	e005      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61bb      	str	r3, [r7, #24]
      break;
 8004e58:	e002      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004e5a:	4b07      	ldr	r3, [pc, #28]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e5c:	61bb      	str	r3, [r7, #24]
      break;
 8004e5e:	bf00      	nop
  }

  return sysclockfreq;
 8004e60:	69bb      	ldr	r3, [r7, #24]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3724      	adds	r7, #36	@ 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	03d09000 	.word	0x03d09000
 8004e78:	003d0900 	.word	0x003d0900
 8004e7c:	00f42400 	.word	0x00f42400
 8004e80:	46000000 	.word	0x46000000
 8004e84:	4c742400 	.word	0x4c742400
 8004e88:	4a742400 	.word	0x4a742400
 8004e8c:	4b742400 	.word	0x4b742400

08004e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e96:	f7ff fe81 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	490f      	ldr	r1, [pc, #60]	@ (8004ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ea8:	5ccb      	ldrb	r3, [r1, r3]
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	4a09      	ldr	r2, [pc, #36]	@ (8004ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ebe:	5cd3      	ldrb	r3, [r2, r3]
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	4a07      	ldr	r2, [pc, #28]	@ (8004ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ecc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ece:	4a07      	ldr	r2, [pc, #28]	@ (8004eec <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ed4:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	0800f3d0 	.word	0x0800f3d0
 8004ee8:	24000004 	.word	0x24000004
 8004eec:	24000000 	.word	0x24000000

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ef4:	f7ff ffcc 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b06      	ldr	r3, [pc, #24]	@ (8004f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	091b      	lsrs	r3, r3, #4
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4904      	ldr	r1, [pc, #16]	@ (8004f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	58024400 	.word	0x58024400
 8004f18:	0800f3d0 	.word	0x0800f3d0

08004f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f20:	f7ff ffb6 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4904      	ldr	r1, [pc, #16]	@ (8004f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	58024400 	.word	0x58024400
 8004f44:	0800f3d0 	.word	0x0800f3d0

08004f48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f4c:	b0cc      	sub	sp, #304	@ 0x130
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	ea54 0305 	orrs.w	r3, r4, r5
 8004f72:	d049      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f7e:	d02f      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004f80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f84:	d828      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f8a:	d01a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f90:	d822      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f9a:	d007      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f9c:	e01c      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f9e:	4bb8      	ldr	r3, [pc, #736]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	4ab7      	ldr	r2, [pc, #732]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004faa:	e01a      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	2102      	movs	r1, #2
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f002 fba1 	bl	80076fc <RCCEx_PLL2_Config>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004fc0:	e00f      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fc6:	3328      	adds	r3, #40	@ 0x28
 8004fc8:	2102      	movs	r1, #2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f002 fc48 	bl	8007860 <RCCEx_PLL3_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004fd6:	e004      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004fde:	e000      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004fea:	4ba5      	ldr	r3, [pc, #660]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ff8:	4aa1      	ldr	r2, [pc, #644]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ffe:	e003      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005004:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005014:	f04f 0900 	mov.w	r9, #0
 8005018:	ea58 0309 	orrs.w	r3, r8, r9
 800501c:	d047      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800501e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005024:	2b04      	cmp	r3, #4
 8005026:	d82a      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005028:	a201      	add	r2, pc, #4	@ (adr r2, 8005030 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005045 	.word	0x08005045
 8005034:	08005053 	.word	0x08005053
 8005038:	08005069 	.word	0x08005069
 800503c:	08005087 	.word	0x08005087
 8005040:	08005087 	.word	0x08005087
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005044:	4b8e      	ldr	r3, [pc, #568]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	4a8d      	ldr	r2, [pc, #564]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800504a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800504e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005050:	e01a      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005056:	3308      	adds	r3, #8
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f002 fb4e 	bl	80076fc <RCCEx_PLL2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005066:	e00f      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800506c:	3328      	adds	r3, #40	@ 0x28
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f002 fbf5 	bl	8007860 <RCCEx_PLL3_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800507c:	e004      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005088:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005090:	4b7b      	ldr	r3, [pc, #492]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005094:	f023 0107 	bic.w	r1, r3, #7
 8005098:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800509c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509e:	4a78      	ldr	r2, [pc, #480]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80050a4:	e003      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80050ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80050ba:	f04f 0b00 	mov.w	fp, #0
 80050be:	ea5a 030b 	orrs.w	r3, sl, fp
 80050c2:	d04c      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80050c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ce:	d030      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80050d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d4:	d829      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050d8:	d02d      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80050da:	2bc0      	cmp	r3, #192	@ 0xc0
 80050dc:	d825      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050de:	2b80      	cmp	r3, #128	@ 0x80
 80050e0:	d018      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80050e2:	2b80      	cmp	r3, #128	@ 0x80
 80050e4:	d821      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80050ea:	2b40      	cmp	r3, #64	@ 0x40
 80050ec:	d007      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80050ee:	e01c      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f0:	4b63      	ldr	r3, [pc, #396]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	4a62      	ldr	r2, [pc, #392]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80050fc:	e01c      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005102:	3308      	adds	r3, #8
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f002 faf8 	bl	80076fc <RCCEx_PLL2_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005112:	e011      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005118:	3328      	adds	r3, #40	@ 0x28
 800511a:	2100      	movs	r1, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f002 fb9f 	bl	8007860 <RCCEx_PLL3_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005128:	e006      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005130:	e002      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005138:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005140:	4b4f      	ldr	r3, [pc, #316]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005144:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800514c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514e:	4a4c      	ldr	r2, [pc, #304]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005150:	430b      	orrs	r3, r1
 8005152:	6513      	str	r3, [r2, #80]	@ 0x50
 8005154:	e003      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005156:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800515a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800515e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800516a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800516e:	2300      	movs	r3, #0
 8005170:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005174:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005178:	460b      	mov	r3, r1
 800517a:	4313      	orrs	r3, r2
 800517c:	d053      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800517e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005182:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005186:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800518a:	d035      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800518c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005190:	d82e      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005192:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005196:	d031      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005198:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800519c:	d828      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800519e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051a2:	d01a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80051a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051a8:	d822      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80051ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051b2:	d007      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80051b4:	e01c      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b6:	4b32      	ldr	r3, [pc, #200]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	4a31      	ldr	r2, [pc, #196]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051c2:	e01c      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c8:	3308      	adds	r3, #8
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f002 fa95 	bl	80076fc <RCCEx_PLL2_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80051d8:	e011      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051de:	3328      	adds	r3, #40	@ 0x28
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f002 fb3c 	bl	8007860 <RCCEx_PLL3_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051ee:	e006      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80051f6:	e002      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80051f8:	bf00      	nop
 80051fa:	e000      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80051fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005206:	4b1e      	ldr	r3, [pc, #120]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800520e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005212:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005216:	4a1a      	ldr	r2, [pc, #104]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005218:	430b      	orrs	r3, r1
 800521a:	6593      	str	r3, [r2, #88]	@ 0x58
 800521c:	e003      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005222:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005232:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005236:	2300      	movs	r3, #0
 8005238:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800523c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005240:	460b      	mov	r3, r1
 8005242:	4313      	orrs	r3, r2
 8005244:	d056      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800524a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800524e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005252:	d038      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005254:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005258:	d831      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800525a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800525e:	d034      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005260:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005264:	d82b      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800526a:	d01d      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800526c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005270:	d825      	bhi.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d006      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005276:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800527c:	e01f      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800527e:	bf00      	nop
 8005280:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005284:	4ba2      	ldr	r3, [pc, #648]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	4aa1      	ldr	r2, [pc, #644]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800528a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800528e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005290:	e01c      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005292:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005296:	3308      	adds	r3, #8
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f002 fa2e 	bl	80076fc <RCCEx_PLL2_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052a6:	e011      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ac:	3328      	adds	r3, #40	@ 0x28
 80052ae:	2100      	movs	r1, #0
 80052b0:	4618      	mov	r0, r3
 80052b2:	f002 fad5 	bl	8007860 <RCCEx_PLL3_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052bc:	e006      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052c4:	e002      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80052ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10b      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80052d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80052dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052e4:	4a8a      	ldr	r2, [pc, #552]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052e6:	430b      	orrs	r3, r1
 80052e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ea:	e003      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005300:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005304:	2300      	movs	r3, #0
 8005306:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800530a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800530e:	460b      	mov	r3, r1
 8005310:	4313      	orrs	r3, r2
 8005312:	d03a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531a:	2b30      	cmp	r3, #48	@ 0x30
 800531c:	d01f      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800531e:	2b30      	cmp	r3, #48	@ 0x30
 8005320:	d819      	bhi.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005322:	2b20      	cmp	r3, #32
 8005324:	d00c      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005326:	2b20      	cmp	r3, #32
 8005328:	d815      	bhi.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d019      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800532e:	2b10      	cmp	r3, #16
 8005330:	d111      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005332:	4b77      	ldr	r3, [pc, #476]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	4a76      	ldr	r2, [pc, #472]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800533c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800533e:	e011      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005344:	3308      	adds	r3, #8
 8005346:	2102      	movs	r1, #2
 8005348:	4618      	mov	r0, r3
 800534a:	f002 f9d7 	bl	80076fc <RCCEx_PLL2_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005354:	e006      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800535c:	e002      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800535e:	bf00      	nop
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005364:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800536c:	4b68      	ldr	r3, [pc, #416]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800536e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005370:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537a:	4a65      	ldr	r2, [pc, #404]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800537c:	430b      	orrs	r3, r1
 800537e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005380:	e003      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005382:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005386:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800538a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005396:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800539a:	2300      	movs	r3, #0
 800539c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80053a0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80053a4:	460b      	mov	r3, r1
 80053a6:	4313      	orrs	r3, r2
 80053a8:	d051      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80053aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053b4:	d035      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80053b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ba:	d82e      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80053bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053c0:	d031      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80053c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053c6:	d828      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053cc:	d01a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80053ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053d2:	d822      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053dc:	d007      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80053de:	e01c      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053ec:	e01c      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053f2:	3308      	adds	r3, #8
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f002 f980 	bl	80076fc <RCCEx_PLL2_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005402:	e011      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005408:	3328      	adds	r3, #40	@ 0x28
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f002 fa27 	bl	8007860 <RCCEx_PLL3_Config>
 8005412:	4603      	mov	r3, r0
 8005414:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005428:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005430:	4b37      	ldr	r3, [pc, #220]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005434:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005438:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800543c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800543e:	4a34      	ldr	r2, [pc, #208]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005440:	430b      	orrs	r3, r1
 8005442:	6513      	str	r3, [r2, #80]	@ 0x50
 8005444:	e003      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005446:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800544a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800544e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800545a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800545e:	2300      	movs	r3, #0
 8005460:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005464:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005468:	460b      	mov	r3, r1
 800546a:	4313      	orrs	r3, r2
 800546c:	d056      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800546e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005478:	d033      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800547a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800547e:	d82c      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005480:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005484:	d02f      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800548a:	d826      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800548c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005490:	d02b      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005492:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005496:	d820      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800549c:	d012      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800549e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054a2:	d81a      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d022      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ac:	d115      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054b2:	3308      	adds	r3, #8
 80054b4:	2101      	movs	r1, #1
 80054b6:	4618      	mov	r0, r3
 80054b8:	f002 f920 	bl	80076fc <RCCEx_PLL2_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054c2:	e015      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054c8:	3328      	adds	r3, #40	@ 0x28
 80054ca:	2101      	movs	r1, #1
 80054cc:	4618      	mov	r0, r3
 80054ce:	f002 f9c7 	bl	8007860 <RCCEx_PLL3_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054d8:	e00a      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054e2:	bf00      	nop
 80054e4:	e004      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054e6:	bf00      	nop
 80054e8:	e002      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80054ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10d      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005500:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005506:	4a02      	ldr	r2, [pc, #8]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005508:	430b      	orrs	r3, r1
 800550a:	6513      	str	r3, [r2, #80]	@ 0x50
 800550c:	e006      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800550e:	bf00      	nop
 8005510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005518:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800551c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005528:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800552c:	2300      	movs	r3, #0
 800552e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005532:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005536:	460b      	mov	r3, r1
 8005538:	4313      	orrs	r3, r2
 800553a:	d055      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800553c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005540:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005544:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005548:	d033      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800554a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800554e:	d82c      	bhi.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005554:	d02f      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800555a:	d826      	bhi.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800555c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005560:	d02b      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005562:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005566:	d820      	bhi.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800556c:	d012      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800556e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005572:	d81a      	bhi.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d022      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800557c:	d115      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800557e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005582:	3308      	adds	r3, #8
 8005584:	2101      	movs	r1, #1
 8005586:	4618      	mov	r0, r3
 8005588:	f002 f8b8 	bl	80076fc <RCCEx_PLL2_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005592:	e015      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005598:	3328      	adds	r3, #40	@ 0x28
 800559a:	2101      	movs	r1, #1
 800559c:	4618      	mov	r0, r3
 800559e:	f002 f95f 	bl	8007860 <RCCEx_PLL3_Config>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80055a8:	e00a      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055b0:	e006      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055b2:	bf00      	nop
 80055b4:	e004      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055b6:	bf00      	nop
 80055b8:	e002      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80055be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10b      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80055c8:	4bb6      	ldr	r3, [pc, #728]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80055d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055d8:	4ab2      	ldr	r2, [pc, #712]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055da:	430b      	orrs	r3, r1
 80055dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80055e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80055f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055f8:	2300      	movs	r3, #0
 80055fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005602:	460b      	mov	r3, r1
 8005604:	4313      	orrs	r3, r2
 8005606:	d02a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800560c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	d011      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005616:	d10a      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800561c:	3308      	adds	r3, #8
 800561e:	2101      	movs	r1, #1
 8005620:	4618      	mov	r0, r3
 8005622:	f002 f86b 	bl	80076fc <RCCEx_PLL2_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800562c:	e004      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005634:	e000      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005638:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005640:	4b98      	ldr	r3, [pc, #608]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005644:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800564c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800564e:	4a95      	ldr	r2, [pc, #596]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005650:	430b      	orrs	r3, r1
 8005652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800565a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800565e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800566a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800566e:	2300      	movs	r3, #0
 8005670:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005674:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005678:	460b      	mov	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	d037      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800567e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005688:	d00e      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800568a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800568e:	d816      	bhi.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d018      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005698:	d111      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569a:	4b82      	ldr	r3, [pc, #520]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	4a81      	ldr	r2, [pc, #516]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056a6:	e00f      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056ac:	3308      	adds	r3, #8
 80056ae:	2101      	movs	r1, #1
 80056b0:	4618      	mov	r0, r3
 80056b2:	f002 f823 	bl	80076fc <RCCEx_PLL2_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056bc:	e004      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056c4:	e000      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80056c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056d0:	4b74      	ldr	r3, [pc, #464]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80056d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056de:	4a71      	ldr	r2, [pc, #452]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80056e4:	e003      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80056fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056fe:	2300      	movs	r3, #0
 8005700:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005704:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005708:	460b      	mov	r3, r1
 800570a:	4313      	orrs	r3, r2
 800570c:	d03a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800570e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005714:	2b03      	cmp	r3, #3
 8005716:	d81d      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005718:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	0800575d 	.word	0x0800575d
 8005724:	08005731 	.word	0x08005731
 8005728:	0800573f 	.word	0x0800573f
 800572c:	0800575d 	.word	0x0800575d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005730:	4b5c      	ldr	r3, [pc, #368]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005734:	4a5b      	ldr	r2, [pc, #364]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800573c:	e00f      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800573e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005742:	3308      	adds	r3, #8
 8005744:	2102      	movs	r1, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 ffd8 	bl	80076fc <RCCEx_PLL2_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005752:	e004      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800575a:	e000      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800575c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005766:	4b4f      	ldr	r3, [pc, #316]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576a:	f023 0103 	bic.w	r1, r3, #3
 800576e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005774:	4a4b      	ldr	r2, [pc, #300]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005776:	430b      	orrs	r3, r1
 8005778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005780:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005784:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005790:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800579a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800579e:	460b      	mov	r3, r1
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f000 80a0 	beq.w	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a6:	4b40      	ldr	r3, [pc, #256]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a3f      	ldr	r2, [pc, #252]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b2:	f7fd fd57 	bl	8003264 <HAL_GetTick>
 80057b6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ba:	e00b      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057bc:	f7fd fd52 	bl	8003264 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b64      	cmp	r3, #100	@ 0x64
 80057ca:	d903      	bls.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057d2:	e005      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d4:	4b34      	ldr	r3, [pc, #208]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ed      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80057e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d17a      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057e8:	4b2e      	ldr	r3, [pc, #184]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057f4:	4053      	eors	r3, r2
 80057f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d015      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057fe:	4b29      	ldr	r3, [pc, #164]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005806:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800580a:	4b26      	ldr	r3, [pc, #152]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580e:	4a25      	ldr	r2, [pc, #148]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005814:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005816:	4b23      	ldr	r3, [pc, #140]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581a:	4a22      	ldr	r2, [pc, #136]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800581c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005820:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005822:	4a20      	ldr	r2, [pc, #128]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005824:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005828:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800582a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800582e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005836:	d118      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd fd14 	bl	8003264 <HAL_GetTick>
 800583c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005840:	e00d      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fd fd0f 	bl	8003264 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800584c:	1ad2      	subs	r2, r2, r3
 800584e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005852:	429a      	cmp	r2, r3
 8005854:	d903      	bls.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800585c:	e005      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800585e:	4b11      	ldr	r3, [pc, #68]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0eb      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800586a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800586e:	2b00      	cmp	r3, #0
 8005870:	d130      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005872:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005876:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800587a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005882:	d115      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005884:	4b07      	ldr	r3, [pc, #28]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800588c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005890:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005894:	091a      	lsrs	r2, r3, #4
 8005896:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005898:	4013      	ands	r3, r2
 800589a:	4a02      	ldr	r2, [pc, #8]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800589c:	430b      	orrs	r3, r1
 800589e:	6113      	str	r3, [r2, #16]
 80058a0:	e00c      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x974>
 80058a2:	bf00      	nop
 80058a4:	58024400 	.word	0x58024400
 80058a8:	58024800 	.word	0x58024800
 80058ac:	00ffffcf 	.word	0x00ffffcf
 80058b0:	4bd4      	ldr	r3, [pc, #848]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	4ad3      	ldr	r2, [pc, #844]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80058b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058ba:	6113      	str	r3, [r2, #16]
 80058bc:	4bd1      	ldr	r3, [pc, #836]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80058be:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80058c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058cc:	4acd      	ldr	r2, [pc, #820]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80058ce:	430b      	orrs	r3, r1
 80058d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d2:	e008      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f002 0301 	and.w	r3, r2, #1
 80058f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058f6:	2300      	movs	r3, #0
 80058f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005900:	460b      	mov	r3, r1
 8005902:	4313      	orrs	r3, r2
 8005904:	f000 808b 	beq.w	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005908:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800590c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005910:	2b28      	cmp	r3, #40	@ 0x28
 8005912:	d86b      	bhi.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005914:	a201      	add	r2, pc, #4	@ (adr r2, 800591c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	080059f5 	.word	0x080059f5
 8005920:	080059ed 	.word	0x080059ed
 8005924:	080059ed 	.word	0x080059ed
 8005928:	080059ed 	.word	0x080059ed
 800592c:	080059ed 	.word	0x080059ed
 8005930:	080059ed 	.word	0x080059ed
 8005934:	080059ed 	.word	0x080059ed
 8005938:	080059ed 	.word	0x080059ed
 800593c:	080059c1 	.word	0x080059c1
 8005940:	080059ed 	.word	0x080059ed
 8005944:	080059ed 	.word	0x080059ed
 8005948:	080059ed 	.word	0x080059ed
 800594c:	080059ed 	.word	0x080059ed
 8005950:	080059ed 	.word	0x080059ed
 8005954:	080059ed 	.word	0x080059ed
 8005958:	080059ed 	.word	0x080059ed
 800595c:	080059d7 	.word	0x080059d7
 8005960:	080059ed 	.word	0x080059ed
 8005964:	080059ed 	.word	0x080059ed
 8005968:	080059ed 	.word	0x080059ed
 800596c:	080059ed 	.word	0x080059ed
 8005970:	080059ed 	.word	0x080059ed
 8005974:	080059ed 	.word	0x080059ed
 8005978:	080059ed 	.word	0x080059ed
 800597c:	080059f5 	.word	0x080059f5
 8005980:	080059ed 	.word	0x080059ed
 8005984:	080059ed 	.word	0x080059ed
 8005988:	080059ed 	.word	0x080059ed
 800598c:	080059ed 	.word	0x080059ed
 8005990:	080059ed 	.word	0x080059ed
 8005994:	080059ed 	.word	0x080059ed
 8005998:	080059ed 	.word	0x080059ed
 800599c:	080059f5 	.word	0x080059f5
 80059a0:	080059ed 	.word	0x080059ed
 80059a4:	080059ed 	.word	0x080059ed
 80059a8:	080059ed 	.word	0x080059ed
 80059ac:	080059ed 	.word	0x080059ed
 80059b0:	080059ed 	.word	0x080059ed
 80059b4:	080059ed 	.word	0x080059ed
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	080059f5 	.word	0x080059f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059c4:	3308      	adds	r3, #8
 80059c6:	2101      	movs	r1, #1
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 fe97 	bl	80076fc <RCCEx_PLL2_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059d4:	e00f      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059da:	3328      	adds	r3, #40	@ 0x28
 80059dc:	2101      	movs	r1, #1
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 ff3e 	bl	8007860 <RCCEx_PLL3_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059ea:	e004      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80059f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059fe:	4b81      	ldr	r3, [pc, #516]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a0e:	4a7d      	ldr	r2, [pc, #500]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a14:	e003      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f002 0302 	and.w	r3, r2, #2
 8005a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a34:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d042      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a44:	2b05      	cmp	r3, #5
 8005a46:	d825      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005a48:	a201      	add	r2, pc, #4	@ (adr r2, 8005a50 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a9d 	.word	0x08005a9d
 8005a54:	08005a69 	.word	0x08005a69
 8005a58:	08005a7f 	.word	0x08005a7f
 8005a5c:	08005a9d 	.word	0x08005a9d
 8005a60:	08005a9d 	.word	0x08005a9d
 8005a64:	08005a9d 	.word	0x08005a9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	2101      	movs	r1, #1
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 fe43 	bl	80076fc <RCCEx_PLL2_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00f      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a82:	3328      	adds	r3, #40	@ 0x28
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 feea 	bl	8007860 <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a92:	e004      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005aa6:	4b57      	ldr	r3, [pc, #348]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aaa:	f023 0107 	bic.w	r1, r3, #7
 8005aae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ab4:	4a53      	ldr	r2, [pc, #332]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005aba:	e003      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ac0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f002 0304 	and.w	r3, r2, #4
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ada:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	d044      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d825      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005af0:	a201      	add	r2, pc, #4	@ (adr r2, 8005af8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b45 	.word	0x08005b45
 8005afc:	08005b11 	.word	0x08005b11
 8005b00:	08005b27 	.word	0x08005b27
 8005b04:	08005b45 	.word	0x08005b45
 8005b08:	08005b45 	.word	0x08005b45
 8005b0c:	08005b45 	.word	0x08005b45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b14:	3308      	adds	r3, #8
 8005b16:	2101      	movs	r1, #1
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 fdef 	bl	80076fc <RCCEx_PLL2_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b24:	e00f      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b2a:	3328      	adds	r3, #40	@ 0x28
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fe96 	bl	8007860 <RCCEx_PLL3_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b3a:	e004      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b42:	e000      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b52:	f023 0107 	bic.w	r1, r3, #7
 8005b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b5e:	4a29      	ldr	r2, [pc, #164]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b60:	430b      	orrs	r3, r1
 8005b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b64:	e003      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f002 0320 	and.w	r3, r2, #32
 8005b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	d057      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b9a:	d035      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ba0:	d82c      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba6:	d031      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bac:	d826      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005bae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bb2:	d02d      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005bb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bb8:	d820      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bbe:	d012      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bc4:	d81a      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d024      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bce:	d115      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 fd8f 	bl	80076fc <RCCEx_PLL2_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005be4:	e017      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bea:	3328      	adds	r3, #40	@ 0x28
 8005bec:	2102      	movs	r1, #2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fe36 	bl	8007860 <RCCEx_PLL3_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bfa:	e00c      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c02:	e008      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005c04:	58024400 	.word	0x58024400
        break;
 8005c08:	bf00      	nop
 8005c0a:	e004      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005c0c:	bf00      	nop
 8005c0e:	e002      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005c10:	bf00      	nop
 8005c12:	e000      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10b      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c1e:	4bc2      	ldr	r3, [pc, #776]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c2e:	4abe      	ldr	r2, [pc, #760]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c30:	430b      	orrs	r3, r1
 8005c32:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c34:	e003      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	d055      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c6a:	d033      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005c6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c70:	d82c      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c76:	d02f      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7c:	d826      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c82:	d02b      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005c84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c88:	d820      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c8e:	d012      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c94:	d81a      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d022      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c9e:	d115      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fd27 	bl	80076fc <RCCEx_PLL2_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cb4:	e015      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cba:	3328      	adds	r3, #40	@ 0x28
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 fdce 	bl	8007860 <RCCEx_PLL3_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cd2:	e006      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005cd4:	bf00      	nop
 8005cd6:	e004      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005cd8:	bf00      	nop
 8005cda:	e002      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cea:	4b8f      	ldr	r3, [pc, #572]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cfa:	4a8b      	ldr	r2, [pc, #556]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d00:	e003      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005d16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d20:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005d24:	460b      	mov	r3, r1
 8005d26:	4313      	orrs	r3, r2
 8005d28:	d055      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d32:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d36:	d033      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005d38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d3c:	d82c      	bhi.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d42:	d02f      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d48:	d826      	bhi.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005d4a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d4e:	d02b      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005d50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d54:	d820      	bhi.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005d56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d5a:	d012      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d60:	d81a      	bhi.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d022      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6a:	d115      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d70:	3308      	adds	r3, #8
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fcc1 	bl	80076fc <RCCEx_PLL2_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d80:	e015      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d86:	3328      	adds	r3, #40	@ 0x28
 8005d88:	2102      	movs	r1, #2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fd68 	bl	8007860 <RCCEx_PLL3_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d96:	e00a      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d9e:	e006      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005da0:	bf00      	nop
 8005da2:	e004      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005da4:	bf00      	nop
 8005da6:	e002      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005da8:	bf00      	nop
 8005daa:	e000      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005db6:	4b5c      	ldr	r3, [pc, #368]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dba:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005dc6:	4a58      	ldr	r2, [pc, #352]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dcc:	e003      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f002 0308 	and.w	r3, r2, #8
 8005de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005de6:	2300      	movs	r3, #0
 8005de8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005dec:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005df0:	460b      	mov	r3, r1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	d01e      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e02:	d10c      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e08:	3328      	adds	r3, #40	@ 0x28
 8005e0a:	2102      	movs	r1, #2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 fd27 	bl	8007860 <RCCEx_PLL3_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e1e:	4b42      	ldr	r3, [pc, #264]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2e:	4a3e      	ldr	r2, [pc, #248]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f002 0310 	and.w	r3, r2, #16
 8005e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4313      	orrs	r3, r2
 8005e52:	d01e      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e60:	d10c      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e66:	3328      	adds	r3, #40	@ 0x28
 8005e68:	2102      	movs	r1, #2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 fcf8 	bl	8007860 <RCCEx_PLL3_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e8c:	4a26      	ldr	r2, [pc, #152]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005e9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ea8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005eac:	460b      	mov	r3, r1
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	d040      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005eb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005eba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ebe:	d022      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec4:	d81b      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ece:	d00b      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005ed0:	e015      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fc0e 	bl	80076fc <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ee6:	e00f      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eec:	3328      	adds	r3, #40	@ 0x28
 8005eee:	2102      	movs	r1, #2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fcb5 	bl	8007860 <RCCEx_PLL3_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005efc:	e004      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f04:	e000      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10d      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f10:	4b05      	ldr	r3, [pc, #20]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f14:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f20:	4a01      	ldr	r2, [pc, #4]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f22:	430b      	orrs	r3, r1
 8005f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f26:	e005      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f30:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005f40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f42:	2300      	movs	r3, #0
 8005f44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	d03b      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f5c:	d01f      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005f5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f62:	d818      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005f64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f68:	d003      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f6e:	d007      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005f70:	e011      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f72:	4b64      	ldr	r3, [pc, #400]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	4a63      	ldr	r2, [pc, #396]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f7e:	e00f      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f84:	3328      	adds	r3, #40	@ 0x28
 8005f86:	2101      	movs	r1, #1
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fc69 	bl	8007860 <RCCEx_PLL3_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f94:	e004      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f9c:	e000      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10b      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fa8:	4b56      	ldr	r3, [pc, #344]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fb8:	4a52      	ldr	r2, [pc, #328]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fbe:	e003      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fc4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005fd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fda:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	d031      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff2:	d007      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005ff4:	e011      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff6:	4b43      	ldr	r3, [pc, #268]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffa:	4a42      	ldr	r2, [pc, #264]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006002:	e00e      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006008:	3308      	adds	r3, #8
 800600a:	2102      	movs	r1, #2
 800600c:	4618      	mov	r0, r3
 800600e:	f001 fb75 	bl	80076fc <RCCEx_PLL2_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006018:	e003      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006022:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800602a:	4b36      	ldr	r3, [pc, #216]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800602c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800602e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006038:	4a32      	ldr	r2, [pc, #200]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800603a:	430b      	orrs	r3, r1
 800603c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800603e:	e003      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006044:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006056:	2300      	movs	r3, #0
 8006058:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800605a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d00c      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006068:	3328      	adds	r3, #40	@ 0x28
 800606a:	2102      	movs	r1, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fbf7 	bl	8007860 <RCCEx_PLL3_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800607e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800608a:	663b      	str	r3, [r7, #96]	@ 0x60
 800608c:	2300      	movs	r3, #0
 800608e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006090:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006094:	460b      	mov	r3, r1
 8006096:	4313      	orrs	r3, r2
 8006098:	d03a      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800609a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800609e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060a6:	d018      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ac:	d811      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060b2:	d014      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060b8:	d80b      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d011      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80060be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060c2:	d106      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80060d0:	e008      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060d8:	e004      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80060da:	bf00      	nop
 80060dc:	e002      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80060e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10d      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060ec:	4b05      	ldr	r3, [pc, #20]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060fc:	4a01      	ldr	r2, [pc, #4]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060fe:	430b      	orrs	r3, r1
 8006100:	6553      	str	r3, [r2, #84]	@ 0x54
 8006102:	e005      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006104:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800610c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800611c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800611e:	2300      	movs	r3, #0
 8006120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006122:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006126:	460b      	mov	r3, r1
 8006128:	4313      	orrs	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800612c:	4baa      	ldr	r3, [pc, #680]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800612e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006130:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006134:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800613a:	4aa7      	ldr	r2, [pc, #668]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800613c:	430b      	orrs	r3, r1
 800613e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006140:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800614c:	653b      	str	r3, [r7, #80]	@ 0x50
 800614e:	2300      	movs	r3, #0
 8006150:	657b      	str	r3, [r7, #84]	@ 0x54
 8006152:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006156:	460b      	mov	r3, r1
 8006158:	4313      	orrs	r3, r2
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800615c:	4b9e      	ldr	r3, [pc, #632]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006168:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800616c:	4a9a      	ldr	r2, [pc, #616]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800616e:	430b      	orrs	r3, r1
 8006170:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800617e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006180:	2300      	movs	r3, #0
 8006182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006184:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006188:	460b      	mov	r3, r1
 800618a:	4313      	orrs	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800618e:	4b92      	ldr	r3, [pc, #584]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006192:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800619a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619c:	4a8e      	ldr	r2, [pc, #568]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800619e:	430b      	orrs	r3, r1
 80061a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80061ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80061b0:	2300      	movs	r3, #0
 80061b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80061b8:	460b      	mov	r3, r1
 80061ba:	4313      	orrs	r3, r2
 80061bc:	d00e      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061be:	4b86      	ldr	r3, [pc, #536]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	4a85      	ldr	r2, [pc, #532]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061c8:	6113      	str	r3, [r2, #16]
 80061ca:	4b83      	ldr	r3, [pc, #524]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061cc:	6919      	ldr	r1, [r3, #16]
 80061ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061d6:	4a80      	ldr	r2, [pc, #512]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061d8:	430b      	orrs	r3, r1
 80061da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80061e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061ea:	2300      	movs	r3, #0
 80061ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d009      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061f8:	4b77      	ldr	r3, [pc, #476]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006206:	4a74      	ldr	r2, [pc, #464]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006208:	430b      	orrs	r3, r1
 800620a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800620c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006218:	633b      	str	r3, [r7, #48]	@ 0x30
 800621a:	2300      	movs	r3, #0
 800621c:	637b      	str	r3, [r7, #52]	@ 0x34
 800621e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006222:	460b      	mov	r3, r1
 8006224:	4313      	orrs	r3, r2
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006228:	4b6b      	ldr	r3, [pc, #428]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800622a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006238:	4a67      	ldr	r2, [pc, #412]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800623a:	430b      	orrs	r3, r1
 800623c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800623e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	2100      	movs	r1, #0
 8006248:	62b9      	str	r1, [r7, #40]	@ 0x28
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006250:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006254:	460b      	mov	r3, r1
 8006256:	4313      	orrs	r3, r2
 8006258:	d011      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800625a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800625e:	3308      	adds	r3, #8
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fa4a 	bl	80076fc <RCCEx_PLL2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800626e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006276:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800627a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800627e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	2100      	movs	r1, #0
 8006288:	6239      	str	r1, [r7, #32]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006290:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006294:	460b      	mov	r3, r1
 8006296:	4313      	orrs	r3, r2
 8006298:	d011      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800629a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800629e:	3308      	adds	r3, #8
 80062a0:	2101      	movs	r1, #1
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 fa2a 	bl	80076fc <RCCEx_PLL2_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80062ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80062be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	2100      	movs	r1, #0
 80062c8:	61b9      	str	r1, [r7, #24]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062d4:	460b      	mov	r3, r1
 80062d6:	4313      	orrs	r3, r2
 80062d8:	d011      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062de:	3308      	adds	r3, #8
 80062e0:	2102      	movs	r1, #2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 fa0a 	bl	80076fc <RCCEx_PLL2_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80062ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80062fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	2100      	movs	r1, #0
 8006308:	6139      	str	r1, [r7, #16]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006314:	460b      	mov	r3, r1
 8006316:	4313      	orrs	r3, r2
 8006318:	d011      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800631a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800631e:	3328      	adds	r3, #40	@ 0x28
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f001 fa9c 	bl	8007860 <RCCEx_PLL3_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800632e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006336:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800633a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800633e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	2100      	movs	r1, #0
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006354:	460b      	mov	r3, r1
 8006356:	4313      	orrs	r3, r2
 8006358:	d011      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800635a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800635e:	3328      	adds	r3, #40	@ 0x28
 8006360:	2101      	movs	r1, #1
 8006362:	4618      	mov	r0, r3
 8006364:	f001 fa7c 	bl	8007860 <RCCEx_PLL3_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800636e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800637a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800637e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	2100      	movs	r1, #0
 8006388:	6039      	str	r1, [r7, #0]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006394:	460b      	mov	r3, r1
 8006396:	4313      	orrs	r3, r2
 8006398:	d011      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800639a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800639e:	3328      	adds	r3, #40	@ 0x28
 80063a0:	2102      	movs	r1, #2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 fa5c 	bl	8007860 <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80063ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80063be:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	e000      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80063d2:	46bd      	mov	sp, r7
 80063d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d8:	58024400 	.word	0x58024400

080063dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b090      	sub	sp, #64	@ 0x40
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80063e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80063ee:	430b      	orrs	r3, r1
 80063f0:	f040 8094 	bne.w	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80063f4:	4b9e      	ldr	r3, [pc, #632]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	2b04      	cmp	r3, #4
 8006402:	f200 8087 	bhi.w	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006406:	a201      	add	r2, pc, #4	@ (adr r2, 800640c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	08006421 	.word	0x08006421
 8006410:	08006449 	.word	0x08006449
 8006414:	08006471 	.word	0x08006471
 8006418:	0800650d 	.word	0x0800650d
 800641c:	08006499 	.word	0x08006499
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006420:	4b93      	ldr	r3, [pc, #588]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800642c:	d108      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800642e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006432:	4618      	mov	r0, r3
 8006434:	f001 f810 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800643c:	f000 bd45 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006444:	f000 bd41 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006448:	4b89      	ldr	r3, [pc, #548]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006454:	d108      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006456:	f107 0318 	add.w	r3, r7, #24
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fd54 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006464:	f000 bd31 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800646c:	f000 bd2d 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006470:	4b7f      	ldr	r3, [pc, #508]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800647c:	d108      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fe94 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800648c:	f000 bd1d 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006494:	f000 bd19 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006498:	4b75      	ldr	r3, [pc, #468]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800649a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064a2:	4b73      	ldr	r3, [pc, #460]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80064ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d109      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064b4:	4b6e      	ldr	r3, [pc, #440]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	08db      	lsrs	r3, r3, #3
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	4a6d      	ldr	r2, [pc, #436]	@ (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
 80064c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064c6:	e01f      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064c8:	4b69      	ldr	r3, [pc, #420]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d4:	d106      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80064d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064dc:	d102      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064de:	4b66      	ldr	r3, [pc, #408]	@ (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064e2:	e011      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064e4:	4b62      	ldr	r3, [pc, #392]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064f0:	d106      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80064f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064f8:	d102      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064fa:	4b60      	ldr	r3, [pc, #384]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80064fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064fe:	e003      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006504:	f000 bce1 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006508:	f000 bcdf 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800650c:	4b5c      	ldr	r3, [pc, #368]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006510:	f000 bcdb 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006518:	f000 bcd7 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800651c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006520:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006524:	430b      	orrs	r3, r1
 8006526:	f040 80ad 	bne.w	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800652a:	4b51      	ldr	r3, [pc, #324]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800652c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800652e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006532:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800653a:	d056      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800653c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006542:	f200 8090 	bhi.w	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	2bc0      	cmp	r3, #192	@ 0xc0
 800654a:	f000 8088 	beq.w	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	2bc0      	cmp	r3, #192	@ 0xc0
 8006552:	f200 8088 	bhi.w	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	2b80      	cmp	r3, #128	@ 0x80
 800655a:	d032      	beq.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	2b80      	cmp	r3, #128	@ 0x80
 8006560:	f200 8081 	bhi.w	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	2b40      	cmp	r3, #64	@ 0x40
 800656e:	d014      	beq.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006570:	e079      	b.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006572:	4b3f      	ldr	r3, [pc, #252]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800657a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800657e:	d108      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006584:	4618      	mov	r0, r3
 8006586:	f000 ff67 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800658e:	f000 bc9c 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006592:	2300      	movs	r3, #0
 8006594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006596:	f000 bc98 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800659a:	4b35      	ldr	r3, [pc, #212]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065a6:	d108      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065a8:	f107 0318 	add.w	r3, r7, #24
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fcab 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065b6:	f000 bc88 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065be:	f000 bc84 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ce:	d108      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065d0:	f107 030c 	add.w	r3, r7, #12
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fdeb 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065de:	f000 bc74 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e6:	f000 bc70 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065ea:	4b21      	ldr	r3, [pc, #132]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80065f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d10c      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006606:	4b1a      	ldr	r3, [pc, #104]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	08db      	lsrs	r3, r3, #3
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	4a18      	ldr	r2, [pc, #96]	@ (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006612:	fa22 f303 	lsr.w	r3, r2, r3
 8006616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006618:	e01f      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800661a:	4b15      	ldr	r3, [pc, #84]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006626:	d106      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800662e:	d102      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006630:	4b11      	ldr	r3, [pc, #68]	@ (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006634:	e011      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006636:	4b0e      	ldr	r3, [pc, #56]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006642:	d106      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664a:	d102      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800664c:	4b0b      	ldr	r3, [pc, #44]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800664e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006650:	e003      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006656:	f000 bc38 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800665a:	f000 bc36 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800665e:	4b08      	ldr	r3, [pc, #32]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006662:	f000 bc32 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800666a:	f000 bc2e 	b.w	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800666e:	bf00      	nop
 8006670:	58024400 	.word	0x58024400
 8006674:	03d09000 	.word	0x03d09000
 8006678:	003d0900 	.word	0x003d0900
 800667c:	00f42400 	.word	0x00f42400
 8006680:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006688:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800668c:	430b      	orrs	r3, r1
 800668e:	f040 809c 	bne.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006692:	4b9e      	ldr	r3, [pc, #632]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006696:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800669a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800669c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066a2:	d054      	beq.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066aa:	f200 808b 	bhi.w	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066b4:	f000 8083 	beq.w	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066be:	f200 8081 	bhi.w	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066c8:	d02f      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066d0:	d878      	bhi.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066de:	d012      	beq.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80066e0:	e070      	b.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066e2:	4b8a      	ldr	r3, [pc, #552]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066ee:	d107      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 feaf 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066fe:	e3e4      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006704:	e3e1      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006706:	4b81      	ldr	r3, [pc, #516]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800670e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006712:	d107      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006714:	f107 0318 	add.w	r3, r7, #24
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fbf5 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006722:	e3d2      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006728:	e3cf      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800672a:	4b78      	ldr	r3, [pc, #480]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006736:	d107      	bne.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006738:	f107 030c 	add.w	r3, r7, #12
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fd37 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006746:	e3c0      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800674c:	e3bd      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800674e:	4b6f      	ldr	r3, [pc, #444]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006756:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006758:	4b6c      	ldr	r3, [pc, #432]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b04      	cmp	r3, #4
 8006762:	d10c      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800676a:	4b68      	ldr	r3, [pc, #416]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	08db      	lsrs	r3, r3, #3
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	4a66      	ldr	r2, [pc, #408]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006776:	fa22 f303 	lsr.w	r3, r2, r3
 800677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800677c:	e01e      	b.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800677e:	4b63      	ldr	r3, [pc, #396]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800678a:	d106      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800678c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006792:	d102      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006794:	4b5f      	ldr	r3, [pc, #380]	@ (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006798:	e010      	b.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800679a:	4b5c      	ldr	r3, [pc, #368]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067a6:	d106      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80067a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ae:	d102      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067b0:	4b59      	ldr	r3, [pc, #356]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b4:	e002      	b.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80067ba:	e386      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067bc:	e385      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067be:	4b57      	ldr	r3, [pc, #348]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067c2:	e382      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067c8:	e37f      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80067ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ce:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80067d2:	430b      	orrs	r3, r1
 80067d4:	f040 80a7 	bne.w	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80067d8:	4b4c      	ldr	r3, [pc, #304]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067dc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80067e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067e8:	d055      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067f0:	f200 8096 	bhi.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80067fa:	f000 8084 	beq.w	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006804:	f200 808c 	bhi.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800680e:	d030      	beq.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006816:	f200 8083 	bhi.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006826:	d012      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006828:	e07a      	b.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800682a:	4b38      	ldr	r3, [pc, #224]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006832:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006836:	d107      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fe0b 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006846:	e340      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800684c:	e33d      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800684e:	4b2f      	ldr	r3, [pc, #188]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800685a:	d107      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800685c:	f107 0318 	add.w	r3, r7, #24
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fb51 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800686a:	e32e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006870:	e32b      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006872:	4b26      	ldr	r3, [pc, #152]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800687a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800687e:	d107      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006880:	f107 030c 	add.w	r3, r7, #12
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fc93 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800688e:	e31c      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006894:	e319      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006896:	4b1d      	ldr	r3, [pc, #116]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068a0:	4b1a      	ldr	r3, [pc, #104]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d10c      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80068ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068b2:	4b16      	ldr	r3, [pc, #88]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	08db      	lsrs	r3, r3, #3
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	4a14      	ldr	r2, [pc, #80]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80068be:	fa22 f303 	lsr.w	r3, r2, r3
 80068c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068c4:	e01e      	b.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068c6:	4b11      	ldr	r3, [pc, #68]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d2:	d106      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80068d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068da:	d102      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068e0:	e010      	b.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068e2:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ee:	d106      	bne.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80068f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068f6:	d102      	bne.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068f8:	4b07      	ldr	r3, [pc, #28]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80068fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068fc:	e002      	b.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006902:	e2e2      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006904:	e2e1      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006906:	4b05      	ldr	r3, [pc, #20]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690a:	e2de      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800690c:	58024400 	.word	0x58024400
 8006910:	03d09000 	.word	0x03d09000
 8006914:	003d0900 	.word	0x003d0900
 8006918:	00f42400 	.word	0x00f42400
 800691c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006924:	e2d1      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800692e:	430b      	orrs	r3, r1
 8006930:	f040 809c 	bne.w	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006934:	4b93      	ldr	r3, [pc, #588]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006938:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800693c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800693e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006944:	d054      	beq.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800694c:	f200 808b 	bhi.w	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006956:	f000 8083 	beq.w	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006960:	f200 8081 	bhi.w	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800696a:	d02f      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800696c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006972:	d878      	bhi.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800697a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006980:	d012      	beq.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006982:	e070      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006984:	4b7f      	ldr	r3, [pc, #508]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006990:	d107      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fd5e 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800699c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a0:	e293      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a6:	e290      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069a8:	4b76      	ldr	r3, [pc, #472]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069b4:	d107      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b6:	f107 0318 	add.w	r3, r7, #24
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 faa4 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069c4:	e281      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ca:	e27e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069cc:	4b6d      	ldr	r3, [pc, #436]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069d8:	d107      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069da:	f107 030c 	add.w	r3, r7, #12
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fbe6 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069e8:	e26f      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ee:	e26c      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069f0:	4b64      	ldr	r3, [pc, #400]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069fa:	4b62      	ldr	r3, [pc, #392]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d10c      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a0c:	4b5d      	ldr	r3, [pc, #372]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	08db      	lsrs	r3, r3, #3
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	4a5c      	ldr	r2, [pc, #368]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a1e:	e01e      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a20:	4b58      	ldr	r3, [pc, #352]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a2c:	d106      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a34:	d102      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a36:	4b55      	ldr	r3, [pc, #340]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a3a:	e010      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a3c:	4b51      	ldr	r3, [pc, #324]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a48:	d106      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a50:	d102      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a52:	4b4f      	ldr	r3, [pc, #316]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a56:	e002      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a5c:	e235      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a5e:	e234      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a60:	4b4c      	ldr	r3, [pc, #304]	@ (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a64:	e231      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a6a:	e22e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a70:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006a74:	430b      	orrs	r3, r1
 8006a76:	f040 808f 	bne.w	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006a7a:	4b42      	ldr	r3, [pc, #264]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006a82:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a8a:	d06b      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a92:	d874      	bhi.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a9a:	d056      	beq.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006aa2:	d86c      	bhi.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006aaa:	d03b      	beq.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ab2:	d864      	bhi.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aba:	d021      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ac2:	d85c      	bhi.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad0:	d004      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006ad2:	e054      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ad4:	f7fe fa0c 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8006ad8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ada:	e1f6      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006adc:	4b29      	ldr	r3, [pc, #164]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ae8:	d107      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aea:	f107 0318 	add.w	r3, r7, #24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fa0a 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af8:	e1e7      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006afe:	e1e4      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b00:	4b20      	ldr	r3, [pc, #128]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b0c:	d107      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b0e:	f107 030c 	add.w	r3, r7, #12
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fb4c 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b1c:	e1d5      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b22:	e1d2      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b24:	4b17      	ldr	r3, [pc, #92]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d109      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b30:	4b14      	ldr	r3, [pc, #80]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	08db      	lsrs	r3, r3, #3
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	4a13      	ldr	r2, [pc, #76]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b42:	e1c2      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b48:	e1bf      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b56:	d102      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006b58:	4b0c      	ldr	r3, [pc, #48]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5c:	e1b5      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b62:	e1b2      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b64:	4b07      	ldr	r3, [pc, #28]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b70:	d102      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006b72:	4b07      	ldr	r3, [pc, #28]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b76:	e1a8      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b7c:	e1a5      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b82:	e1a2      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b84:	58024400 	.word	0x58024400
 8006b88:	03d09000 	.word	0x03d09000
 8006b8c:	003d0900 	.word	0x003d0900
 8006b90:	00f42400 	.word	0x00f42400
 8006b94:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b9c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	d173      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb4:	d02f      	beq.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bbc:	d863      	bhi.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d004      	beq.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bca:	d012      	beq.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006bcc:	e05b      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bce:	4b92      	ldr	r3, [pc, #584]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bda:	d107      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bdc:	f107 0318 	add.w	r3, r7, #24
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 f991 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bea:	e16e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf0:	e16b      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bf2:	4b89      	ldr	r3, [pc, #548]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bfe:	d107      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c00:	f107 030c 	add.w	r3, r7, #12
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fad3 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c0e:	e15c      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c14:	e159      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c16:	4b80      	ldr	r3, [pc, #512]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c1e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c20:	4b7d      	ldr	r3, [pc, #500]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d10c      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c32:	4b79      	ldr	r3, [pc, #484]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	08db      	lsrs	r3, r3, #3
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	4a77      	ldr	r2, [pc, #476]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c44:	e01e      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c46:	4b74      	ldr	r3, [pc, #464]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c52:	d106      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c5a:	d102      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c5c:	4b70      	ldr	r3, [pc, #448]	@ (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c60:	e010      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c62:	4b6d      	ldr	r3, [pc, #436]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c6e:	d106      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c76:	d102      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c78:	4b6a      	ldr	r3, [pc, #424]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c7c:	e002      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c82:	e122      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c84:	e121      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c8a:	e11e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c90:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006c94:	430b      	orrs	r3, r1
 8006c96:	d133      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006c98:	4b5f      	ldr	r3, [pc, #380]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ca0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cae:	d012      	beq.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006cb0:	e023      	b.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cb2:	4b59      	ldr	r3, [pc, #356]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fbc7 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cce:	e0fc      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd4:	e0f9      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cd6:	4b50      	ldr	r3, [pc, #320]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ce2:	d107      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ce4:	f107 0318 	add.w	r3, r7, #24
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f90d 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cf2:	e0ea      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf8:	e0e7      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cfe:	e0e4      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d04:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	f040 808d 	bne.w	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006d0e:	4b42      	ldr	r3, [pc, #264]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d12:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006d16:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d1e:	d06b      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d26:	d874      	bhi.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2e:	d056      	beq.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d36:	d86c      	bhi.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d3e:	d03b      	beq.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d46:	d864      	bhi.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4e:	d021      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d56:	d85c      	bhi.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d64:	d004      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006d66:	e054      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006d68:	f000 f8b8 	bl	8006edc <HAL_RCCEx_GetD3PCLK1Freq>
 8006d6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d6e:	e0ac      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d70:	4b29      	ldr	r3, [pc, #164]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d7c:	d107      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d7e:	f107 0318 	add.w	r3, r7, #24
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f8c0 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d8c:	e09d      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d92:	e09a      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d94:	4b20      	ldr	r3, [pc, #128]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da0:	d107      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006da2:	f107 030c 	add.w	r3, r7, #12
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fa02 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db0:	e08b      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006db6:	e088      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006db8:	4b17      	ldr	r3, [pc, #92]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d109      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dc4:	4b14      	ldr	r3, [pc, #80]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	4a13      	ldr	r2, [pc, #76]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dd6:	e078      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ddc:	e075      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006dde:	4b0e      	ldr	r3, [pc, #56]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dea:	d102      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006dec:	4b0c      	ldr	r3, [pc, #48]	@ (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df0:	e06b      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006df6:	e068      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006df8:	4b07      	ldr	r3, [pc, #28]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e04:	d102      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006e06:	4b07      	ldr	r3, [pc, #28]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e0a:	e05e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e10:	e05b      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e16:	e058      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	03d09000 	.word	0x03d09000
 8006e20:	003d0900 	.word	0x003d0900
 8006e24:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e2c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006e30:	430b      	orrs	r3, r1
 8006e32:	d148      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006e34:	4b27      	ldr	r3, [pc, #156]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e3c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e44:	d02a      	beq.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e4c:	d838      	bhi.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d004      	beq.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e5a:	d00d      	beq.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006e5c:	e030      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e6a:	d102      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e70:	e02b      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e76:	e028      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e78:	4b16      	ldr	r3, [pc, #88]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e84:	d107      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fae4 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e94:	e019      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e9a:	e016      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ea8:	d107      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eaa:	f107 0318 	add.w	r3, r7, #24
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 f82a 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb8:	e007      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ebe:	e004      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec4:	e001      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3740      	adds	r7, #64	@ 0x40
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	00f42400 	.word	0x00f42400

08006edc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ee0:	f7fd ffd6 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	4904      	ldr	r1, [pc, #16]	@ (8006f04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ef2:	5ccb      	ldrb	r3, [r1, r3]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	58024400 	.word	0x58024400
 8006f04:	0800f3d0 	.word	0x0800f3d0

08006f08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b089      	sub	sp, #36	@ 0x24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f10:	4ba1      	ldr	r3, [pc, #644]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f1a:	4b9f      	ldr	r3, [pc, #636]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	0b1b      	lsrs	r3, r3, #12
 8006f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f26:	4b9c      	ldr	r3, [pc, #624]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	091b      	lsrs	r3, r3, #4
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f32:	4b99      	ldr	r3, [pc, #612]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f36:	08db      	lsrs	r3, r3, #3
 8006f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8111 	beq.w	8007178 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	f000 8083 	beq.w	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	f200 80a1 	bhi.w	80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d056      	beq.n	8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f72:	e099      	b.n	80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f74:	4b88      	ldr	r3, [pc, #544]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d02d      	beq.n	8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f80:	4b85      	ldr	r3, [pc, #532]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	08db      	lsrs	r3, r3, #3
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	4a84      	ldr	r2, [pc, #528]	@ (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006faa:	4b7b      	ldr	r3, [pc, #492]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fda:	e087      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fee:	4b6a      	ldr	r3, [pc, #424]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007002:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800701e:	e065      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800702e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007032:	4b59      	ldr	r3, [pc, #356]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007042:	ed97 6a03 	vldr	s12, [r7, #12]
 8007046:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800704a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007062:	e043      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007076:	4b48      	ldr	r3, [pc, #288]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007086:	ed97 6a03 	vldr	s12, [r7, #12]
 800708a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800708e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800709a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070a6:	e021      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ba:	4b37      	ldr	r3, [pc, #220]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80070ec:	4b2a      	ldr	r3, [pc, #168]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f0:	0a5b      	lsrs	r3, r3, #9
 80070f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007106:	edd7 6a07 	vldr	s13, [r7, #28]
 800710a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800710e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007112:	ee17 2a90 	vmov	r2, s15
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800711a:	4b1f      	ldr	r3, [pc, #124]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711e:	0c1b      	lsrs	r3, r3, #16
 8007120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007134:	edd7 6a07 	vldr	s13, [r7, #28]
 8007138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007140:	ee17 2a90 	vmov	r2, s15
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007148:	4b13      	ldr	r3, [pc, #76]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714c:	0e1b      	lsrs	r3, r3, #24
 800714e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800715e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007162:	edd7 6a07 	vldr	s13, [r7, #28]
 8007166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800716e:	ee17 2a90 	vmov	r2, s15
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007176:	e008      	b.n	800718a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
}
 800718a:	bf00      	nop
 800718c:	3724      	adds	r7, #36	@ 0x24
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	58024400 	.word	0x58024400
 800719c:	03d09000 	.word	0x03d09000
 80071a0:	46000000 	.word	0x46000000
 80071a4:	4c742400 	.word	0x4c742400
 80071a8:	4a742400 	.word	0x4a742400
 80071ac:	4b742400 	.word	0x4b742400

080071b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b089      	sub	sp, #36	@ 0x24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071b8:	4ba1      	ldr	r3, [pc, #644]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80071c2:	4b9f      	ldr	r3, [pc, #636]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c6:	0d1b      	lsrs	r3, r3, #20
 80071c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d2:	0a1b      	lsrs	r3, r3, #8
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80071da:	4b99      	ldr	r3, [pc, #612]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071de:	08db      	lsrs	r3, r3, #3
 80071e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	fb02 f303 	mul.w	r3, r2, r3
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 8111 	beq.w	8007420 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b02      	cmp	r3, #2
 8007202:	f000 8083 	beq.w	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b02      	cmp	r3, #2
 800720a:	f200 80a1 	bhi.w	8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d056      	beq.n	80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800721a:	e099      	b.n	8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800721c:	4b88      	ldr	r3, [pc, #544]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d02d      	beq.n	8007284 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007228:	4b85      	ldr	r3, [pc, #532]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	08db      	lsrs	r3, r3, #3
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	4a84      	ldr	r2, [pc, #528]	@ (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
 8007238:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	ee07 3a90 	vmov	s15, r3
 8007240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007252:	4b7b      	ldr	r3, [pc, #492]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007262:	ed97 6a03 	vldr	s12, [r7, #12]
 8007266:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800726a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007282:	e087      	b.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007296:	4b6a      	ldr	r3, [pc, #424]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072c6:	e065      	b.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072da:	4b59      	ldr	r3, [pc, #356]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800730a:	e043      	b.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800731a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731e:	4b48      	ldr	r3, [pc, #288]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007332:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800734e:	e021      	b.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b37      	ldr	r3, [pc, #220]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a03 	vldr	s12, [r7, #12]
 8007376:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007392:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007394:	4b2a      	ldr	r3, [pc, #168]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007398:	0a5b      	lsrs	r3, r3, #9
 800739a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ba:	ee17 2a90 	vmov	r2, s15
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80073c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c6:	0c1b      	lsrs	r3, r3, #16
 80073c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e8:	ee17 2a90 	vmov	r2, s15
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80073f0:	4b13      	ldr	r3, [pc, #76]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f4:	0e1b      	lsrs	r3, r3, #24
 80073f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740a:	edd7 6a07 	vldr	s13, [r7, #28]
 800740e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007416:	ee17 2a90 	vmov	r2, s15
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800741e:	e008      	b.n	8007432 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	609a      	str	r2, [r3, #8]
}
 8007432:	bf00      	nop
 8007434:	3724      	adds	r7, #36	@ 0x24
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	58024400 	.word	0x58024400
 8007444:	03d09000 	.word	0x03d09000
 8007448:	46000000 	.word	0x46000000
 800744c:	4c742400 	.word	0x4c742400
 8007450:	4a742400 	.word	0x4a742400
 8007454:	4b742400 	.word	0x4b742400

08007458 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007458:	b480      	push	{r7}
 800745a:	b089      	sub	sp, #36	@ 0x24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007460:	4ba0      	ldr	r3, [pc, #640]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800746a:	4b9e      	ldr	r3, [pc, #632]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800746c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746e:	091b      	lsrs	r3, r3, #4
 8007470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007474:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007476:	4b9b      	ldr	r3, [pc, #620]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007480:	4b98      	ldr	r3, [pc, #608]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007484:	08db      	lsrs	r3, r3, #3
 8007486:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	fb02 f303 	mul.w	r3, r2, r3
 8007490:	ee07 3a90 	vmov	s15, r3
 8007494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007498:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 8111 	beq.w	80076c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	f000 8083 	beq.w	80075b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	f200 80a1 	bhi.w	80075f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d056      	beq.n	800756e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80074c0:	e099      	b.n	80075f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c2:	4b88      	ldr	r3, [pc, #544]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d02d      	beq.n	800752a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074ce:	4b85      	ldr	r3, [pc, #532]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	08db      	lsrs	r3, r3, #3
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	4a83      	ldr	r2, [pc, #524]	@ (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f8:	4b7a      	ldr	r3, [pc, #488]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007508:	ed97 6a03 	vldr	s12, [r7, #12]
 800750c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800751c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007524:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007528:	e087      	b.n	800763a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007534:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753c:	4b69      	ldr	r3, [pc, #420]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800753e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007550:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800756c:	e065      	b.n	800763a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007578:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80076f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800757c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007580:	4b58      	ldr	r3, [pc, #352]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007590:	ed97 6a03 	vldr	s12, [r7, #12]
 8007594:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b0:	e043      	b.n	800763a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	ee07 3a90 	vmov	s15, r3
 80075b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075bc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80076f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80075c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c4:	4b47      	ldr	r3, [pc, #284]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075cc:	ee07 3a90 	vmov	s15, r3
 80075d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f4:	e021      	b.n	800763a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	ee07 3a90 	vmov	s15, r3
 80075fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007600:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007608:	4b36      	ldr	r3, [pc, #216]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800760a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007610:	ee07 3a90 	vmov	s15, r3
 8007614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007618:	ed97 6a03 	vldr	s12, [r7, #12]
 800761c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800762c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007634:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007638:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800763a:	4b2a      	ldr	r3, [pc, #168]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763e:	0a5b      	lsrs	r3, r3, #9
 8007640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007650:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007654:	edd7 6a07 	vldr	s13, [r7, #28]
 8007658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007660:	ee17 2a90 	vmov	r2, s15
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007668:	4b1e      	ldr	r3, [pc, #120]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800766a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800767e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007682:	edd7 6a07 	vldr	s13, [r7, #28]
 8007686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800768a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768e:	ee17 2a90 	vmov	r2, s15
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007696:	4b13      	ldr	r3, [pc, #76]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769a:	0e1b      	lsrs	r3, r3, #24
 800769c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076bc:	ee17 2a90 	vmov	r2, s15
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80076c4:	e008      	b.n	80076d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	609a      	str	r2, [r3, #8]
}
 80076d8:	bf00      	nop
 80076da:	3724      	adds	r7, #36	@ 0x24
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	58024400 	.word	0x58024400
 80076e8:	03d09000 	.word	0x03d09000
 80076ec:	46000000 	.word	0x46000000
 80076f0:	4c742400 	.word	0x4c742400
 80076f4:	4a742400 	.word	0x4a742400
 80076f8:	4b742400 	.word	0x4b742400

080076fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800770a:	4b53      	ldr	r3, [pc, #332]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800770c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b03      	cmp	r3, #3
 8007714:	d101      	bne.n	800771a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e099      	b.n	800784e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800771a:	4b4f      	ldr	r3, [pc, #316]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a4e      	ldr	r2, [pc, #312]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007720:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007726:	f7fb fd9d 	bl	8003264 <HAL_GetTick>
 800772a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800772c:	e008      	b.n	8007740 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800772e:	f7fb fd99 	bl	8003264 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d901      	bls.n	8007740 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e086      	b.n	800784e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007740:	4b45      	ldr	r3, [pc, #276]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f0      	bne.n	800772e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800774c:	4b42      	ldr	r3, [pc, #264]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800774e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007750:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	031b      	lsls	r3, r3, #12
 800775a:	493f      	ldr	r1, [pc, #252]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800775c:	4313      	orrs	r3, r2
 800775e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	3b01      	subs	r3, #1
 8007766:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	3b01      	subs	r3, #1
 8007770:	025b      	lsls	r3, r3, #9
 8007772:	b29b      	uxth	r3, r3
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	3b01      	subs	r3, #1
 800777c:	041b      	lsls	r3, r3, #16
 800777e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	3b01      	subs	r3, #1
 800778a:	061b      	lsls	r3, r3, #24
 800778c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007790:	4931      	ldr	r1, [pc, #196]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007796:	4b30      	ldr	r3, [pc, #192]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	492d      	ldr	r1, [pc, #180]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	f023 0220 	bic.w	r2, r3, #32
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	4928      	ldr	r1, [pc, #160]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077ba:	4b27      	ldr	r3, [pc, #156]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	4a26      	ldr	r2, [pc, #152]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077c0:	f023 0310 	bic.w	r3, r3, #16
 80077c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077c6:	4b24      	ldr	r3, [pc, #144]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077ca:	4b24      	ldr	r3, [pc, #144]	@ (800785c <RCCEx_PLL2_Config+0x160>)
 80077cc:	4013      	ands	r3, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	69d2      	ldr	r2, [r2, #28]
 80077d2:	00d2      	lsls	r2, r2, #3
 80077d4:	4920      	ldr	r1, [pc, #128]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077da:	4b1f      	ldr	r3, [pc, #124]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077de:	4a1e      	ldr	r2, [pc, #120]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077e0:	f043 0310 	orr.w	r3, r3, #16
 80077e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	4a19      	ldr	r2, [pc, #100]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077f8:	e00f      	b.n	800781a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d106      	bne.n	800780e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007800:	4b15      	ldr	r3, [pc, #84]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	4a14      	ldr	r2, [pc, #80]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800780a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800780c:	e005      	b.n	800781a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800780e:	4b12      	ldr	r3, [pc, #72]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007812:	4a11      	ldr	r2, [pc, #68]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007814:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007818:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800781a:	4b0f      	ldr	r3, [pc, #60]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a0e      	ldr	r2, [pc, #56]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007820:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007826:	f7fb fd1d 	bl	8003264 <HAL_GetTick>
 800782a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800782c:	e008      	b.n	8007840 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800782e:	f7fb fd19 	bl	8003264 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d901      	bls.n	8007840 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e006      	b.n	800784e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007840:	4b05      	ldr	r3, [pc, #20]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0f0      	beq.n	800782e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	58024400 	.word	0x58024400
 800785c:	ffff0007 	.word	0xffff0007

08007860 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800786e:	4b53      	ldr	r3, [pc, #332]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	2b03      	cmp	r3, #3
 8007878:	d101      	bne.n	800787e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e099      	b.n	80079b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800787e:	4b4f      	ldr	r3, [pc, #316]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a4e      	ldr	r2, [pc, #312]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800788a:	f7fb fceb 	bl	8003264 <HAL_GetTick>
 800788e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007890:	e008      	b.n	80078a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007892:	f7fb fce7 	bl	8003264 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d901      	bls.n	80078a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e086      	b.n	80079b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078a4:	4b45      	ldr	r3, [pc, #276]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1f0      	bne.n	8007892 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078b0:	4b42      	ldr	r3, [pc, #264]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	051b      	lsls	r3, r3, #20
 80078be:	493f      	ldr	r1, [pc, #252]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	025b      	lsls	r3, r3, #9
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	431a      	orrs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	3b01      	subs	r3, #1
 80078e0:	041b      	lsls	r3, r3, #16
 80078e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	061b      	lsls	r3, r3, #24
 80078f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80078f4:	4931      	ldr	r1, [pc, #196]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078fa:	4b30      	ldr	r3, [pc, #192]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	492d      	ldr	r1, [pc, #180]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007908:	4313      	orrs	r3, r2
 800790a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800790c:	4b2b      	ldr	r3, [pc, #172]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	4928      	ldr	r1, [pc, #160]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800791a:	4313      	orrs	r3, r2
 800791c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800791e:	4b27      	ldr	r3, [pc, #156]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007922:	4a26      	ldr	r2, [pc, #152]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007928:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800792a:	4b24      	ldr	r3, [pc, #144]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800792c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800792e:	4b24      	ldr	r3, [pc, #144]	@ (80079c0 <RCCEx_PLL3_Config+0x160>)
 8007930:	4013      	ands	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	69d2      	ldr	r2, [r2, #28]
 8007936:	00d2      	lsls	r2, r2, #3
 8007938:	4920      	ldr	r1, [pc, #128]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800793a:	4313      	orrs	r3, r2
 800793c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800793e:	4b1f      	ldr	r3, [pc, #124]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007942:	4a1e      	ldr	r2, [pc, #120]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007948:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007950:	4b1a      	ldr	r3, [pc, #104]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007954:	4a19      	ldr	r2, [pc, #100]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007956:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800795a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800795c:	e00f      	b.n	800797e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d106      	bne.n	8007972 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007964:	4b15      	ldr	r3, [pc, #84]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007968:	4a14      	ldr	r2, [pc, #80]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800796a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800796e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007970:	e005      	b.n	800797e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007972:	4b12      	ldr	r3, [pc, #72]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007976:	4a11      	ldr	r2, [pc, #68]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007978:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800797c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800797e:	4b0f      	ldr	r3, [pc, #60]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a0e      	ldr	r2, [pc, #56]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798a:	f7fb fc6b 	bl	8003264 <HAL_GetTick>
 800798e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007990:	e008      	b.n	80079a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007992:	f7fb fc67 	bl	8003264 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e006      	b.n	80079b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079a4:	4b05      	ldr	r3, [pc, #20]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	58024400 	.word	0x58024400
 80079c0:	ffff0007 	.word	0xffff0007

080079c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08a      	sub	sp, #40	@ 0x28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e075      	b.n	8007ac2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d105      	bne.n	80079ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7f9 fbcd 	bl	8001188 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2204      	movs	r2, #4
 80079f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f868 	bl	8007acc <HAL_SD_InitCard>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e05d      	b.n	8007ac2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fdb5 	bl	800857c <HAL_SD_GetCardStatus>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e052      	b.n	8007ac2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007a1c:	7e3b      	ldrb	r3, [r7, #24]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007a22:	7e7b      	ldrb	r3, [r7, #25]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d10a      	bne.n	8007a46 <HAL_SD_Init+0x82>
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d102      	bne.n	8007a3c <HAL_SD_Init+0x78>
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a42:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a44:	e00b      	b.n	8007a5e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d104      	bne.n	8007a58 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a54:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a56:	e002      	b.n	8007a5e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fe73 	bl	8008750 <HAL_SD_ConfigWideBusOperation>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e026      	b.n	8007ac2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007a74:	f7fb fbf6 	bl	8003264 <HAL_GetTick>
 8007a78:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007a7a:	e011      	b.n	8007aa0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007a7c:	f7fb fbf2 	bl	8003264 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8a:	d109      	bne.n	8007aa0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a92:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e010      	b.n	8007ac2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 ff67 	bl	8008974 <HAL_SD_GetCardState>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d1e7      	bne.n	8007a7c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3728      	adds	r7, #40	@ 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007acc:	b590      	push	{r4, r7, lr}
 8007ace:	b08d      	sub	sp, #52	@ 0x34
 8007ad0:	af02      	add	r7, sp, #8
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007ae4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	f7fe fc76 	bl	80063dc <HAL_RCCEx_GetPeriphCLKFreq>
 8007af0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007b06:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e070      	b.n	8007bee <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0e:	0a1b      	lsrs	r3, r3, #8
 8007b10:	4a39      	ldr	r2, [pc, #228]	@ (8007bf8 <HAL_SD_InitCard+0x12c>)
 8007b12:	fba2 2303 	umull	r2, r3, r2, r3
 8007b16:	091b      	lsrs	r3, r3, #4
 8007b18:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681c      	ldr	r4, [r3, #0]
 8007b1e:	466a      	mov	r2, sp
 8007b20:	f107 0318 	add.w	r3, r7, #24
 8007b24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b28:	e882 0003 	stmia.w	r2, {r0, r1}
 8007b2c:	f107 030c 	add.w	r3, r7, #12
 8007b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b32:	4620      	mov	r0, r4
 8007b34:	f003 fd86 	bl	800b644 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f003 fdc9 	bl	800b6d4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d007      	beq.n	8007b6a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007b5a:	4a28      	ldr	r2, [pc, #160]	@ (8007bfc <HAL_SD_InitCard+0x130>)
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b62:	3301      	adds	r3, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fb fb89 	bl	800327c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fff0 	bl	8008b50 <SD_PowerON>
 8007b70:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e02e      	b.n	8007bee <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 ff0f 	bl	80089b4 <SD_InitCard>
 8007b96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00b      	beq.n	8007bb6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	431a      	orrs	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e01b      	b.n	8007bee <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f003 fe1e 	bl	800b800 <SDMMC_CmdBlockLength>
 8007bc4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00f      	beq.n	8007bec <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8007c00 <HAL_SD_InitCard+0x134>)
 8007bd2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	372c      	adds	r7, #44	@ 0x2c
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd90      	pop	{r4, r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	014f8b59 	.word	0x014f8b59
 8007bfc:	00012110 	.word	0x00012110
 8007c00:	1fe00fff 	.word	0x1fe00fff

08007c04 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b092      	sub	sp, #72	@ 0x48
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007c12:	f7fb fb27 	bl	8003264 <HAL_GetTick>
 8007c16:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d107      	bne.n	8007c36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c2a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e167      	b.n	8007f06 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	f040 815a 	bne.w	8007ef8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	441a      	add	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d907      	bls.n	8007c68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c5c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e14e      	b.n	8007f06 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2203      	movs	r2, #3
 8007c6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2200      	movs	r2, #0
 8007c76:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d002      	beq.n	8007c86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8007c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c82:	025b      	lsls	r3, r3, #9
 8007c84:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c86:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	025b      	lsls	r3, r3, #9
 8007c90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007c92:	2390      	movs	r3, #144	@ 0x90
 8007c94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007c96:	2302      	movs	r3, #2
 8007c98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f107 0214 	add.w	r2, r7, #20
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f003 fd7b 	bl	800b7a8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cc0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d90a      	bls.n	8007cde <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f003 fdd9 	bl	800b88c <SDMMC_CmdReadMultiBlock>
 8007cda:	6478      	str	r0, [r7, #68]	@ 0x44
 8007cdc:	e009      	b.n	8007cf2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cea:	4618      	mov	r0, r3
 8007cec:	f003 fdab 	bl	800b846 <SDMMC_CmdReadSingleBlock>
 8007cf0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d012      	beq.n	8007d1e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a84      	ldr	r2, [pc, #528]	@ (8007f10 <HAL_SD_ReadBlocks+0x30c>)
 8007cfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d06:	431a      	orrs	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e0f3      	b.n	8007f06 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007d22:	e058      	b.n	8007dd6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d033      	beq.n	8007d9a <HAL_SD_ReadBlocks+0x196>
 8007d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d34:	2b1f      	cmp	r3, #31
 8007d36:	d930      	bls.n	8007d9a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d3c:	e027      	b.n	8007d8e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f003 fca8 	bl	800b698 <SDMMC_ReadFIFO>
 8007d48:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d54:	3301      	adds	r3, #1
 8007d56:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5a:	0a1b      	lsrs	r3, r3, #8
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d64:	3301      	adds	r3, #1
 8007d66:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6a:	0c1b      	lsrs	r3, r3, #16
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d74:	3301      	adds	r3, #1
 8007d76:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7a:	0e1b      	lsrs	r3, r3, #24
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d84:	3301      	adds	r3, #1
 8007d86:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d90:	2b07      	cmp	r3, #7
 8007d92:	d9d4      	bls.n	8007d3e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8007d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d96:	3b20      	subs	r3, #32
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007d9a:	f7fb fa63 	bl	8003264 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d902      	bls.n	8007db0 <HAL_SD_ReadBlocks+0x1ac>
 8007daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d112      	bne.n	8007dd6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a56      	ldr	r2, [pc, #344]	@ (8007f10 <HAL_SD_ReadBlocks+0x30c>)
 8007db6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dbc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e097      	b.n	8007f06 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ddc:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d09f      	beq.n	8007d24 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007df2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d022      	beq.n	8007e48 <HAL_SD_ReadBlocks+0x244>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d91f      	bls.n	8007e48 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d01b      	beq.n	8007e48 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f003 fda3 	bl	800b960 <SDMMC_CmdStopTransfer>
 8007e1a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d012      	beq.n	8007e48 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a3a      	ldr	r2, [pc, #232]	@ (8007f10 <HAL_SD_ReadBlocks+0x30c>)
 8007e28:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e30:	431a      	orrs	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e05e      	b.n	8007f06 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d012      	beq.n	8007e7c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8007f10 <HAL_SD_ReadBlocks+0x30c>)
 8007e5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e62:	f043 0208 	orr.w	r2, r3, #8
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e044      	b.n	8007f06 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d012      	beq.n	8007eb0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a20      	ldr	r2, [pc, #128]	@ (8007f10 <HAL_SD_ReadBlocks+0x30c>)
 8007e90:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e96:	f043 0202 	orr.w	r2, r3, #2
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e02a      	b.n	8007f06 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d012      	beq.n	8007ee4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a13      	ldr	r2, [pc, #76]	@ (8007f10 <HAL_SD_ReadBlocks+0x30c>)
 8007ec4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eca:	f043 0220 	orr.w	r2, r3, #32
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e010      	b.n	8007f06 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8007f14 <HAL_SD_ReadBlocks+0x310>)
 8007eea:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e006      	b.n	8007f06 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
  }
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3748      	adds	r7, #72	@ 0x48
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	1fe00fff 	.word	0x1fe00fff
 8007f14:	18000f3a 	.word	0x18000f3a

08007f18 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b092      	sub	sp, #72	@ 0x48
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f26:	f7fb f99d 	bl	8003264 <HAL_GetTick>
 8007f2a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d107      	bne.n	8007f4a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f3e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e16b      	b.n	8008222 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	f040 815e 	bne.w	8008214 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	441a      	add	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d907      	bls.n	8007f7c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f70:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e152      	b.n	8008222 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2203      	movs	r2, #3
 8007f80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d002      	beq.n	8007f9a <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8007f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f96:	025b      	lsls	r3, r3, #9
 8007f98:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	025b      	lsls	r3, r3, #9
 8007fa4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007fa6:	2390      	movs	r3, #144	@ 0x90
 8007fa8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007faa:	2300      	movs	r3, #0
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f107 0218 	add.w	r2, r7, #24
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f003 fbf1 	bl	800b7a8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fd4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d90a      	bls.n	8007ff2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f003 fc95 	bl	800b918 <SDMMC_CmdWriteMultiBlock>
 8007fee:	6478      	str	r0, [r7, #68]	@ 0x44
 8007ff0:	e009      	b.n	8008006 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2210      	movs	r2, #16
 8007ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ffe:	4618      	mov	r0, r3
 8008000:	f003 fc67 	bl	800b8d2 <SDMMC_CmdWriteSingleBlock>
 8008004:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008008:	2b00      	cmp	r3, #0
 800800a:	d012      	beq.n	8008032 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a86      	ldr	r2, [pc, #536]	@ (800822c <HAL_SD_WriteBlocks+0x314>)
 8008012:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800801a:	431a      	orrs	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e0f7      	b.n	8008222 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008036:	e05c      	b.n	80080f2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800803e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d037      	beq.n	80080b6 <HAL_SD_WriteBlocks+0x19e>
 8008046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008048:	2b1f      	cmp	r3, #31
 800804a:	d934      	bls.n	80080b6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800804c:	2300      	movs	r3, #0
 800804e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008050:	e02b      	b.n	80080aa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805a:	3301      	adds	r3, #1
 800805c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800805e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	021a      	lsls	r2, r3, #8
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800806a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806c:	3301      	adds	r3, #1
 800806e:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	041a      	lsls	r2, r3, #16
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800807c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807e:	3301      	adds	r3, #1
 8008080:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	061a      	lsls	r2, r3, #24
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800808e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008090:	3301      	adds	r3, #1
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f107 0214 	add.w	r2, r7, #20
 800809c:	4611      	mov	r1, r2
 800809e:	4618      	mov	r0, r3
 80080a0:	f003 fb07 	bl	800b6b2 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80080a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a6:	3301      	adds	r3, #1
 80080a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80080aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080ac:	2b07      	cmp	r3, #7
 80080ae:	d9d0      	bls.n	8008052 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 80080b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b2:	3b20      	subs	r3, #32
 80080b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80080b6:	f7fb f8d5 	bl	8003264 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d902      	bls.n	80080cc <HAL_SD_WriteBlocks+0x1b4>
 80080c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d112      	bne.n	80080f2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a56      	ldr	r2, [pc, #344]	@ (800822c <HAL_SD_WriteBlocks+0x314>)
 80080d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080da:	431a      	orrs	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e097      	b.n	8008222 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f8:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d09b      	beq.n	8008038 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800810e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800811a:	2b00      	cmp	r3, #0
 800811c:	d022      	beq.n	8008164 <HAL_SD_WriteBlocks+0x24c>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d91f      	bls.n	8008164 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008128:	2b03      	cmp	r3, #3
 800812a:	d01b      	beq.n	8008164 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f003 fc15 	bl	800b960 <SDMMC_CmdStopTransfer>
 8008136:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800813a:	2b00      	cmp	r3, #0
 800813c:	d012      	beq.n	8008164 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a3a      	ldr	r2, [pc, #232]	@ (800822c <HAL_SD_WriteBlocks+0x314>)
 8008144:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800814a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800814c:	431a      	orrs	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e05e      	b.n	8008222 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d012      	beq.n	8008198 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a2d      	ldr	r2, [pc, #180]	@ (800822c <HAL_SD_WriteBlocks+0x314>)
 8008178:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800817e:	f043 0208 	orr.w	r2, r3, #8
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e044      	b.n	8008222 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d012      	beq.n	80081cc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a20      	ldr	r2, [pc, #128]	@ (800822c <HAL_SD_WriteBlocks+0x314>)
 80081ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b2:	f043 0202 	orr.w	r2, r3, #2
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e02a      	b.n	8008222 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d012      	beq.n	8008200 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a13      	ldr	r2, [pc, #76]	@ (800822c <HAL_SD_WriteBlocks+0x314>)
 80081e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e6:	f043 0210 	orr.w	r2, r3, #16
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e010      	b.n	8008222 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a0a      	ldr	r2, [pc, #40]	@ (8008230 <HAL_SD_WriteBlocks+0x318>)
 8008206:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	e006      	b.n	8008222 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008218:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
  }
}
 8008222:	4618      	mov	r0, r3
 8008224:	3748      	adds	r7, #72	@ 0x48
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	1fe00fff 	.word	0x1fe00fff
 8008230:	18000f3a 	.word	0x18000f3a

08008234 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008242:	0f9b      	lsrs	r3, r3, #30
 8008244:	b2da      	uxtb	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800824e:	0e9b      	lsrs	r3, r3, #26
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	b2da      	uxtb	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008260:	0e1b      	lsrs	r3, r3, #24
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	b2da      	uxtb	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008272:	0c1b      	lsrs	r3, r3, #16
 8008274:	b2da      	uxtb	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	b2da      	uxtb	r2, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800828a:	b2da      	uxtb	r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008294:	0d1b      	lsrs	r3, r3, #20
 8008296:	b29a      	uxth	r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a0:	0c1b      	lsrs	r3, r3, #16
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 030f 	and.w	r3, r3, #15
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082b2:	0bdb      	lsrs	r3, r3, #15
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082c4:	0b9b      	lsrs	r3, r3, #14
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d6:	0b5b      	lsrs	r3, r3, #13
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082e8:	0b1b      	lsrs	r3, r3, #12
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2200      	movs	r2, #0
 80082fa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008300:	2b00      	cmp	r3, #0
 8008302:	d163      	bne.n	80083cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008308:	009a      	lsls	r2, r3, #2
 800830a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800830e:	4013      	ands	r3, r2
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008314:	0f92      	lsrs	r2, r2, #30
 8008316:	431a      	orrs	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008320:	0edb      	lsrs	r3, r3, #27
 8008322:	b2db      	uxtb	r3, r3
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	b2da      	uxtb	r2, r3
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008332:	0e1b      	lsrs	r3, r3, #24
 8008334:	b2db      	uxtb	r3, r3
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	b2da      	uxtb	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008344:	0d5b      	lsrs	r3, r3, #21
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	b2da      	uxtb	r2, r3
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008356:	0c9b      	lsrs	r3, r3, #18
 8008358:	b2db      	uxtb	r3, r3
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	b2da      	uxtb	r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008368:	0bdb      	lsrs	r3, r3, #15
 800836a:	b2db      	uxtb	r3, r3
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	b2da      	uxtb	r2, r3
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	7e1b      	ldrb	r3, [r3, #24]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	3302      	adds	r3, #2
 800838c:	2201      	movs	r2, #1
 800838e:	fa02 f303 	lsl.w	r3, r2, r3
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008396:	fb03 f202 	mul.w	r2, r3, r2
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	7a1b      	ldrb	r3, [r3, #8]
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	2201      	movs	r2, #1
 80083aa:	409a      	lsls	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80083b8:	0a52      	lsrs	r2, r2, #9
 80083ba:	fb03 f202 	mul.w	r2, r3, r2
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80083ca:	e031      	b.n	8008430 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d11d      	bne.n	8008410 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083d8:	041b      	lsls	r3, r3, #16
 80083da:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083e2:	0c1b      	lsrs	r3, r3, #16
 80083e4:	431a      	orrs	r2, r3
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	3301      	adds	r3, #1
 80083f0:	029a      	lsls	r2, r3, #10
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008404:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	655a      	str	r2, [r3, #84]	@ 0x54
 800840e:	e00f      	b.n	8008430 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a58      	ldr	r2, [pc, #352]	@ (8008578 <HAL_SD_GetCardCSD+0x344>)
 8008416:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800841c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e09d      	b.n	800856c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008434:	0b9b      	lsrs	r3, r3, #14
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	b2da      	uxtb	r2, r3
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008446:	09db      	lsrs	r3, r3, #7
 8008448:	b2db      	uxtb	r3, r3
 800844a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800844e:	b2da      	uxtb	r2, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800845e:	b2da      	uxtb	r2, r3
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008468:	0fdb      	lsrs	r3, r3, #31
 800846a:	b2da      	uxtb	r2, r3
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008474:	0f5b      	lsrs	r3, r3, #29
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	b2da      	uxtb	r2, r3
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008486:	0e9b      	lsrs	r3, r3, #26
 8008488:	b2db      	uxtb	r3, r3
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	b2da      	uxtb	r2, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008498:	0d9b      	lsrs	r3, r3, #22
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084aa:	0d5b      	lsrs	r3, r3, #21
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084c6:	0c1b      	lsrs	r3, r3, #16
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084da:	0bdb      	lsrs	r3, r3, #15
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084ee:	0b9b      	lsrs	r3, r3, #14
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008502:	0b5b      	lsrs	r3, r3, #13
 8008504:	b2db      	uxtb	r3, r3
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	b2da      	uxtb	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008516:	0b1b      	lsrs	r3, r3, #12
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	b2da      	uxtb	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800852a:	0a9b      	lsrs	r3, r3, #10
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	b2da      	uxtb	r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008552:	085b      	lsrs	r3, r3, #1
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	1fe00fff 	.word	0x1fe00fff

0800857c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b094      	sub	sp, #80	@ 0x50
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b03      	cmp	r3, #3
 8008596:	d101      	bne.n	800859c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e0a7      	b.n	80086ec <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fb62 	bl	8008c6c <SD_SendSDStatus>
 80085a8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80085aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d011      	beq.n	80085d4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a4f      	ldr	r2, [pc, #316]	@ (80086f4 <HAL_SD_GetCardStatus+0x178>)
 80085b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085be:	431a      	orrs	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80085d2:	e070      	b.n	80086b6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	099b      	lsrs	r3, r3, #6
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	095b      	lsrs	r3, r3, #5
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	0a1b      	lsrs	r3, r3, #8
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	0e1b      	lsrs	r3, r3, #24
 8008604:	b29b      	uxth	r3, r3
 8008606:	4313      	orrs	r3, r2
 8008608:	b29a      	uxth	r2, r3
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	061a      	lsls	r2, r3, #24
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800861a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008624:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	0e1b      	lsrs	r3, r3, #24
 800862a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	b2da      	uxtb	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	b2da      	uxtb	r2, r3
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	0d1b      	lsrs	r3, r3, #20
 8008646:	b2db      	uxtb	r3, r3
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	b2da      	uxtb	r2, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	0c1b      	lsrs	r3, r3, #16
 8008656:	b29b      	uxth	r3, r3
 8008658:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800865c:	b29a      	uxth	r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	b29b      	uxth	r3, r3
 8008662:	b2db      	uxtb	r3, r3
 8008664:	b29b      	uxth	r3, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	b29a      	uxth	r2, r3
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	0a9b      	lsrs	r3, r3, #10
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008678:	b2da      	uxtb	r2, r3
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	0a1b      	lsrs	r3, r3, #8
 8008682:	b2db      	uxtb	r3, r3
 8008684:	f003 0303 	and.w	r3, r3, #3
 8008688:	b2da      	uxtb	r2, r3
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	091b      	lsrs	r3, r3, #4
 8008692:	b2db      	uxtb	r3, r3
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	b2da      	uxtb	r2, r3
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	0e1b      	lsrs	r3, r3, #24
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80086be:	4618      	mov	r0, r3
 80086c0:	f003 f89e 	bl	800b800 <SDMMC_CmdBlockLength>
 80086c4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80086c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00d      	beq.n	80086e8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a08      	ldr	r2, [pc, #32]	@ (80086f4 <HAL_SD_GetCardStatus+0x178>)
 80086d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086d8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 80086e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3750      	adds	r7, #80	@ 0x50
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	1fe00fff 	.word	0x1fe00fff

080086f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008750:	b590      	push	{r4, r7, lr}
 8008752:	b08d      	sub	sp, #52	@ 0x34
 8008754:	af02      	add	r7, sp, #8
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2203      	movs	r2, #3
 8008764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876c:	2b03      	cmp	r3, #3
 800876e:	d02e      	beq.n	80087ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008776:	d106      	bne.n	8008786 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800877c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	635a      	str	r2, [r3, #52]	@ 0x34
 8008784:	e029      	b.n	80087da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800878c:	d10a      	bne.n	80087a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fb64 	bl	8008e5c <SD_WideBus_Enable>
 8008794:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80087a2:	e01a      	b.n	80087da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fba1 	bl	8008ef2 <SD_WideBus_Disable>
 80087b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	431a      	orrs	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80087be:	e00c      	b.n	80087da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80087cc:	e005      	b.n	80087da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087d2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d007      	beq.n	80087f2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a5f      	ldr	r2, [pc, #380]	@ (8008964 <HAL_SD_ConfigWideBusOperation+0x214>)
 80087e8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80087f0:	e096      	b.n	8008920 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80087f2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80087f6:	f04f 0100 	mov.w	r1, #0
 80087fa:	f7fd fdef 	bl	80063dc <HAL_RCCEx_GetPeriphCLKFreq>
 80087fe:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 8083 	beq.w	800890e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695a      	ldr	r2, [r3, #20]
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	4950      	ldr	r1, [pc, #320]	@ (8008968 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008826:	fba1 1303 	umull	r1, r3, r1, r3
 800882a:	0e1b      	lsrs	r3, r3, #24
 800882c:	429a      	cmp	r2, r3
 800882e:	d303      	bcc.n	8008838 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	61bb      	str	r3, [r7, #24]
 8008836:	e05a      	b.n	80088ee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008840:	d103      	bne.n	800884a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	61bb      	str	r3, [r7, #24]
 8008848:	e051      	b.n	80088ee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800884e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008852:	d126      	bne.n	80088a2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10e      	bne.n	800887a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	4a43      	ldr	r2, [pc, #268]	@ (800896c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d906      	bls.n	8008872 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4a40      	ldr	r2, [pc, #256]	@ (8008968 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008868:	fba2 2303 	umull	r2, r3, r2, r3
 800886c:	0e5b      	lsrs	r3, r3, #25
 800886e:	61bb      	str	r3, [r7, #24]
 8008870:	e03d      	b.n	80088ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	e039      	b.n	80088ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	fbb2 f3f3 	udiv	r3, r2, r3
 8008886:	4a39      	ldr	r2, [pc, #228]	@ (800896c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d906      	bls.n	800889a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	4a36      	ldr	r2, [pc, #216]	@ (8008968 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008890:	fba2 2303 	umull	r2, r3, r2, r3
 8008894:	0e5b      	lsrs	r3, r3, #25
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	e029      	b.n	80088ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	61bb      	str	r3, [r7, #24]
 80088a0:	e025      	b.n	80088ee <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10e      	bne.n	80088c8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	4a30      	ldr	r2, [pc, #192]	@ (8008970 <HAL_SD_ConfigWideBusOperation+0x220>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d906      	bls.n	80088c0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008968 <HAL_SD_ConfigWideBusOperation+0x218>)
 80088b6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ba:	0e1b      	lsrs	r3, r3, #24
 80088bc:	61bb      	str	r3, [r7, #24]
 80088be:	e016      	b.n	80088ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	61bb      	str	r3, [r7, #24]
 80088c6:	e012      	b.n	80088ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d4:	4a26      	ldr	r2, [pc, #152]	@ (8008970 <HAL_SD_ConfigWideBusOperation+0x220>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d906      	bls.n	80088e8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	4a22      	ldr	r2, [pc, #136]	@ (8008968 <HAL_SD_ConfigWideBusOperation+0x218>)
 80088de:	fba2 2303 	umull	r2, r3, r2, r3
 80088e2:	0e1b      	lsrs	r3, r3, #24
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	e002      	b.n	80088ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681c      	ldr	r4, [r3, #0]
 80088f2:	466a      	mov	r2, sp
 80088f4:	f107 0314 	add.w	r3, r7, #20
 80088f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80088fc:	e882 0003 	stmia.w	r2, {r0, r1}
 8008900:	f107 0308 	add.w	r3, r7, #8
 8008904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008906:	4620      	mov	r0, r4
 8008908:	f002 fe9c 	bl	800b644 <SDMMC_Init>
 800890c:	e008      	b.n	8008920 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008912:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008928:	4618      	mov	r0, r3
 800892a:	f002 ff69 	bl	800b800 <SDMMC_CmdBlockLength>
 800892e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00c      	beq.n	8008950 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a0a      	ldr	r2, [pc, #40]	@ (8008964 <HAL_SD_ConfigWideBusOperation+0x214>)
 800893c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800895c:	4618      	mov	r0, r3
 800895e:	372c      	adds	r7, #44	@ 0x2c
 8008960:	46bd      	mov	sp, r7
 8008962:	bd90      	pop	{r4, r7, pc}
 8008964:	1fe00fff 	.word	0x1fe00fff
 8008968:	55e63b89 	.word	0x55e63b89
 800896c:	02faf080 	.word	0x02faf080
 8008970:	017d7840 	.word	0x017d7840

08008974 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008980:	f107 030c 	add.w	r3, r7, #12
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fa40 	bl	8008e0c <SD_SendStatus>
 800898c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	0a5b      	lsrs	r3, r3, #9
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80089aa:	693b      	ldr	r3, [r7, #16]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b090      	sub	sp, #64	@ 0x40
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80089c0:	f7fa fc50 	bl	8003264 <HAL_GetTick>
 80089c4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f002 fe93 	bl	800b6f6 <SDMMC_GetPowerState>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d102      	bne.n	80089dc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80089da:	e0b5      	b.n	8008b48 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d02e      	beq.n	8008a42 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f003 f8de 	bl	800bbaa <SDMMC_CmdSendCID>
 80089ee:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80089f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <SD_InitCard+0x46>
    {
      return errorstate;
 80089f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f8:	e0a6      	b.n	8008b48 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2100      	movs	r1, #0
 8008a00:	4618      	mov	r0, r3
 8008a02:	f002 febe 	bl	800b782 <SDMMC_GetResponse>
 8008a06:	4602      	mov	r2, r0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2104      	movs	r1, #4
 8008a12:	4618      	mov	r0, r3
 8008a14:	f002 feb5 	bl	800b782 <SDMMC_GetResponse>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2108      	movs	r1, #8
 8008a24:	4618      	mov	r0, r3
 8008a26:	f002 feac 	bl	800b782 <SDMMC_GetResponse>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	210c      	movs	r1, #12
 8008a36:	4618      	mov	r0, r3
 8008a38:	f002 fea3 	bl	800b782 <SDMMC_GetResponse>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d01d      	beq.n	8008a86 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008a4a:	e019      	b.n	8008a80 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f107 020a 	add.w	r2, r7, #10
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f003 f8e6 	bl	800bc28 <SDMMC_CmdSetRelAdd>
 8008a5c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a66:	e06f      	b.n	8008b48 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008a68:	f7fa fbfc 	bl	8003264 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d902      	bls.n	8008a80 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008a7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a7e:	e063      	b.n	8008b48 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008a80:	897b      	ldrh	r3, [r7, #10]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0e2      	beq.n	8008a4c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d036      	beq.n	8008afc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008a8e:	897b      	ldrh	r3, [r7, #10]
 8008a90:	461a      	mov	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a9e:	041b      	lsls	r3, r3, #16
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f003 f8a0 	bl	800bbe8 <SDMMC_CmdSendCSD>
 8008aa8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <SD_InitCard+0x100>
    {
      return errorstate;
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab2:	e049      	b.n	8008b48 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 fe61 	bl	800b782 <SDMMC_GetResponse>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2104      	movs	r1, #4
 8008acc:	4618      	mov	r0, r3
 8008ace:	f002 fe58 	bl	800b782 <SDMMC_GetResponse>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2108      	movs	r1, #8
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f002 fe4f 	bl	800b782 <SDMMC_GetResponse>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	210c      	movs	r1, #12
 8008af0:	4618      	mov	r0, r3
 8008af2:	f002 fe46 	bl	800b782 <SDMMC_GetResponse>
 8008af6:	4602      	mov	r2, r0
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2104      	movs	r1, #4
 8008b02:	4618      	mov	r0, r3
 8008b04:	f002 fe3d 	bl	800b782 <SDMMC_GetResponse>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	0d1a      	lsrs	r2, r3, #20
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008b10:	f107 030c 	add.w	r3, r7, #12
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff fb8c 	bl	8008234 <HAL_SD_GetCardCSD>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008b26:	e00f      	b.n	8008b48 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	4619      	mov	r1, r3
 8008b34:	4610      	mov	r0, r2
 8008b36:	f002 ff4f 	bl	800b9d8 <SDMMC_CmdSelDesel>
 8008b3a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <SD_InitCard+0x192>
  {
    return errorstate;
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	e000      	b.n	8008b48 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3740      	adds	r7, #64	@ 0x40
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f002 ff58 	bl	800ba1e <SDMMC_CmdGoIdleState>
 8008b6e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	e072      	b.n	8008c60 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f002 ff6b 	bl	800ba5a <SDMMC_CmdOperCond>
 8008b84:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b8c:	d10d      	bne.n	8008baa <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f002 ff40 	bl	800ba1e <SDMMC_CmdGoIdleState>
 8008b9e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <SD_PowerON+0x60>
    {
      return errorstate;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	e05a      	b.n	8008c60 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d137      	bne.n	8008c28 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f002 ff6b 	bl	800ba9a <SDMMC_CmdAppCommand>
 8008bc4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d02d      	beq.n	8008c28 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bcc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008bd0:	e046      	b.n	8008c60 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f002 ff5e 	bl	800ba9a <SDMMC_CmdAppCommand>
 8008bde:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <SD_PowerON+0x9a>
    {
      return errorstate;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	e03a      	b.n	8008c60 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	491e      	ldr	r1, [pc, #120]	@ (8008c68 <SD_PowerON+0x118>)
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f002 ff75 	bl	800bae0 <SDMMC_CmdAppOperCommand>
 8008bf6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d002      	beq.n	8008c04 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bfe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008c02:	e02d      	b.n	8008c60 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f002 fdb9 	bl	800b782 <SDMMC_GetResponse>
 8008c10:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	0fdb      	lsrs	r3, r3, #31
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d101      	bne.n	8008c1e <SD_PowerON+0xce>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e000      	b.n	8008c20 <SD_PowerON+0xd0>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	613b      	str	r3, [r7, #16]

    count++;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	3301      	adds	r3, #1
 8008c26:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d802      	bhi.n	8008c38 <SD_PowerON+0xe8>
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0cc      	beq.n	8008bd2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d902      	bls.n	8008c48 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008c42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c46:	e00b      	b.n	8008c60 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	c1100000 	.word	0xc1100000

08008c6c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08c      	sub	sp, #48	@ 0x30
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c76:	f7fa faf5 	bl	8003264 <HAL_GetTick>
 8008c7a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2100      	movs	r1, #0
 8008c86:	4618      	mov	r0, r3
 8008c88:	f002 fd7b 	bl	800b782 <SDMMC_GetResponse>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c96:	d102      	bne.n	8008c9e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008c9c:	e0b0      	b.n	8008e00 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2140      	movs	r1, #64	@ 0x40
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f002 fdab 	bl	800b800 <SDMMC_CmdBlockLength>
 8008caa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d005      	beq.n	8008cbe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	e0a0      	b.n	8008e00 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc6:	041b      	lsls	r3, r3, #16
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f002 fee5 	bl	800ba9a <SDMMC_CmdAppCommand>
 8008cd0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	e08d      	b.n	8008e00 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008cea:	2340      	movs	r3, #64	@ 0x40
 8008cec:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008cee:	2360      	movs	r3, #96	@ 0x60
 8008cf0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f107 0208 	add.w	r2, r7, #8
 8008d06:	4611      	mov	r1, r2
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f002 fd4d 	bl	800b7a8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f002 ffcd 	bl	800bcb2 <SDMMC_CmdStatusRegister>
 8008d18:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d02b      	beq.n	8008d78 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	e069      	b.n	8008e00 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d013      	beq.n	8008d62 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d3e:	e00d      	b.n	8008d5c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f002 fca7 	bl	800b698 <SDMMC_ReadFIFO>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4e:	601a      	str	r2, [r3, #0]
        pData++;
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	3304      	adds	r3, #4
 8008d54:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d58:	3301      	adds	r3, #1
 8008d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5e:	2b07      	cmp	r3, #7
 8008d60:	d9ee      	bls.n	8008d40 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008d62:	f7fa fa7f 	bl	8003264 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d102      	bne.n	8008d78 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008d76:	e043      	b.n	8008e00 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d7e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0d2      	beq.n	8008d2c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d8c:	f003 0308 	and.w	r3, r3, #8
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d94:	2308      	movs	r3, #8
 8008d96:	e033      	b.n	8008e00 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008da6:	2302      	movs	r3, #2
 8008da8:	e02a      	b.n	8008e00 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d017      	beq.n	8008de8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008db8:	2320      	movs	r3, #32
 8008dba:	e021      	b.n	8008e00 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f002 fc69 	bl	800b698 <SDMMC_ReadFIFO>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	601a      	str	r2, [r3, #0]
    pData++;
 8008dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dce:	3304      	adds	r3, #4
 8008dd0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008dd2:	f7fa fa47 	bl	8003264 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de0:	d102      	bne.n	8008de8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008de2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008de6:	e00b      	b.n	8008e00 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e2      	bne.n	8008dbc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a03      	ldr	r2, [pc, #12]	@ (8008e08 <SD_SendSDStatus+0x19c>)
 8008dfc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3730      	adds	r7, #48	@ 0x30
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	18000f3a 	.word	0x18000f3a

08008e0c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008e1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008e20:	e018      	b.n	8008e54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e2a:	041b      	lsls	r3, r3, #16
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f002 ff1c 	bl	800bc6c <SDMMC_CmdSendStatus>
 8008e34:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	e009      	b.n	8008e54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2100      	movs	r1, #0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 fc9b 	bl	800b782 <SDMMC_GetResponse>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2100      	movs	r1, #0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f002 fc85 	bl	800b782 <SDMMC_GetResponse>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e82:	d102      	bne.n	8008e8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008e88:	e02f      	b.n	8008eea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e8a:	f107 030c 	add.w	r3, r7, #12
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f879 	bl	8008f88 <SD_FindSCR>
 8008e96:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	e023      	b.n	8008eea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01c      	beq.n	8008ee6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eb4:	041b      	lsls	r3, r3, #16
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f002 fdee 	bl	800ba9a <SDMMC_CmdAppCommand>
 8008ebe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	e00f      	b.n	8008eea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2102      	movs	r1, #2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f002 fe25 	bl	800bb20 <SDMMC_CmdBusWidth>
 8008ed6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	e003      	b.n	8008eea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	e001      	b.n	8008eea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ee6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b086      	sub	sp, #24
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	2300      	movs	r3, #0
 8008f00:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2100      	movs	r1, #0
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f002 fc3a 	bl	800b782 <SDMMC_GetResponse>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f18:	d102      	bne.n	8008f20 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f1e:	e02f      	b.n	8008f80 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f20:	f107 030c 	add.w	r3, r7, #12
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f82e 	bl	8008f88 <SD_FindSCR>
 8008f2c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	e023      	b.n	8008f80 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d01c      	beq.n	8008f7c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4a:	041b      	lsls	r3, r3, #16
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f002 fda3 	bl	800ba9a <SDMMC_CmdAppCommand>
 8008f54:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	e00f      	b.n	8008f80 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f002 fdda 	bl	800bb20 <SDMMC_CmdBusWidth>
 8008f6c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	e003      	b.n	8008f80 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e001      	b.n	8008f80 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f7c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08e      	sub	sp, #56	@ 0x38
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f92:	f7fa f967 	bl	8003264 <HAL_GetTick>
 8008f96:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60bb      	str	r3, [r7, #8]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2108      	movs	r1, #8
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f002 fc26 	bl	800b800 <SDMMC_CmdBlockLength>
 8008fb4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbe:	e0ad      	b.n	800911c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fc8:	041b      	lsls	r3, r3, #16
 8008fca:	4619      	mov	r1, r3
 8008fcc:	4610      	mov	r0, r2
 8008fce:	f002 fd64 	bl	800ba9a <SDMMC_CmdAppCommand>
 8008fd2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <SD_FindSCR+0x56>
  {
    return errorstate;
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	e09e      	b.n	800911c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008fe8:	2330      	movs	r3, #48	@ 0x30
 8008fea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008fec:	2302      	movs	r3, #2
 8008fee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f107 0210 	add.w	r2, r7, #16
 8009000:	4611      	mov	r1, r2
 8009002:	4618      	mov	r0, r3
 8009004:	f002 fbd0 	bl	800b7a8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f002 fdaa 	bl	800bb66 <SDMMC_CmdSendSCR>
 8009012:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009016:	2b00      	cmp	r3, #0
 8009018:	d027      	beq.n	800906a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901c:	e07e      	b.n	800911c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009024:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d113      	bne.n	8009054 <SD_FindSCR+0xcc>
 800902c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800902e:	2b00      	cmp	r3, #0
 8009030:	d110      	bne.n	8009054 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f002 fb2e 	bl	800b698 <SDMMC_ReadFIFO>
 800903c:	4603      	mov	r3, r0
 800903e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4618      	mov	r0, r3
 8009046:	f002 fb27 	bl	800b698 <SDMMC_ReadFIFO>
 800904a:	4603      	mov	r3, r0
 800904c:	60fb      	str	r3, [r7, #12]
      index++;
 800904e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009050:	3301      	adds	r3, #1
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009054:	f7fa f906 	bl	8003264 <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d102      	bne.n	800906a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009064:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009068:	e058      	b.n	800911c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009070:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009074:	4013      	ands	r3, r2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0d1      	beq.n	800901e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2208      	movs	r2, #8
 800908e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009090:	2308      	movs	r3, #8
 8009092:	e043      	b.n	800911c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2202      	movs	r2, #2
 80090a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80090aa:	2302      	movs	r3, #2
 80090ac:	e036      	b.n	800911c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2220      	movs	r2, #32
 80090c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80090c4:	2320      	movs	r3, #32
 80090c6:	e029      	b.n	800911c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a15      	ldr	r2, [pc, #84]	@ (8009124 <SD_FindSCR+0x19c>)
 80090ce:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	061a      	lsls	r2, r3, #24
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	021b      	lsls	r3, r3, #8
 80090d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80090dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	0a1b      	lsrs	r3, r3, #8
 80090e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 80090e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	0e1b      	lsrs	r3, r3, #24
 80090ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 80090ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f0:	601a      	str	r2, [r3, #0]
    scr++;
 80090f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f4:	3304      	adds	r3, #4
 80090f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	061a      	lsls	r2, r3, #24
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	021b      	lsls	r3, r3, #8
 8009100:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009104:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	0a1b      	lsrs	r3, r3, #8
 800910a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800910e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	0e1b      	lsrs	r3, r3, #24
 8009114:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8009116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009118:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3738      	adds	r7, #56	@ 0x38
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	18000f3a 	.word	0x18000f3a

08009128 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e10f      	b.n	800935a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a87      	ldr	r2, [pc, #540]	@ (8009364 <HAL_SPI_Init+0x23c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00f      	beq.n	800916a <HAL_SPI_Init+0x42>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a86      	ldr	r2, [pc, #536]	@ (8009368 <HAL_SPI_Init+0x240>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00a      	beq.n	800916a <HAL_SPI_Init+0x42>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a84      	ldr	r2, [pc, #528]	@ (800936c <HAL_SPI_Init+0x244>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d005      	beq.n	800916a <HAL_SPI_Init+0x42>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	2b0f      	cmp	r3, #15
 8009164:	d901      	bls.n	800916a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e0f7      	b.n	800935a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f900 	bl	8009370 <SPI_GetPacketSize>
 8009170:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a7b      	ldr	r2, [pc, #492]	@ (8009364 <HAL_SPI_Init+0x23c>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d00c      	beq.n	8009196 <HAL_SPI_Init+0x6e>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a79      	ldr	r2, [pc, #484]	@ (8009368 <HAL_SPI_Init+0x240>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d007      	beq.n	8009196 <HAL_SPI_Init+0x6e>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a78      	ldr	r2, [pc, #480]	@ (800936c <HAL_SPI_Init+0x244>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d002      	beq.n	8009196 <HAL_SPI_Init+0x6e>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b08      	cmp	r3, #8
 8009194:	d811      	bhi.n	80091ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800919a:	4a72      	ldr	r2, [pc, #456]	@ (8009364 <HAL_SPI_Init+0x23c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d009      	beq.n	80091b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a70      	ldr	r2, [pc, #448]	@ (8009368 <HAL_SPI_Init+0x240>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d004      	beq.n	80091b4 <HAL_SPI_Init+0x8c>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a6f      	ldr	r2, [pc, #444]	@ (800936c <HAL_SPI_Init+0x244>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d104      	bne.n	80091be <HAL_SPI_Init+0x96>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b10      	cmp	r3, #16
 80091b8:	d901      	bls.n	80091be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e0cd      	b.n	800935a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d106      	bne.n	80091d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7f8 fa2c 	bl	8001630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0201 	bic.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80091fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009204:	d119      	bne.n	800923a <HAL_SPI_Init+0x112>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800920e:	d103      	bne.n	8009218 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009214:	2b00      	cmp	r3, #0
 8009216:	d008      	beq.n	800922a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10c      	bne.n	800923a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009224:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009228:	d107      	bne.n	800923a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009238:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00f      	beq.n	8009266 <HAL_SPI_Init+0x13e>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b06      	cmp	r3, #6
 800924c:	d90b      	bls.n	8009266 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	e007      	b.n	8009276 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009274:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69da      	ldr	r2, [r3, #28]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927e:	431a      	orrs	r2, r3
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	431a      	orrs	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009288:	ea42 0103 	orr.w	r1, r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68da      	ldr	r2, [r3, #12]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a0:	431a      	orrs	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	431a      	orrs	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	431a      	orrs	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	431a      	orrs	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	431a      	orrs	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092d6:	ea42 0103 	orr.w	r1, r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d113      	bne.n	8009316 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009300:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009314:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0201 	bic.w	r2, r2, #1
 8009324:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	40013000 	.word	0x40013000
 8009368:	40003800 	.word	0x40003800
 800936c:	40003c00 	.word	0x40003c00

08009370 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	3301      	adds	r3, #1
 8009380:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3307      	adds	r3, #7
 800938e:	08db      	lsrs	r3, r3, #3
 8009390:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	fb02 f303 	mul.w	r3, r2, r3
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e049      	b.n	800944c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7f8 fef3 	bl	80021b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3304      	adds	r3, #4
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f000 faa3 	bl	8009930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e049      	b.n	80094fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d106      	bne.n	8009480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f841 	bl	8009502 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3304      	adds	r3, #4
 8009490:	4619      	mov	r1, r3
 8009492:	4610      	mov	r0, r2
 8009494:	f000 fa4c 	bl	8009930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800950a:	bf00      	nop
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
	...

08009518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800952e:	2b01      	cmp	r3, #1
 8009530:	d101      	bne.n	8009536 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009532:	2302      	movs	r3, #2
 8009534:	e0ff      	b.n	8009736 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b14      	cmp	r3, #20
 8009542:	f200 80f0 	bhi.w	8009726 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009546:	a201      	add	r2, pc, #4	@ (adr r2, 800954c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	080095a1 	.word	0x080095a1
 8009550:	08009727 	.word	0x08009727
 8009554:	08009727 	.word	0x08009727
 8009558:	08009727 	.word	0x08009727
 800955c:	080095e1 	.word	0x080095e1
 8009560:	08009727 	.word	0x08009727
 8009564:	08009727 	.word	0x08009727
 8009568:	08009727 	.word	0x08009727
 800956c:	08009623 	.word	0x08009623
 8009570:	08009727 	.word	0x08009727
 8009574:	08009727 	.word	0x08009727
 8009578:	08009727 	.word	0x08009727
 800957c:	08009663 	.word	0x08009663
 8009580:	08009727 	.word	0x08009727
 8009584:	08009727 	.word	0x08009727
 8009588:	08009727 	.word	0x08009727
 800958c:	080096a5 	.word	0x080096a5
 8009590:	08009727 	.word	0x08009727
 8009594:	08009727 	.word	0x08009727
 8009598:	08009727 	.word	0x08009727
 800959c:	080096e5 	.word	0x080096e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fa62 	bl	8009a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	699a      	ldr	r2, [r3, #24]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0208 	orr.w	r2, r2, #8
 80095ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0204 	bic.w	r2, r2, #4
 80095ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6999      	ldr	r1, [r3, #24]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	691a      	ldr	r2, [r3, #16]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	619a      	str	r2, [r3, #24]
      break;
 80095de:	e0a5      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68b9      	ldr	r1, [r7, #8]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 fad2 	bl	8009b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	699a      	ldr	r2, [r3, #24]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699a      	ldr	r2, [r3, #24]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800960a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6999      	ldr	r1, [r3, #24]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	021a      	lsls	r2, r3, #8
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	619a      	str	r2, [r3, #24]
      break;
 8009620:	e084      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68b9      	ldr	r1, [r7, #8]
 8009628:	4618      	mov	r0, r3
 800962a:	f000 fb3b 	bl	8009ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69da      	ldr	r2, [r3, #28]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0208 	orr.w	r2, r2, #8
 800963c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	69da      	ldr	r2, [r3, #28]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 0204 	bic.w	r2, r2, #4
 800964c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69d9      	ldr	r1, [r3, #28]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	430a      	orrs	r2, r1
 800965e:	61da      	str	r2, [r3, #28]
      break;
 8009660:	e064      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fba3 	bl	8009db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	69da      	ldr	r2, [r3, #28]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800967c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	69da      	ldr	r2, [r3, #28]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800968c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69d9      	ldr	r1, [r3, #28]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	021a      	lsls	r2, r3, #8
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	61da      	str	r2, [r3, #28]
      break;
 80096a2:	e043      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68b9      	ldr	r1, [r7, #8]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fbec 	bl	8009e88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f042 0208 	orr.w	r2, r2, #8
 80096be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0204 	bic.w	r2, r2, #4
 80096ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	691a      	ldr	r2, [r3, #16]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80096e2:	e023      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68b9      	ldr	r1, [r7, #8]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fc30 	bl	8009f50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800970e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	021a      	lsls	r2, r3, #8
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009724:	e002      	b.n	800972c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	75fb      	strb	r3, [r7, #23]
      break;
 800972a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop

08009740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009754:	2b01      	cmp	r3, #1
 8009756:	d101      	bne.n	800975c <HAL_TIM_ConfigClockSource+0x1c>
 8009758:	2302      	movs	r3, #2
 800975a:	e0dc      	b.n	8009916 <HAL_TIM_ConfigClockSource+0x1d6>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	4b6a      	ldr	r3, [pc, #424]	@ (8009920 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009778:	4013      	ands	r3, r2
 800977a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a64      	ldr	r2, [pc, #400]	@ (8009924 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009792:	4293      	cmp	r3, r2
 8009794:	f000 80a9 	beq.w	80098ea <HAL_TIM_ConfigClockSource+0x1aa>
 8009798:	4a62      	ldr	r2, [pc, #392]	@ (8009924 <HAL_TIM_ConfigClockSource+0x1e4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	f200 80ae 	bhi.w	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 80097a0:	4a61      	ldr	r2, [pc, #388]	@ (8009928 <HAL_TIM_ConfigClockSource+0x1e8>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	f000 80a1 	beq.w	80098ea <HAL_TIM_ConfigClockSource+0x1aa>
 80097a8:	4a5f      	ldr	r2, [pc, #380]	@ (8009928 <HAL_TIM_ConfigClockSource+0x1e8>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	f200 80a6 	bhi.w	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 80097b0:	4a5e      	ldr	r2, [pc, #376]	@ (800992c <HAL_TIM_ConfigClockSource+0x1ec>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	f000 8099 	beq.w	80098ea <HAL_TIM_ConfigClockSource+0x1aa>
 80097b8:	4a5c      	ldr	r2, [pc, #368]	@ (800992c <HAL_TIM_ConfigClockSource+0x1ec>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	f200 809e 	bhi.w	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 80097c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097c4:	f000 8091 	beq.w	80098ea <HAL_TIM_ConfigClockSource+0x1aa>
 80097c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80097cc:	f200 8096 	bhi.w	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 80097d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097d4:	f000 8089 	beq.w	80098ea <HAL_TIM_ConfigClockSource+0x1aa>
 80097d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097dc:	f200 808e 	bhi.w	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 80097e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097e4:	d03e      	beq.n	8009864 <HAL_TIM_ConfigClockSource+0x124>
 80097e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097ea:	f200 8087 	bhi.w	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 80097ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097f2:	f000 8086 	beq.w	8009902 <HAL_TIM_ConfigClockSource+0x1c2>
 80097f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097fa:	d87f      	bhi.n	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 80097fc:	2b70      	cmp	r3, #112	@ 0x70
 80097fe:	d01a      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0xf6>
 8009800:	2b70      	cmp	r3, #112	@ 0x70
 8009802:	d87b      	bhi.n	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 8009804:	2b60      	cmp	r3, #96	@ 0x60
 8009806:	d050      	beq.n	80098aa <HAL_TIM_ConfigClockSource+0x16a>
 8009808:	2b60      	cmp	r3, #96	@ 0x60
 800980a:	d877      	bhi.n	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 800980c:	2b50      	cmp	r3, #80	@ 0x50
 800980e:	d03c      	beq.n	800988a <HAL_TIM_ConfigClockSource+0x14a>
 8009810:	2b50      	cmp	r3, #80	@ 0x50
 8009812:	d873      	bhi.n	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 8009814:	2b40      	cmp	r3, #64	@ 0x40
 8009816:	d058      	beq.n	80098ca <HAL_TIM_ConfigClockSource+0x18a>
 8009818:	2b40      	cmp	r3, #64	@ 0x40
 800981a:	d86f      	bhi.n	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 800981c:	2b30      	cmp	r3, #48	@ 0x30
 800981e:	d064      	beq.n	80098ea <HAL_TIM_ConfigClockSource+0x1aa>
 8009820:	2b30      	cmp	r3, #48	@ 0x30
 8009822:	d86b      	bhi.n	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 8009824:	2b20      	cmp	r3, #32
 8009826:	d060      	beq.n	80098ea <HAL_TIM_ConfigClockSource+0x1aa>
 8009828:	2b20      	cmp	r3, #32
 800982a:	d867      	bhi.n	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
 800982c:	2b00      	cmp	r3, #0
 800982e:	d05c      	beq.n	80098ea <HAL_TIM_ConfigClockSource+0x1aa>
 8009830:	2b10      	cmp	r3, #16
 8009832:	d05a      	beq.n	80098ea <HAL_TIM_ConfigClockSource+0x1aa>
 8009834:	e062      	b.n	80098fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009846:	f000 fc67 	bl	800a118 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	609a      	str	r2, [r3, #8]
      break;
 8009862:	e04f      	b.n	8009904 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009874:	f000 fc50 	bl	800a118 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009886:	609a      	str	r2, [r3, #8]
      break;
 8009888:	e03c      	b.n	8009904 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009896:	461a      	mov	r2, r3
 8009898:	f000 fbc0 	bl	800a01c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2150      	movs	r1, #80	@ 0x50
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fc1a 	bl	800a0dc <TIM_ITRx_SetConfig>
      break;
 80098a8:	e02c      	b.n	8009904 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098b6:	461a      	mov	r2, r3
 80098b8:	f000 fbdf 	bl	800a07a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2160      	movs	r1, #96	@ 0x60
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fc0a 	bl	800a0dc <TIM_ITRx_SetConfig>
      break;
 80098c8:	e01c      	b.n	8009904 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d6:	461a      	mov	r2, r3
 80098d8:	f000 fba0 	bl	800a01c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2140      	movs	r1, #64	@ 0x40
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fbfa 	bl	800a0dc <TIM_ITRx_SetConfig>
      break;
 80098e8:	e00c      	b.n	8009904 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4619      	mov	r1, r3
 80098f4:	4610      	mov	r0, r2
 80098f6:	f000 fbf1 	bl	800a0dc <TIM_ITRx_SetConfig>
      break;
 80098fa:	e003      	b.n	8009904 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009900:	e000      	b.n	8009904 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	ffceff88 	.word	0xffceff88
 8009924:	00100040 	.word	0x00100040
 8009928:	00100030 	.word	0x00100030
 800992c:	00100020 	.word	0x00100020

08009930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a43      	ldr	r2, [pc, #268]	@ (8009a50 <TIM_Base_SetConfig+0x120>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d013      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800994e:	d00f      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a40      	ldr	r2, [pc, #256]	@ (8009a54 <TIM_Base_SetConfig+0x124>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d00b      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a3f      	ldr	r2, [pc, #252]	@ (8009a58 <TIM_Base_SetConfig+0x128>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d007      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a3e      	ldr	r2, [pc, #248]	@ (8009a5c <TIM_Base_SetConfig+0x12c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d003      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a3d      	ldr	r2, [pc, #244]	@ (8009a60 <TIM_Base_SetConfig+0x130>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d108      	bne.n	8009982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a32      	ldr	r2, [pc, #200]	@ (8009a50 <TIM_Base_SetConfig+0x120>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d01f      	beq.n	80099ca <TIM_Base_SetConfig+0x9a>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009990:	d01b      	beq.n	80099ca <TIM_Base_SetConfig+0x9a>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a2f      	ldr	r2, [pc, #188]	@ (8009a54 <TIM_Base_SetConfig+0x124>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d017      	beq.n	80099ca <TIM_Base_SetConfig+0x9a>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a2e      	ldr	r2, [pc, #184]	@ (8009a58 <TIM_Base_SetConfig+0x128>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d013      	beq.n	80099ca <TIM_Base_SetConfig+0x9a>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a2d      	ldr	r2, [pc, #180]	@ (8009a5c <TIM_Base_SetConfig+0x12c>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d00f      	beq.n	80099ca <TIM_Base_SetConfig+0x9a>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a2c      	ldr	r2, [pc, #176]	@ (8009a60 <TIM_Base_SetConfig+0x130>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00b      	beq.n	80099ca <TIM_Base_SetConfig+0x9a>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a2b      	ldr	r2, [pc, #172]	@ (8009a64 <TIM_Base_SetConfig+0x134>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d007      	beq.n	80099ca <TIM_Base_SetConfig+0x9a>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a2a      	ldr	r2, [pc, #168]	@ (8009a68 <TIM_Base_SetConfig+0x138>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d003      	beq.n	80099ca <TIM_Base_SetConfig+0x9a>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a29      	ldr	r2, [pc, #164]	@ (8009a6c <TIM_Base_SetConfig+0x13c>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d108      	bne.n	80099dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	4313      	orrs	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	689a      	ldr	r2, [r3, #8]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a14      	ldr	r2, [pc, #80]	@ (8009a50 <TIM_Base_SetConfig+0x120>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00f      	beq.n	8009a22 <TIM_Base_SetConfig+0xf2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a16      	ldr	r2, [pc, #88]	@ (8009a60 <TIM_Base_SetConfig+0x130>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00b      	beq.n	8009a22 <TIM_Base_SetConfig+0xf2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a15      	ldr	r2, [pc, #84]	@ (8009a64 <TIM_Base_SetConfig+0x134>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d007      	beq.n	8009a22 <TIM_Base_SetConfig+0xf2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a14      	ldr	r2, [pc, #80]	@ (8009a68 <TIM_Base_SetConfig+0x138>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d003      	beq.n	8009a22 <TIM_Base_SetConfig+0xf2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a13      	ldr	r2, [pc, #76]	@ (8009a6c <TIM_Base_SetConfig+0x13c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d103      	bne.n	8009a2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f043 0204 	orr.w	r2, r3, #4
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	601a      	str	r2, [r3, #0]
}
 8009a42:	bf00      	nop
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	40010000 	.word	0x40010000
 8009a54:	40000400 	.word	0x40000400
 8009a58:	40000800 	.word	0x40000800
 8009a5c:	40000c00 	.word	0x40000c00
 8009a60:	40010400 	.word	0x40010400
 8009a64:	40014000 	.word	0x40014000
 8009a68:	40014400 	.word	0x40014400
 8009a6c:	40014800 	.word	0x40014800

08009a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	f023 0201 	bic.w	r2, r3, #1
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	4b37      	ldr	r3, [pc, #220]	@ (8009b78 <TIM_OC1_SetConfig+0x108>)
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f023 0303 	bic.w	r3, r3, #3
 8009aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f023 0302 	bic.w	r3, r3, #2
 8009ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8009b7c <TIM_OC1_SetConfig+0x10c>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d00f      	beq.n	8009aec <TIM_OC1_SetConfig+0x7c>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a2c      	ldr	r2, [pc, #176]	@ (8009b80 <TIM_OC1_SetConfig+0x110>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d00b      	beq.n	8009aec <TIM_OC1_SetConfig+0x7c>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8009b84 <TIM_OC1_SetConfig+0x114>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d007      	beq.n	8009aec <TIM_OC1_SetConfig+0x7c>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a2a      	ldr	r2, [pc, #168]	@ (8009b88 <TIM_OC1_SetConfig+0x118>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d003      	beq.n	8009aec <TIM_OC1_SetConfig+0x7c>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a29      	ldr	r2, [pc, #164]	@ (8009b8c <TIM_OC1_SetConfig+0x11c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d10c      	bne.n	8009b06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f023 0308 	bic.w	r3, r3, #8
 8009af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f023 0304 	bic.w	r3, r3, #4
 8009b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a1c      	ldr	r2, [pc, #112]	@ (8009b7c <TIM_OC1_SetConfig+0x10c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00f      	beq.n	8009b2e <TIM_OC1_SetConfig+0xbe>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a1b      	ldr	r2, [pc, #108]	@ (8009b80 <TIM_OC1_SetConfig+0x110>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00b      	beq.n	8009b2e <TIM_OC1_SetConfig+0xbe>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a1a      	ldr	r2, [pc, #104]	@ (8009b84 <TIM_OC1_SetConfig+0x114>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d007      	beq.n	8009b2e <TIM_OC1_SetConfig+0xbe>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a19      	ldr	r2, [pc, #100]	@ (8009b88 <TIM_OC1_SetConfig+0x118>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d003      	beq.n	8009b2e <TIM_OC1_SetConfig+0xbe>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a18      	ldr	r2, [pc, #96]	@ (8009b8c <TIM_OC1_SetConfig+0x11c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d111      	bne.n	8009b52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	621a      	str	r2, [r3, #32]
}
 8009b6c:	bf00      	nop
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	fffeff8f 	.word	0xfffeff8f
 8009b7c:	40010000 	.word	0x40010000
 8009b80:	40010400 	.word	0x40010400
 8009b84:	40014000 	.word	0x40014000
 8009b88:	40014400 	.word	0x40014400
 8009b8c:	40014800 	.word	0x40014800

08009b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a1b      	ldr	r3, [r3, #32]
 8009ba4:	f023 0210 	bic.w	r2, r3, #16
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	4b34      	ldr	r3, [pc, #208]	@ (8009c8c <TIM_OC2_SetConfig+0xfc>)
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	021b      	lsls	r3, r3, #8
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f023 0320 	bic.w	r3, r3, #32
 8009bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a29      	ldr	r2, [pc, #164]	@ (8009c90 <TIM_OC2_SetConfig+0x100>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d003      	beq.n	8009bf8 <TIM_OC2_SetConfig+0x68>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a28      	ldr	r2, [pc, #160]	@ (8009c94 <TIM_OC2_SetConfig+0x104>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d10d      	bne.n	8009c14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	011b      	lsls	r3, r3, #4
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a1e      	ldr	r2, [pc, #120]	@ (8009c90 <TIM_OC2_SetConfig+0x100>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d00f      	beq.n	8009c3c <TIM_OC2_SetConfig+0xac>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8009c94 <TIM_OC2_SetConfig+0x104>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d00b      	beq.n	8009c3c <TIM_OC2_SetConfig+0xac>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a1c      	ldr	r2, [pc, #112]	@ (8009c98 <TIM_OC2_SetConfig+0x108>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d007      	beq.n	8009c3c <TIM_OC2_SetConfig+0xac>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8009c9c <TIM_OC2_SetConfig+0x10c>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d003      	beq.n	8009c3c <TIM_OC2_SetConfig+0xac>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a1a      	ldr	r2, [pc, #104]	@ (8009ca0 <TIM_OC2_SetConfig+0x110>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d113      	bne.n	8009c64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	621a      	str	r2, [r3, #32]
}
 8009c7e:	bf00      	nop
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	feff8fff 	.word	0xfeff8fff
 8009c90:	40010000 	.word	0x40010000
 8009c94:	40010400 	.word	0x40010400
 8009c98:	40014000 	.word	0x40014000
 8009c9c:	40014400 	.word	0x40014400
 8009ca0:	40014800 	.word	0x40014800

08009ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	4b33      	ldr	r3, [pc, #204]	@ (8009d9c <TIM_OC3_SetConfig+0xf8>)
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0303 	bic.w	r3, r3, #3
 8009cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a28      	ldr	r2, [pc, #160]	@ (8009da0 <TIM_OC3_SetConfig+0xfc>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d003      	beq.n	8009d0a <TIM_OC3_SetConfig+0x66>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a27      	ldr	r2, [pc, #156]	@ (8009da4 <TIM_OC3_SetConfig+0x100>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d10d      	bne.n	8009d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	021b      	lsls	r3, r3, #8
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a1d      	ldr	r2, [pc, #116]	@ (8009da0 <TIM_OC3_SetConfig+0xfc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d00f      	beq.n	8009d4e <TIM_OC3_SetConfig+0xaa>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a1c      	ldr	r2, [pc, #112]	@ (8009da4 <TIM_OC3_SetConfig+0x100>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00b      	beq.n	8009d4e <TIM_OC3_SetConfig+0xaa>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a1b      	ldr	r2, [pc, #108]	@ (8009da8 <TIM_OC3_SetConfig+0x104>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d007      	beq.n	8009d4e <TIM_OC3_SetConfig+0xaa>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a1a      	ldr	r2, [pc, #104]	@ (8009dac <TIM_OC3_SetConfig+0x108>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d003      	beq.n	8009d4e <TIM_OC3_SetConfig+0xaa>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a19      	ldr	r2, [pc, #100]	@ (8009db0 <TIM_OC3_SetConfig+0x10c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d113      	bne.n	8009d76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	011b      	lsls	r3, r3, #4
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	621a      	str	r2, [r3, #32]
}
 8009d90:	bf00      	nop
 8009d92:	371c      	adds	r7, #28
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	fffeff8f 	.word	0xfffeff8f
 8009da0:	40010000 	.word	0x40010000
 8009da4:	40010400 	.word	0x40010400
 8009da8:	40014000 	.word	0x40014000
 8009dac:	40014400 	.word	0x40014400
 8009db0:	40014800 	.word	0x40014800

08009db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4b24      	ldr	r3, [pc, #144]	@ (8009e70 <TIM_OC4_SetConfig+0xbc>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	021b      	lsls	r3, r3, #8
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	031b      	lsls	r3, r3, #12
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a19      	ldr	r2, [pc, #100]	@ (8009e74 <TIM_OC4_SetConfig+0xc0>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d00f      	beq.n	8009e34 <TIM_OC4_SetConfig+0x80>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a18      	ldr	r2, [pc, #96]	@ (8009e78 <TIM_OC4_SetConfig+0xc4>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d00b      	beq.n	8009e34 <TIM_OC4_SetConfig+0x80>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a17      	ldr	r2, [pc, #92]	@ (8009e7c <TIM_OC4_SetConfig+0xc8>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d007      	beq.n	8009e34 <TIM_OC4_SetConfig+0x80>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a16      	ldr	r2, [pc, #88]	@ (8009e80 <TIM_OC4_SetConfig+0xcc>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d003      	beq.n	8009e34 <TIM_OC4_SetConfig+0x80>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a15      	ldr	r2, [pc, #84]	@ (8009e84 <TIM_OC4_SetConfig+0xd0>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d109      	bne.n	8009e48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	019b      	lsls	r3, r3, #6
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	621a      	str	r2, [r3, #32]
}
 8009e62:	bf00      	nop
 8009e64:	371c      	adds	r7, #28
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	feff8fff 	.word	0xfeff8fff
 8009e74:	40010000 	.word	0x40010000
 8009e78:	40010400 	.word	0x40010400
 8009e7c:	40014000 	.word	0x40014000
 8009e80:	40014400 	.word	0x40014400
 8009e84:	40014800 	.word	0x40014800

08009e88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	4b21      	ldr	r3, [pc, #132]	@ (8009f38 <TIM_OC5_SetConfig+0xb0>)
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009ec8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	041b      	lsls	r3, r3, #16
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a18      	ldr	r2, [pc, #96]	@ (8009f3c <TIM_OC5_SetConfig+0xb4>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d00f      	beq.n	8009efe <TIM_OC5_SetConfig+0x76>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a17      	ldr	r2, [pc, #92]	@ (8009f40 <TIM_OC5_SetConfig+0xb8>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d00b      	beq.n	8009efe <TIM_OC5_SetConfig+0x76>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a16      	ldr	r2, [pc, #88]	@ (8009f44 <TIM_OC5_SetConfig+0xbc>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d007      	beq.n	8009efe <TIM_OC5_SetConfig+0x76>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a15      	ldr	r2, [pc, #84]	@ (8009f48 <TIM_OC5_SetConfig+0xc0>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d003      	beq.n	8009efe <TIM_OC5_SetConfig+0x76>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a14      	ldr	r2, [pc, #80]	@ (8009f4c <TIM_OC5_SetConfig+0xc4>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d109      	bne.n	8009f12 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	021b      	lsls	r3, r3, #8
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	621a      	str	r2, [r3, #32]
}
 8009f2c:	bf00      	nop
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr
 8009f38:	fffeff8f 	.word	0xfffeff8f
 8009f3c:	40010000 	.word	0x40010000
 8009f40:	40010400 	.word	0x40010400
 8009f44:	40014000 	.word	0x40014000
 8009f48:	40014400 	.word	0x40014400
 8009f4c:	40014800 	.word	0x40014800

08009f50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4b22      	ldr	r3, [pc, #136]	@ (800a004 <TIM_OC6_SetConfig+0xb4>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	021b      	lsls	r3, r3, #8
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	051b      	lsls	r3, r3, #20
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a19      	ldr	r2, [pc, #100]	@ (800a008 <TIM_OC6_SetConfig+0xb8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d00f      	beq.n	8009fc8 <TIM_OC6_SetConfig+0x78>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a18      	ldr	r2, [pc, #96]	@ (800a00c <TIM_OC6_SetConfig+0xbc>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d00b      	beq.n	8009fc8 <TIM_OC6_SetConfig+0x78>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a17      	ldr	r2, [pc, #92]	@ (800a010 <TIM_OC6_SetConfig+0xc0>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d007      	beq.n	8009fc8 <TIM_OC6_SetConfig+0x78>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a16      	ldr	r2, [pc, #88]	@ (800a014 <TIM_OC6_SetConfig+0xc4>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d003      	beq.n	8009fc8 <TIM_OC6_SetConfig+0x78>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a15      	ldr	r2, [pc, #84]	@ (800a018 <TIM_OC6_SetConfig+0xc8>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d109      	bne.n	8009fdc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	029b      	lsls	r3, r3, #10
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	621a      	str	r2, [r3, #32]
}
 8009ff6:	bf00      	nop
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	feff8fff 	.word	0xfeff8fff
 800a008:	40010000 	.word	0x40010000
 800a00c:	40010400 	.word	0x40010400
 800a010:	40014000 	.word	0x40014000
 800a014:	40014400 	.word	0x40014400
 800a018:	40014800 	.word	0x40014800

0800a01c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a1b      	ldr	r3, [r3, #32]
 800a02c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	f023 0201 	bic.w	r2, r3, #1
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	011b      	lsls	r3, r3, #4
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	4313      	orrs	r3, r2
 800a050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	f023 030a 	bic.w	r3, r3, #10
 800a058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	4313      	orrs	r3, r2
 800a060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	621a      	str	r2, [r3, #32]
}
 800a06e:	bf00      	nop
 800a070:	371c      	adds	r7, #28
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b087      	sub	sp, #28
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	f023 0210 	bic.w	r2, r3, #16
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a0a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	031b      	lsls	r3, r3, #12
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a0b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	621a      	str	r2, [r3, #32]
}
 800a0ce:	bf00      	nop
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
	...

0800a0dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	4b09      	ldr	r3, [pc, #36]	@ (800a114 <TIM_ITRx_SetConfig+0x38>)
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	f043 0307 	orr.w	r3, r3, #7
 800a0fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	609a      	str	r2, [r3, #8]
}
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	ffcfff8f 	.word	0xffcfff8f

0800a118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	021a      	lsls	r2, r3, #8
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	431a      	orrs	r2, r3
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4313      	orrs	r3, r2
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	4313      	orrs	r3, r2
 800a144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	609a      	str	r2, [r3, #8]
}
 800a14c:	bf00      	nop
 800a14e:	371c      	adds	r7, #28
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d101      	bne.n	800a170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a16c:	2302      	movs	r3, #2
 800a16e:	e06d      	b.n	800a24c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a30      	ldr	r2, [pc, #192]	@ (800a258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d004      	beq.n	800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a2f      	ldr	r2, [pc, #188]	@ (800a25c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d108      	bne.n	800a1b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a1aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a20      	ldr	r2, [pc, #128]	@ (800a258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d022      	beq.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1e2:	d01d      	beq.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d018      	beq.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a1c      	ldr	r2, [pc, #112]	@ (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d013      	beq.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a1a      	ldr	r2, [pc, #104]	@ (800a268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d00e      	beq.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a15      	ldr	r2, [pc, #84]	@ (800a25c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d009      	beq.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a16      	ldr	r2, [pc, #88]	@ (800a26c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d004      	beq.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a15      	ldr	r2, [pc, #84]	@ (800a270 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d10c      	bne.n	800a23a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	4313      	orrs	r3, r2
 800a230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	40010000 	.word	0x40010000
 800a25c:	40010400 	.word	0x40010400
 800a260:	40000400 	.word	0x40000400
 800a264:	40000800 	.word	0x40000800
 800a268:	40000c00 	.word	0x40000c00
 800a26c:	40001800 	.word	0x40001800
 800a270:	40014000 	.word	0x40014000

0800a274 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d101      	bne.n	800a290 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a28c:	2302      	movs	r3, #2
 800a28e:	e065      	b.n	800a35c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	041b      	lsls	r3, r3, #16
 800a306:	4313      	orrs	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a16      	ldr	r2, [pc, #88]	@ (800a368 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d004      	beq.n	800a31e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a14      	ldr	r2, [pc, #80]	@ (800a36c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d115      	bne.n	800a34a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a328:	051b      	lsls	r3, r3, #20
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	69db      	ldr	r3, [r3, #28]
 800a338:	4313      	orrs	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	40010000 	.word	0x40010000
 800a36c:	40010400 	.word	0x40010400

0800a370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e042      	b.n	800a408 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d106      	bne.n	800a39a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7f8 fb0d 	bl	80029b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2224      	movs	r2, #36	@ 0x24
 800a39e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0201 	bic.w	r2, r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fe1e 	bl	800affc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f8b3 	bl	800a52c <UART_SetConfig>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d101      	bne.n	800a3d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e01b      	b.n	800a408 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a3de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689a      	ldr	r2, [r3, #8]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a3ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0201 	orr.w	r2, r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fe9d 	bl	800b140 <UART_CheckIdleState>
 800a406:	4603      	mov	r3, r0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08a      	sub	sp, #40	@ 0x28
 800a414:	af02      	add	r7, sp, #8
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a426:	2b20      	cmp	r3, #32
 800a428:	d17b      	bne.n	800a522 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <HAL_UART_Transmit+0x26>
 800a430:	88fb      	ldrh	r3, [r7, #6]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e074      	b.n	800a524 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2221      	movs	r2, #33	@ 0x21
 800a446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a44a:	f7f8 ff0b 	bl	8003264 <HAL_GetTick>
 800a44e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	88fa      	ldrh	r2, [r7, #6]
 800a454:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	88fa      	ldrh	r2, [r7, #6]
 800a45c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a468:	d108      	bne.n	800a47c <HAL_UART_Transmit+0x6c>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d104      	bne.n	800a47c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a472:	2300      	movs	r3, #0
 800a474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	61bb      	str	r3, [r7, #24]
 800a47a:	e003      	b.n	800a484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a480:	2300      	movs	r3, #0
 800a482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a484:	e030      	b.n	800a4e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2200      	movs	r2, #0
 800a48e:	2180      	movs	r1, #128	@ 0x80
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f000 feff 	bl	800b294 <UART_WaitOnFlagUntilTimeout>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e03d      	b.n	800a524 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10b      	bne.n	800a4c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	3302      	adds	r3, #2
 800a4c2:	61bb      	str	r3, [r7, #24]
 800a4c4:	e007      	b.n	800a4d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	781a      	ldrb	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1c8      	bne.n	800a486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2140      	movs	r1, #64	@ 0x40
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 fec8 	bl	800b294 <UART_WaitOnFlagUntilTimeout>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d005      	beq.n	800a516 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2220      	movs	r2, #32
 800a50e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e006      	b.n	800a524 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2220      	movs	r2, #32
 800a51a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	e000      	b.n	800a524 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a522:	2302      	movs	r3, #2
  }
}
 800a524:	4618      	mov	r0, r3
 800a526:	3720      	adds	r7, #32
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a52c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a530:	b092      	sub	sp, #72	@ 0x48
 800a532:	af00      	add	r7, sp, #0
 800a534:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	689a      	ldr	r2, [r3, #8]
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	431a      	orrs	r2, r3
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	431a      	orrs	r2, r3
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	4313      	orrs	r3, r2
 800a552:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	4bbe      	ldr	r3, [pc, #760]	@ (800a854 <UART_SetConfig+0x328>)
 800a55c:	4013      	ands	r3, r2
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	6812      	ldr	r2, [r2, #0]
 800a562:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a564:	430b      	orrs	r3, r1
 800a566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	68da      	ldr	r2, [r3, #12]
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4ab3      	ldr	r2, [pc, #716]	@ (800a858 <UART_SetConfig+0x32c>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d004      	beq.n	800a598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a594:	4313      	orrs	r3, r2
 800a596:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689a      	ldr	r2, [r3, #8]
 800a59e:	4baf      	ldr	r3, [pc, #700]	@ (800a85c <UART_SetConfig+0x330>)
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	6812      	ldr	r2, [r2, #0]
 800a5a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5a8:	430b      	orrs	r3, r1
 800a5aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b2:	f023 010f 	bic.w	r1, r3, #15
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4aa6      	ldr	r2, [pc, #664]	@ (800a860 <UART_SetConfig+0x334>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d177      	bne.n	800a6bc <UART_SetConfig+0x190>
 800a5cc:	4ba5      	ldr	r3, [pc, #660]	@ (800a864 <UART_SetConfig+0x338>)
 800a5ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5d4:	2b28      	cmp	r3, #40	@ 0x28
 800a5d6:	d86d      	bhi.n	800a6b4 <UART_SetConfig+0x188>
 800a5d8:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e0 <UART_SetConfig+0xb4>)
 800a5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5de:	bf00      	nop
 800a5e0:	0800a685 	.word	0x0800a685
 800a5e4:	0800a6b5 	.word	0x0800a6b5
 800a5e8:	0800a6b5 	.word	0x0800a6b5
 800a5ec:	0800a6b5 	.word	0x0800a6b5
 800a5f0:	0800a6b5 	.word	0x0800a6b5
 800a5f4:	0800a6b5 	.word	0x0800a6b5
 800a5f8:	0800a6b5 	.word	0x0800a6b5
 800a5fc:	0800a6b5 	.word	0x0800a6b5
 800a600:	0800a68d 	.word	0x0800a68d
 800a604:	0800a6b5 	.word	0x0800a6b5
 800a608:	0800a6b5 	.word	0x0800a6b5
 800a60c:	0800a6b5 	.word	0x0800a6b5
 800a610:	0800a6b5 	.word	0x0800a6b5
 800a614:	0800a6b5 	.word	0x0800a6b5
 800a618:	0800a6b5 	.word	0x0800a6b5
 800a61c:	0800a6b5 	.word	0x0800a6b5
 800a620:	0800a695 	.word	0x0800a695
 800a624:	0800a6b5 	.word	0x0800a6b5
 800a628:	0800a6b5 	.word	0x0800a6b5
 800a62c:	0800a6b5 	.word	0x0800a6b5
 800a630:	0800a6b5 	.word	0x0800a6b5
 800a634:	0800a6b5 	.word	0x0800a6b5
 800a638:	0800a6b5 	.word	0x0800a6b5
 800a63c:	0800a6b5 	.word	0x0800a6b5
 800a640:	0800a69d 	.word	0x0800a69d
 800a644:	0800a6b5 	.word	0x0800a6b5
 800a648:	0800a6b5 	.word	0x0800a6b5
 800a64c:	0800a6b5 	.word	0x0800a6b5
 800a650:	0800a6b5 	.word	0x0800a6b5
 800a654:	0800a6b5 	.word	0x0800a6b5
 800a658:	0800a6b5 	.word	0x0800a6b5
 800a65c:	0800a6b5 	.word	0x0800a6b5
 800a660:	0800a6a5 	.word	0x0800a6a5
 800a664:	0800a6b5 	.word	0x0800a6b5
 800a668:	0800a6b5 	.word	0x0800a6b5
 800a66c:	0800a6b5 	.word	0x0800a6b5
 800a670:	0800a6b5 	.word	0x0800a6b5
 800a674:	0800a6b5 	.word	0x0800a6b5
 800a678:	0800a6b5 	.word	0x0800a6b5
 800a67c:	0800a6b5 	.word	0x0800a6b5
 800a680:	0800a6ad 	.word	0x0800a6ad
 800a684:	2301      	movs	r3, #1
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e222      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a68c:	2304      	movs	r3, #4
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e21e      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a694:	2308      	movs	r3, #8
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e21a      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a69c:	2310      	movs	r3, #16
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a2:	e216      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a6a4:	2320      	movs	r3, #32
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e212      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a6ac:	2340      	movs	r3, #64	@ 0x40
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e20e      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a6b4:	2380      	movs	r3, #128	@ 0x80
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e20a      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a69      	ldr	r2, [pc, #420]	@ (800a868 <UART_SetConfig+0x33c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d130      	bne.n	800a728 <UART_SetConfig+0x1fc>
 800a6c6:	4b67      	ldr	r3, [pc, #412]	@ (800a864 <UART_SetConfig+0x338>)
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d826      	bhi.n	800a720 <UART_SetConfig+0x1f4>
 800a6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d8 <UART_SetConfig+0x1ac>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a6f1 	.word	0x0800a6f1
 800a6dc:	0800a6f9 	.word	0x0800a6f9
 800a6e0:	0800a701 	.word	0x0800a701
 800a6e4:	0800a709 	.word	0x0800a709
 800a6e8:	0800a711 	.word	0x0800a711
 800a6ec:	0800a719 	.word	0x0800a719
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e1ec      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a6f8:	2304      	movs	r3, #4
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e1e8      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a700:	2308      	movs	r3, #8
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e1e4      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a708:	2310      	movs	r3, #16
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70e:	e1e0      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a710:	2320      	movs	r3, #32
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e1dc      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a718:	2340      	movs	r3, #64	@ 0x40
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e1d8      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a720:	2380      	movs	r3, #128	@ 0x80
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a726:	e1d4      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a4f      	ldr	r2, [pc, #316]	@ (800a86c <UART_SetConfig+0x340>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d130      	bne.n	800a794 <UART_SetConfig+0x268>
 800a732:	4b4c      	ldr	r3, [pc, #304]	@ (800a864 <UART_SetConfig+0x338>)
 800a734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	d826      	bhi.n	800a78c <UART_SetConfig+0x260>
 800a73e:	a201      	add	r2, pc, #4	@ (adr r2, 800a744 <UART_SetConfig+0x218>)
 800a740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a744:	0800a75d 	.word	0x0800a75d
 800a748:	0800a765 	.word	0x0800a765
 800a74c:	0800a76d 	.word	0x0800a76d
 800a750:	0800a775 	.word	0x0800a775
 800a754:	0800a77d 	.word	0x0800a77d
 800a758:	0800a785 	.word	0x0800a785
 800a75c:	2300      	movs	r3, #0
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e1b6      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a764:	2304      	movs	r3, #4
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e1b2      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a76c:	2308      	movs	r3, #8
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e1ae      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a774:	2310      	movs	r3, #16
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77a:	e1aa      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a77c:	2320      	movs	r3, #32
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e1a6      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a784:	2340      	movs	r3, #64	@ 0x40
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e1a2      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a78c:	2380      	movs	r3, #128	@ 0x80
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e19e      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a35      	ldr	r2, [pc, #212]	@ (800a870 <UART_SetConfig+0x344>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d130      	bne.n	800a800 <UART_SetConfig+0x2d4>
 800a79e:	4b31      	ldr	r3, [pc, #196]	@ (800a864 <UART_SetConfig+0x338>)
 800a7a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b05      	cmp	r3, #5
 800a7a8:	d826      	bhi.n	800a7f8 <UART_SetConfig+0x2cc>
 800a7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b0 <UART_SetConfig+0x284>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a7c9 	.word	0x0800a7c9
 800a7b4:	0800a7d1 	.word	0x0800a7d1
 800a7b8:	0800a7d9 	.word	0x0800a7d9
 800a7bc:	0800a7e1 	.word	0x0800a7e1
 800a7c0:	0800a7e9 	.word	0x0800a7e9
 800a7c4:	0800a7f1 	.word	0x0800a7f1
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	e180      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d6:	e17c      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a7d8:	2308      	movs	r3, #8
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7de:	e178      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e6:	e174      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a7e8:	2320      	movs	r3, #32
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e170      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a7f0:	2340      	movs	r3, #64	@ 0x40
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e16c      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a7f8:	2380      	movs	r3, #128	@ 0x80
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e168      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a1b      	ldr	r2, [pc, #108]	@ (800a874 <UART_SetConfig+0x348>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d142      	bne.n	800a890 <UART_SetConfig+0x364>
 800a80a:	4b16      	ldr	r3, [pc, #88]	@ (800a864 <UART_SetConfig+0x338>)
 800a80c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a80e:	f003 0307 	and.w	r3, r3, #7
 800a812:	2b05      	cmp	r3, #5
 800a814:	d838      	bhi.n	800a888 <UART_SetConfig+0x35c>
 800a816:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <UART_SetConfig+0x2f0>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a835 	.word	0x0800a835
 800a820:	0800a83d 	.word	0x0800a83d
 800a824:	0800a845 	.word	0x0800a845
 800a828:	0800a84d 	.word	0x0800a84d
 800a82c:	0800a879 	.word	0x0800a879
 800a830:	0800a881 	.word	0x0800a881
 800a834:	2300      	movs	r3, #0
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83a:	e14a      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a83c:	2304      	movs	r3, #4
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a842:	e146      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a844:	2308      	movs	r3, #8
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84a:	e142      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a852:	e13e      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a854:	cfff69f3 	.word	0xcfff69f3
 800a858:	58000c00 	.word	0x58000c00
 800a85c:	11fff4ff 	.word	0x11fff4ff
 800a860:	40011000 	.word	0x40011000
 800a864:	58024400 	.word	0x58024400
 800a868:	40004400 	.word	0x40004400
 800a86c:	40004800 	.word	0x40004800
 800a870:	40004c00 	.word	0x40004c00
 800a874:	40005000 	.word	0x40005000
 800a878:	2320      	movs	r3, #32
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87e:	e128      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a880:	2340      	movs	r3, #64	@ 0x40
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a886:	e124      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a888:	2380      	movs	r3, #128	@ 0x80
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88e:	e120      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4acb      	ldr	r2, [pc, #812]	@ (800abc4 <UART_SetConfig+0x698>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d176      	bne.n	800a988 <UART_SetConfig+0x45c>
 800a89a:	4bcb      	ldr	r3, [pc, #812]	@ (800abc8 <UART_SetConfig+0x69c>)
 800a89c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a89e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8a2:	2b28      	cmp	r3, #40	@ 0x28
 800a8a4:	d86c      	bhi.n	800a980 <UART_SetConfig+0x454>
 800a8a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ac <UART_SetConfig+0x380>)
 800a8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ac:	0800a951 	.word	0x0800a951
 800a8b0:	0800a981 	.word	0x0800a981
 800a8b4:	0800a981 	.word	0x0800a981
 800a8b8:	0800a981 	.word	0x0800a981
 800a8bc:	0800a981 	.word	0x0800a981
 800a8c0:	0800a981 	.word	0x0800a981
 800a8c4:	0800a981 	.word	0x0800a981
 800a8c8:	0800a981 	.word	0x0800a981
 800a8cc:	0800a959 	.word	0x0800a959
 800a8d0:	0800a981 	.word	0x0800a981
 800a8d4:	0800a981 	.word	0x0800a981
 800a8d8:	0800a981 	.word	0x0800a981
 800a8dc:	0800a981 	.word	0x0800a981
 800a8e0:	0800a981 	.word	0x0800a981
 800a8e4:	0800a981 	.word	0x0800a981
 800a8e8:	0800a981 	.word	0x0800a981
 800a8ec:	0800a961 	.word	0x0800a961
 800a8f0:	0800a981 	.word	0x0800a981
 800a8f4:	0800a981 	.word	0x0800a981
 800a8f8:	0800a981 	.word	0x0800a981
 800a8fc:	0800a981 	.word	0x0800a981
 800a900:	0800a981 	.word	0x0800a981
 800a904:	0800a981 	.word	0x0800a981
 800a908:	0800a981 	.word	0x0800a981
 800a90c:	0800a969 	.word	0x0800a969
 800a910:	0800a981 	.word	0x0800a981
 800a914:	0800a981 	.word	0x0800a981
 800a918:	0800a981 	.word	0x0800a981
 800a91c:	0800a981 	.word	0x0800a981
 800a920:	0800a981 	.word	0x0800a981
 800a924:	0800a981 	.word	0x0800a981
 800a928:	0800a981 	.word	0x0800a981
 800a92c:	0800a971 	.word	0x0800a971
 800a930:	0800a981 	.word	0x0800a981
 800a934:	0800a981 	.word	0x0800a981
 800a938:	0800a981 	.word	0x0800a981
 800a93c:	0800a981 	.word	0x0800a981
 800a940:	0800a981 	.word	0x0800a981
 800a944:	0800a981 	.word	0x0800a981
 800a948:	0800a981 	.word	0x0800a981
 800a94c:	0800a979 	.word	0x0800a979
 800a950:	2301      	movs	r3, #1
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a956:	e0bc      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a958:	2304      	movs	r3, #4
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95e:	e0b8      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a960:	2308      	movs	r3, #8
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a966:	e0b4      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a968:	2310      	movs	r3, #16
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96e:	e0b0      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a970:	2320      	movs	r3, #32
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a976:	e0ac      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a978:	2340      	movs	r3, #64	@ 0x40
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97e:	e0a8      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a980:	2380      	movs	r3, #128	@ 0x80
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a986:	e0a4      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a8f      	ldr	r2, [pc, #572]	@ (800abcc <UART_SetConfig+0x6a0>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d130      	bne.n	800a9f4 <UART_SetConfig+0x4c8>
 800a992:	4b8d      	ldr	r3, [pc, #564]	@ (800abc8 <UART_SetConfig+0x69c>)
 800a994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	2b05      	cmp	r3, #5
 800a99c:	d826      	bhi.n	800a9ec <UART_SetConfig+0x4c0>
 800a99e:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a4 <UART_SetConfig+0x478>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800a9bd 	.word	0x0800a9bd
 800a9a8:	0800a9c5 	.word	0x0800a9c5
 800a9ac:	0800a9cd 	.word	0x0800a9cd
 800a9b0:	0800a9d5 	.word	0x0800a9d5
 800a9b4:	0800a9dd 	.word	0x0800a9dd
 800a9b8:	0800a9e5 	.word	0x0800a9e5
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9c2:	e086      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a9c4:	2304      	movs	r3, #4
 800a9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ca:	e082      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a9cc:	2308      	movs	r3, #8
 800a9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9d2:	e07e      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a9d4:	2310      	movs	r3, #16
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9da:	e07a      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a9dc:	2320      	movs	r3, #32
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e2:	e076      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a9e4:	2340      	movs	r3, #64	@ 0x40
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ea:	e072      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a9ec:	2380      	movs	r3, #128	@ 0x80
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f2:	e06e      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a75      	ldr	r2, [pc, #468]	@ (800abd0 <UART_SetConfig+0x6a4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d130      	bne.n	800aa60 <UART_SetConfig+0x534>
 800a9fe:	4b72      	ldr	r3, [pc, #456]	@ (800abc8 <UART_SetConfig+0x69c>)
 800aa00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa02:	f003 0307 	and.w	r3, r3, #7
 800aa06:	2b05      	cmp	r3, #5
 800aa08:	d826      	bhi.n	800aa58 <UART_SetConfig+0x52c>
 800aa0a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa10 <UART_SetConfig+0x4e4>)
 800aa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa10:	0800aa29 	.word	0x0800aa29
 800aa14:	0800aa31 	.word	0x0800aa31
 800aa18:	0800aa39 	.word	0x0800aa39
 800aa1c:	0800aa41 	.word	0x0800aa41
 800aa20:	0800aa49 	.word	0x0800aa49
 800aa24:	0800aa51 	.word	0x0800aa51
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa2e:	e050      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aa30:	2304      	movs	r3, #4
 800aa32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa36:	e04c      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aa38:	2308      	movs	r3, #8
 800aa3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa3e:	e048      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aa40:	2310      	movs	r3, #16
 800aa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa46:	e044      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aa48:	2320      	movs	r3, #32
 800aa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4e:	e040      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aa50:	2340      	movs	r3, #64	@ 0x40
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa56:	e03c      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aa58:	2380      	movs	r3, #128	@ 0x80
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5e:	e038      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a5b      	ldr	r2, [pc, #364]	@ (800abd4 <UART_SetConfig+0x6a8>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d130      	bne.n	800aacc <UART_SetConfig+0x5a0>
 800aa6a:	4b57      	ldr	r3, [pc, #348]	@ (800abc8 <UART_SetConfig+0x69c>)
 800aa6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa6e:	f003 0307 	and.w	r3, r3, #7
 800aa72:	2b05      	cmp	r3, #5
 800aa74:	d826      	bhi.n	800aac4 <UART_SetConfig+0x598>
 800aa76:	a201      	add	r2, pc, #4	@ (adr r2, 800aa7c <UART_SetConfig+0x550>)
 800aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7c:	0800aa95 	.word	0x0800aa95
 800aa80:	0800aa9d 	.word	0x0800aa9d
 800aa84:	0800aaa5 	.word	0x0800aaa5
 800aa88:	0800aaad 	.word	0x0800aaad
 800aa8c:	0800aab5 	.word	0x0800aab5
 800aa90:	0800aabd 	.word	0x0800aabd
 800aa94:	2302      	movs	r3, #2
 800aa96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa9a:	e01a      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aa9c:	2304      	movs	r3, #4
 800aa9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaa2:	e016      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aaa4:	2308      	movs	r3, #8
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaaa:	e012      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aaac:	2310      	movs	r3, #16
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab2:	e00e      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aab4:	2320      	movs	r3, #32
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaba:	e00a      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aabc:	2340      	movs	r3, #64	@ 0x40
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac2:	e006      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aac4:	2380      	movs	r3, #128	@ 0x80
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaca:	e002      	b.n	800aad2 <UART_SetConfig+0x5a6>
 800aacc:	2380      	movs	r3, #128	@ 0x80
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a3f      	ldr	r2, [pc, #252]	@ (800abd4 <UART_SetConfig+0x6a8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	f040 80f8 	bne.w	800acce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aade:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aae2:	2b20      	cmp	r3, #32
 800aae4:	dc46      	bgt.n	800ab74 <UART_SetConfig+0x648>
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	f2c0 8082 	blt.w	800abf0 <UART_SetConfig+0x6c4>
 800aaec:	3b02      	subs	r3, #2
 800aaee:	2b1e      	cmp	r3, #30
 800aaf0:	d87e      	bhi.n	800abf0 <UART_SetConfig+0x6c4>
 800aaf2:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf8 <UART_SetConfig+0x5cc>)
 800aaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf8:	0800ab7b 	.word	0x0800ab7b
 800aafc:	0800abf1 	.word	0x0800abf1
 800ab00:	0800ab83 	.word	0x0800ab83
 800ab04:	0800abf1 	.word	0x0800abf1
 800ab08:	0800abf1 	.word	0x0800abf1
 800ab0c:	0800abf1 	.word	0x0800abf1
 800ab10:	0800ab93 	.word	0x0800ab93
 800ab14:	0800abf1 	.word	0x0800abf1
 800ab18:	0800abf1 	.word	0x0800abf1
 800ab1c:	0800abf1 	.word	0x0800abf1
 800ab20:	0800abf1 	.word	0x0800abf1
 800ab24:	0800abf1 	.word	0x0800abf1
 800ab28:	0800abf1 	.word	0x0800abf1
 800ab2c:	0800abf1 	.word	0x0800abf1
 800ab30:	0800aba3 	.word	0x0800aba3
 800ab34:	0800abf1 	.word	0x0800abf1
 800ab38:	0800abf1 	.word	0x0800abf1
 800ab3c:	0800abf1 	.word	0x0800abf1
 800ab40:	0800abf1 	.word	0x0800abf1
 800ab44:	0800abf1 	.word	0x0800abf1
 800ab48:	0800abf1 	.word	0x0800abf1
 800ab4c:	0800abf1 	.word	0x0800abf1
 800ab50:	0800abf1 	.word	0x0800abf1
 800ab54:	0800abf1 	.word	0x0800abf1
 800ab58:	0800abf1 	.word	0x0800abf1
 800ab5c:	0800abf1 	.word	0x0800abf1
 800ab60:	0800abf1 	.word	0x0800abf1
 800ab64:	0800abf1 	.word	0x0800abf1
 800ab68:	0800abf1 	.word	0x0800abf1
 800ab6c:	0800abf1 	.word	0x0800abf1
 800ab70:	0800abe3 	.word	0x0800abe3
 800ab74:	2b40      	cmp	r3, #64	@ 0x40
 800ab76:	d037      	beq.n	800abe8 <UART_SetConfig+0x6bc>
 800ab78:	e03a      	b.n	800abf0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab7a:	f7fc f9af 	bl	8006edc <HAL_RCCEx_GetD3PCLK1Freq>
 800ab7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab80:	e03c      	b.n	800abfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fc f9be 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab90:	e034      	b.n	800abfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab92:	f107 0318 	add.w	r3, r7, #24
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fc fb0a 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba0:	e02c      	b.n	800abfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aba2:	4b09      	ldr	r3, [pc, #36]	@ (800abc8 <UART_SetConfig+0x69c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d016      	beq.n	800abdc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abae:	4b06      	ldr	r3, [pc, #24]	@ (800abc8 <UART_SetConfig+0x69c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	08db      	lsrs	r3, r3, #3
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	4a07      	ldr	r2, [pc, #28]	@ (800abd8 <UART_SetConfig+0x6ac>)
 800abba:	fa22 f303 	lsr.w	r3, r2, r3
 800abbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abc0:	e01c      	b.n	800abfc <UART_SetConfig+0x6d0>
 800abc2:	bf00      	nop
 800abc4:	40011400 	.word	0x40011400
 800abc8:	58024400 	.word	0x58024400
 800abcc:	40007800 	.word	0x40007800
 800abd0:	40007c00 	.word	0x40007c00
 800abd4:	58000c00 	.word	0x58000c00
 800abd8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800abdc:	4b9d      	ldr	r3, [pc, #628]	@ (800ae54 <UART_SetConfig+0x928>)
 800abde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abe0:	e00c      	b.n	800abfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abe2:	4b9d      	ldr	r3, [pc, #628]	@ (800ae58 <UART_SetConfig+0x92c>)
 800abe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abe6:	e009      	b.n	800abfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abee:	e005      	b.n	800abfc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800abfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f000 81de 	beq.w	800afc0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac08:	4a94      	ldr	r2, [pc, #592]	@ (800ae5c <UART_SetConfig+0x930>)
 800ac0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac12:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac16:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	4413      	add	r3, r2
 800ac22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d305      	bcc.n	800ac34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d903      	bls.n	800ac3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac3a:	e1c1      	b.n	800afc0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac3e:	2200      	movs	r2, #0
 800ac40:	60bb      	str	r3, [r7, #8]
 800ac42:	60fa      	str	r2, [r7, #12]
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac48:	4a84      	ldr	r2, [pc, #528]	@ (800ae5c <UART_SetConfig+0x930>)
 800ac4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	2200      	movs	r2, #0
 800ac52:	603b      	str	r3, [r7, #0]
 800ac54:	607a      	str	r2, [r7, #4]
 800ac56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac5e:	f7f5 fb97 	bl	8000390 <__aeabi_uldivmod>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4610      	mov	r0, r2
 800ac68:	4619      	mov	r1, r3
 800ac6a:	f04f 0200 	mov.w	r2, #0
 800ac6e:	f04f 0300 	mov.w	r3, #0
 800ac72:	020b      	lsls	r3, r1, #8
 800ac74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac78:	0202      	lsls	r2, r0, #8
 800ac7a:	6979      	ldr	r1, [r7, #20]
 800ac7c:	6849      	ldr	r1, [r1, #4]
 800ac7e:	0849      	lsrs	r1, r1, #1
 800ac80:	2000      	movs	r0, #0
 800ac82:	460c      	mov	r4, r1
 800ac84:	4605      	mov	r5, r0
 800ac86:	eb12 0804 	adds.w	r8, r2, r4
 800ac8a:	eb43 0905 	adc.w	r9, r3, r5
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	469a      	mov	sl, r3
 800ac96:	4693      	mov	fp, r2
 800ac98:	4652      	mov	r2, sl
 800ac9a:	465b      	mov	r3, fp
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f7f5 fb76 	bl	8000390 <__aeabi_uldivmod>
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	4613      	mov	r3, r2
 800acaa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acb2:	d308      	bcc.n	800acc6 <UART_SetConfig+0x79a>
 800acb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acba:	d204      	bcs.n	800acc6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acc2:	60da      	str	r2, [r3, #12]
 800acc4:	e17c      	b.n	800afc0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800accc:	e178      	b.n	800afc0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acd6:	f040 80c5 	bne.w	800ae64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800acda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800acde:	2b20      	cmp	r3, #32
 800ace0:	dc48      	bgt.n	800ad74 <UART_SetConfig+0x848>
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	db7b      	blt.n	800adde <UART_SetConfig+0x8b2>
 800ace6:	2b20      	cmp	r3, #32
 800ace8:	d879      	bhi.n	800adde <UART_SetConfig+0x8b2>
 800acea:	a201      	add	r2, pc, #4	@ (adr r2, 800acf0 <UART_SetConfig+0x7c4>)
 800acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf0:	0800ad7b 	.word	0x0800ad7b
 800acf4:	0800ad83 	.word	0x0800ad83
 800acf8:	0800addf 	.word	0x0800addf
 800acfc:	0800addf 	.word	0x0800addf
 800ad00:	0800ad8b 	.word	0x0800ad8b
 800ad04:	0800addf 	.word	0x0800addf
 800ad08:	0800addf 	.word	0x0800addf
 800ad0c:	0800addf 	.word	0x0800addf
 800ad10:	0800ad9b 	.word	0x0800ad9b
 800ad14:	0800addf 	.word	0x0800addf
 800ad18:	0800addf 	.word	0x0800addf
 800ad1c:	0800addf 	.word	0x0800addf
 800ad20:	0800addf 	.word	0x0800addf
 800ad24:	0800addf 	.word	0x0800addf
 800ad28:	0800addf 	.word	0x0800addf
 800ad2c:	0800addf 	.word	0x0800addf
 800ad30:	0800adab 	.word	0x0800adab
 800ad34:	0800addf 	.word	0x0800addf
 800ad38:	0800addf 	.word	0x0800addf
 800ad3c:	0800addf 	.word	0x0800addf
 800ad40:	0800addf 	.word	0x0800addf
 800ad44:	0800addf 	.word	0x0800addf
 800ad48:	0800addf 	.word	0x0800addf
 800ad4c:	0800addf 	.word	0x0800addf
 800ad50:	0800addf 	.word	0x0800addf
 800ad54:	0800addf 	.word	0x0800addf
 800ad58:	0800addf 	.word	0x0800addf
 800ad5c:	0800addf 	.word	0x0800addf
 800ad60:	0800addf 	.word	0x0800addf
 800ad64:	0800addf 	.word	0x0800addf
 800ad68:	0800addf 	.word	0x0800addf
 800ad6c:	0800addf 	.word	0x0800addf
 800ad70:	0800add1 	.word	0x0800add1
 800ad74:	2b40      	cmp	r3, #64	@ 0x40
 800ad76:	d02e      	beq.n	800add6 <UART_SetConfig+0x8aa>
 800ad78:	e031      	b.n	800adde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad7a:	f7fa f8b9 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 800ad7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad80:	e033      	b.n	800adea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad82:	f7fa f8cb 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 800ad86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad88:	e02f      	b.n	800adea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fc f8ba 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad98:	e027      	b.n	800adea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad9a:	f107 0318 	add.w	r3, r7, #24
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fc fa06 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada8:	e01f      	b.n	800adea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adaa:	4b2d      	ldr	r3, [pc, #180]	@ (800ae60 <UART_SetConfig+0x934>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 0320 	and.w	r3, r3, #32
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d009      	beq.n	800adca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adb6:	4b2a      	ldr	r3, [pc, #168]	@ (800ae60 <UART_SetConfig+0x934>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	08db      	lsrs	r3, r3, #3
 800adbc:	f003 0303 	and.w	r3, r3, #3
 800adc0:	4a24      	ldr	r2, [pc, #144]	@ (800ae54 <UART_SetConfig+0x928>)
 800adc2:	fa22 f303 	lsr.w	r3, r2, r3
 800adc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adc8:	e00f      	b.n	800adea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800adca:	4b22      	ldr	r3, [pc, #136]	@ (800ae54 <UART_SetConfig+0x928>)
 800adcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adce:	e00c      	b.n	800adea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800add0:	4b21      	ldr	r3, [pc, #132]	@ (800ae58 <UART_SetConfig+0x92c>)
 800add2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add4:	e009      	b.n	800adea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800add6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800addc:	e005      	b.n	800adea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800adde:	2300      	movs	r3, #0
 800ade0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ade8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 80e7 	beq.w	800afc0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf6:	4a19      	ldr	r2, [pc, #100]	@ (800ae5c <UART_SetConfig+0x930>)
 800adf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adfc:	461a      	mov	r2, r3
 800adfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae04:	005a      	lsls	r2, r3, #1
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	085b      	lsrs	r3, r3, #1
 800ae0c:	441a      	add	r2, r3
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	2b0f      	cmp	r3, #15
 800ae1c:	d916      	bls.n	800ae4c <UART_SetConfig+0x920>
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae24:	d212      	bcs.n	800ae4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	f023 030f 	bic.w	r3, r3, #15
 800ae2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae32:	085b      	lsrs	r3, r3, #1
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	f003 0307 	and.w	r3, r3, #7
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ae48:	60da      	str	r2, [r3, #12]
 800ae4a:	e0b9      	b.n	800afc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ae52:	e0b5      	b.n	800afc0 <UART_SetConfig+0xa94>
 800ae54:	03d09000 	.word	0x03d09000
 800ae58:	003d0900 	.word	0x003d0900
 800ae5c:	0800f3e0 	.word	0x0800f3e0
 800ae60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae68:	2b20      	cmp	r3, #32
 800ae6a:	dc49      	bgt.n	800af00 <UART_SetConfig+0x9d4>
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	db7c      	blt.n	800af6a <UART_SetConfig+0xa3e>
 800ae70:	2b20      	cmp	r3, #32
 800ae72:	d87a      	bhi.n	800af6a <UART_SetConfig+0xa3e>
 800ae74:	a201      	add	r2, pc, #4	@ (adr r2, 800ae7c <UART_SetConfig+0x950>)
 800ae76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7a:	bf00      	nop
 800ae7c:	0800af07 	.word	0x0800af07
 800ae80:	0800af0f 	.word	0x0800af0f
 800ae84:	0800af6b 	.word	0x0800af6b
 800ae88:	0800af6b 	.word	0x0800af6b
 800ae8c:	0800af17 	.word	0x0800af17
 800ae90:	0800af6b 	.word	0x0800af6b
 800ae94:	0800af6b 	.word	0x0800af6b
 800ae98:	0800af6b 	.word	0x0800af6b
 800ae9c:	0800af27 	.word	0x0800af27
 800aea0:	0800af6b 	.word	0x0800af6b
 800aea4:	0800af6b 	.word	0x0800af6b
 800aea8:	0800af6b 	.word	0x0800af6b
 800aeac:	0800af6b 	.word	0x0800af6b
 800aeb0:	0800af6b 	.word	0x0800af6b
 800aeb4:	0800af6b 	.word	0x0800af6b
 800aeb8:	0800af6b 	.word	0x0800af6b
 800aebc:	0800af37 	.word	0x0800af37
 800aec0:	0800af6b 	.word	0x0800af6b
 800aec4:	0800af6b 	.word	0x0800af6b
 800aec8:	0800af6b 	.word	0x0800af6b
 800aecc:	0800af6b 	.word	0x0800af6b
 800aed0:	0800af6b 	.word	0x0800af6b
 800aed4:	0800af6b 	.word	0x0800af6b
 800aed8:	0800af6b 	.word	0x0800af6b
 800aedc:	0800af6b 	.word	0x0800af6b
 800aee0:	0800af6b 	.word	0x0800af6b
 800aee4:	0800af6b 	.word	0x0800af6b
 800aee8:	0800af6b 	.word	0x0800af6b
 800aeec:	0800af6b 	.word	0x0800af6b
 800aef0:	0800af6b 	.word	0x0800af6b
 800aef4:	0800af6b 	.word	0x0800af6b
 800aef8:	0800af6b 	.word	0x0800af6b
 800aefc:	0800af5d 	.word	0x0800af5d
 800af00:	2b40      	cmp	r3, #64	@ 0x40
 800af02:	d02e      	beq.n	800af62 <UART_SetConfig+0xa36>
 800af04:	e031      	b.n	800af6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af06:	f7f9 fff3 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 800af0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af0c:	e033      	b.n	800af76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af0e:	f7fa f805 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 800af12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af14:	e02f      	b.n	800af76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fb fff4 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af24:	e027      	b.n	800af76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af26:	f107 0318 	add.w	r3, r7, #24
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fc f940 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af34:	e01f      	b.n	800af76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af36:	4b2d      	ldr	r3, [pc, #180]	@ (800afec <UART_SetConfig+0xac0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 0320 	and.w	r3, r3, #32
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d009      	beq.n	800af56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af42:	4b2a      	ldr	r3, [pc, #168]	@ (800afec <UART_SetConfig+0xac0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	08db      	lsrs	r3, r3, #3
 800af48:	f003 0303 	and.w	r3, r3, #3
 800af4c:	4a28      	ldr	r2, [pc, #160]	@ (800aff0 <UART_SetConfig+0xac4>)
 800af4e:	fa22 f303 	lsr.w	r3, r2, r3
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af54:	e00f      	b.n	800af76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800af56:	4b26      	ldr	r3, [pc, #152]	@ (800aff0 <UART_SetConfig+0xac4>)
 800af58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5a:	e00c      	b.n	800af76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af5c:	4b25      	ldr	r3, [pc, #148]	@ (800aff4 <UART_SetConfig+0xac8>)
 800af5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af60:	e009      	b.n	800af76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af68:	e005      	b.n	800af76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af74:	bf00      	nop
    }

    if (pclk != 0U)
 800af76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d021      	beq.n	800afc0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af80:	4a1d      	ldr	r2, [pc, #116]	@ (800aff8 <UART_SetConfig+0xacc>)
 800af82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af86:	461a      	mov	r2, r3
 800af88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	085b      	lsrs	r3, r3, #1
 800af94:	441a      	add	r2, r3
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa2:	2b0f      	cmp	r3, #15
 800afa4:	d909      	bls.n	800afba <UART_SetConfig+0xa8e>
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afac:	d205      	bcs.n	800afba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	60da      	str	r2, [r3, #12]
 800afb8:	e002      	b.n	800afc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2201      	movs	r2, #1
 800afcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	2200      	movs	r2, #0
 800afd4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2200      	movs	r2, #0
 800afda:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800afdc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3748      	adds	r7, #72	@ 0x48
 800afe4:	46bd      	mov	sp, r7
 800afe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afea:	bf00      	nop
 800afec:	58024400 	.word	0x58024400
 800aff0:	03d09000 	.word	0x03d09000
 800aff4:	003d0900 	.word	0x003d0900
 800aff8:	0800f3e0 	.word	0x0800f3e0

0800affc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b008:	f003 0308 	and.w	r3, r3, #8
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00a      	beq.n	800b048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	430a      	orrs	r2, r1
 800b046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b04c:	f003 0302 	and.w	r3, r3, #2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00a      	beq.n	800b06a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	430a      	orrs	r2, r1
 800b068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b06e:	f003 0304 	and.w	r3, r3, #4
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b090:	f003 0310 	and.w	r3, r3, #16
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00a      	beq.n	800b0ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	430a      	orrs	r2, r1
 800b0ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	430a      	orrs	r2, r1
 800b0ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d01a      	beq.n	800b112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0fa:	d10a      	bne.n	800b112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	430a      	orrs	r2, r1
 800b110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00a      	beq.n	800b134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	430a      	orrs	r2, r1
 800b132:	605a      	str	r2, [r3, #4]
  }
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b098      	sub	sp, #96	@ 0x60
 800b144:	af02      	add	r7, sp, #8
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b150:	f7f8 f888 	bl	8003264 <HAL_GetTick>
 800b154:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0308 	and.w	r3, r3, #8
 800b160:	2b08      	cmp	r3, #8
 800b162:	d12f      	bne.n	800b1c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b164:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b16c:	2200      	movs	r2, #0
 800b16e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f88e 	bl	800b294 <UART_WaitOnFlagUntilTimeout>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d022      	beq.n	800b1c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b186:	e853 3f00 	ldrex	r3, [r3]
 800b18a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b18c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b18e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b192:	653b      	str	r3, [r7, #80]	@ 0x50
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	461a      	mov	r2, r3
 800b19a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b19c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b19e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1a4:	e841 2300 	strex	r3, r2, [r1]
 800b1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1e6      	bne.n	800b17e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2220      	movs	r2, #32
 800b1b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e063      	b.n	800b28c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0304 	and.w	r3, r3, #4
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	d149      	bne.n	800b266 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f857 	bl	800b294 <UART_WaitOnFlagUntilTimeout>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d03c      	beq.n	800b266 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f4:	e853 3f00 	ldrex	r3, [r3]
 800b1f8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b200:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b20a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b20c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b212:	e841 2300 	strex	r3, r2, [r1]
 800b216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1e6      	bne.n	800b1ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3308      	adds	r3, #8
 800b224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	e853 3f00 	ldrex	r3, [r3]
 800b22c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f023 0301 	bic.w	r3, r3, #1
 800b234:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3308      	adds	r3, #8
 800b23c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b23e:	61fa      	str	r2, [r7, #28]
 800b240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	69b9      	ldr	r1, [r7, #24]
 800b244:	69fa      	ldr	r2, [r7, #28]
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	617b      	str	r3, [r7, #20]
   return(result);
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e5      	bne.n	800b21e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2220      	movs	r2, #32
 800b256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b262:	2303      	movs	r3, #3
 800b264:	e012      	b.n	800b28c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2220      	movs	r2, #32
 800b26a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2220      	movs	r2, #32
 800b272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3758      	adds	r7, #88	@ 0x58
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2a4:	e04f      	b.n	800b346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ac:	d04b      	beq.n	800b346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2ae:	f7f7 ffd9 	bl	8003264 <HAL_GetTick>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	1ad3      	subs	r3, r2, r3
 800b2b8:	69ba      	ldr	r2, [r7, #24]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d302      	bcc.n	800b2c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e04e      	b.n	800b366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0304 	and.w	r3, r3, #4
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d037      	beq.n	800b346 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2b80      	cmp	r3, #128	@ 0x80
 800b2da:	d034      	beq.n	800b346 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2b40      	cmp	r3, #64	@ 0x40
 800b2e0:	d031      	beq.n	800b346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	f003 0308 	and.w	r3, r3, #8
 800b2ec:	2b08      	cmp	r3, #8
 800b2ee:	d110      	bne.n	800b312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2208      	movs	r2, #8
 800b2f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f000 f839 	bl	800b370 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2208      	movs	r2, #8
 800b302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e029      	b.n	800b366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	69db      	ldr	r3, [r3, #28]
 800b318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b31c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b320:	d111      	bne.n	800b346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b32a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 f81f 	bl	800b370 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2220      	movs	r2, #32
 800b336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	e00f      	b.n	800b366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	69da      	ldr	r2, [r3, #28]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	4013      	ands	r3, r2
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	429a      	cmp	r2, r3
 800b354:	bf0c      	ite	eq
 800b356:	2301      	moveq	r3, #1
 800b358:	2300      	movne	r3, #0
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	461a      	mov	r2, r3
 800b35e:	79fb      	ldrb	r3, [r7, #7]
 800b360:	429a      	cmp	r2, r3
 800b362:	d0a0      	beq.n	800b2a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
	...

0800b370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b370:	b480      	push	{r7}
 800b372:	b095      	sub	sp, #84	@ 0x54
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b38c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b396:	643b      	str	r3, [r7, #64]	@ 0x40
 800b398:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b39c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1e6      	bne.n	800b378 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b438 <UART_EndRxTransfer+0xc8>)
 800b3be:	4013      	ands	r3, r2
 800b3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3308      	adds	r3, #8
 800b3c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e5      	bne.n	800b3aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d118      	bne.n	800b418 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	e853 3f00 	ldrex	r3, [r3]
 800b3f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	f023 0310 	bic.w	r3, r3, #16
 800b3fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	461a      	mov	r2, r3
 800b402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b404:	61bb      	str	r3, [r7, #24]
 800b406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b408:	6979      	ldr	r1, [r7, #20]
 800b40a:	69ba      	ldr	r2, [r7, #24]
 800b40c:	e841 2300 	strex	r3, r2, [r1]
 800b410:	613b      	str	r3, [r7, #16]
   return(result);
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e6      	bne.n	800b3e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2220      	movs	r2, #32
 800b41c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b42c:	bf00      	nop
 800b42e:	3754      	adds	r7, #84	@ 0x54
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	effffffe 	.word	0xeffffffe

0800b43c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d101      	bne.n	800b452 <HAL_UARTEx_DisableFifoMode+0x16>
 800b44e:	2302      	movs	r3, #2
 800b450:	e027      	b.n	800b4a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2224      	movs	r2, #36	@ 0x24
 800b45e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f022 0201 	bic.w	r2, r2, #1
 800b478:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b480:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2220      	movs	r2, #32
 800b494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d101      	bne.n	800b4c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	e02d      	b.n	800b522 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2224      	movs	r2, #36	@ 0x24
 800b4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f022 0201 	bic.w	r2, r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f850 	bl	800b5a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2220      	movs	r2, #32
 800b514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d101      	bne.n	800b542 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b53e:	2302      	movs	r3, #2
 800b540:	e02d      	b.n	800b59e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2201      	movs	r2, #1
 800b546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2224      	movs	r2, #36	@ 0x24
 800b54e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f022 0201 	bic.w	r2, r2, #1
 800b568:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f812 	bl	800b5a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2220      	movs	r2, #32
 800b590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
	...

0800b5a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d108      	bne.n	800b5ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5c8:	e031      	b.n	800b62e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5ca:	2310      	movs	r3, #16
 800b5cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5ce:	2310      	movs	r3, #16
 800b5d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	0e5b      	lsrs	r3, r3, #25
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	f003 0307 	and.w	r3, r3, #7
 800b5e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	0f5b      	lsrs	r3, r3, #29
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	f003 0307 	and.w	r3, r3, #7
 800b5f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5f2:	7bbb      	ldrb	r3, [r7, #14]
 800b5f4:	7b3a      	ldrb	r2, [r7, #12]
 800b5f6:	4911      	ldr	r1, [pc, #68]	@ (800b63c <UARTEx_SetNbDataToProcess+0x94>)
 800b5f8:	5c8a      	ldrb	r2, [r1, r2]
 800b5fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5fe:	7b3a      	ldrb	r2, [r7, #12]
 800b600:	490f      	ldr	r1, [pc, #60]	@ (800b640 <UARTEx_SetNbDataToProcess+0x98>)
 800b602:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b604:	fb93 f3f2 	sdiv	r3, r3, r2
 800b608:	b29a      	uxth	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	7b7a      	ldrb	r2, [r7, #13]
 800b614:	4909      	ldr	r1, [pc, #36]	@ (800b63c <UARTEx_SetNbDataToProcess+0x94>)
 800b616:	5c8a      	ldrb	r2, [r1, r2]
 800b618:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b61c:	7b7a      	ldrb	r2, [r7, #13]
 800b61e:	4908      	ldr	r1, [pc, #32]	@ (800b640 <UARTEx_SetNbDataToProcess+0x98>)
 800b620:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b622:	fb93 f3f2 	sdiv	r3, r3, r2
 800b626:	b29a      	uxth	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b62e:	bf00      	nop
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	0800f3f8 	.word	0x0800f3f8
 800b640:	0800f400 	.word	0x0800f400

0800b644 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b644:	b084      	sub	sp, #16
 800b646:	b480      	push	{r7}
 800b648:	b085      	sub	sp, #20
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	f107 001c 	add.w	r0, r7, #28
 800b652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b65a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b65c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b65e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b662:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b666:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b66a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	4313      	orrs	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	4b07      	ldr	r3, [pc, #28]	@ (800b694 <SDMMC_Init+0x50>)
 800b678:	4013      	ands	r3, r2
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	431a      	orrs	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	b004      	add	sp, #16
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	ffc02c00 	.word	0xffc02c00

0800b698 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr

0800b6b2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b6b2:	b480      	push	{r7}
 800b6b4:	b083      	sub	sp, #12
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f043 0203 	orr.w	r2, r3, #3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 0303 	and.w	r3, r3, #3
}
 800b706:	4618      	mov	r0, r3
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
	...

0800b714 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b71e:	2300      	movs	r3, #0
 800b720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b732:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b738:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b73e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	4313      	orrs	r3, r2
 800b744:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	68da      	ldr	r2, [r3, #12]
 800b74a:	4b06      	ldr	r3, [pc, #24]	@ (800b764 <SDMMC_SendCommand+0x50>)
 800b74c:	4013      	ands	r3, r2
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	431a      	orrs	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	fffee0c0 	.word	0xfffee0c0

0800b768 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	b2db      	uxtb	r3, r3
}
 800b776:	4618      	mov	r0, r3
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b782:	b480      	push	{r7}
 800b784:	b085      	sub	sp, #20
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3314      	adds	r3, #20
 800b790:	461a      	mov	r2, r3
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	4413      	add	r3, r2
 800b796:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	685a      	ldr	r2, [r3, #4]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b7ce:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b7d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b7da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0

}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b80e:	2310      	movs	r3, #16
 800b810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b818:	2300      	movs	r3, #0
 800b81a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b81c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b820:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b822:	f107 0308 	add.w	r3, r7, #8
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff ff73 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b82e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b832:	2110      	movs	r1, #16
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fa5f 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b83a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b83c:	69fb      	ldr	r3, [r7, #28]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3720      	adds	r7, #32
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b088      	sub	sp, #32
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b854:	2311      	movs	r3, #17
 800b856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b85e:	2300      	movs	r3, #0
 800b860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b868:	f107 0308 	add.w	r3, r7, #8
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff ff50 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b874:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b878:	2111      	movs	r1, #17
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fa3c 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b882:	69fb      	ldr	r3, [r7, #28]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b89a:	2312      	movs	r3, #18
 800b89c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b89e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ae:	f107 0308 	add.w	r3, r7, #8
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff ff2d 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b8ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8be:	2112      	movs	r1, #18
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fa19 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b8c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8c8:	69fb      	ldr	r3, [r7, #28]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3720      	adds	r7, #32
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b088      	sub	sp, #32
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b8e0:	2318      	movs	r3, #24
 800b8e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8f4:	f107 0308 	add.w	r3, r7, #8
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7ff ff0a 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b900:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b904:	2118      	movs	r1, #24
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f9f6 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b90c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b90e:	69fb      	ldr	r3, [r7, #28]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3720      	adds	r7, #32
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b088      	sub	sp, #32
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b926:	2319      	movs	r3, #25
 800b928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b92a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b92e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b930:	2300      	movs	r3, #0
 800b932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b938:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b93a:	f107 0308 	add.w	r3, r7, #8
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff fee7 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b94a:	2119      	movs	r1, #25
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 f9d3 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b954:	69fb      	ldr	r3, [r7, #28]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3720      	adds	r7, #32
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
	...

0800b960 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b968:	2300      	movs	r3, #0
 800b96a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b96c:	230c      	movs	r3, #12
 800b96e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b976:	2300      	movs	r3, #0
 800b978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b97a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b97e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b998:	f107 0308 	add.w	r3, r7, #8
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7ff feb8 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b9a4:	4a0b      	ldr	r2, [pc, #44]	@ (800b9d4 <SDMMC_CmdStopTransfer+0x74>)
 800b9a6:	210c      	movs	r1, #12
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f9a5 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b9ae:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9c2:	d101      	bne.n	800b9c8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b9c8:	69fb      	ldr	r3, [r7, #28]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3720      	adds	r7, #32
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	05f5e100 	.word	0x05f5e100

0800b9d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b9e6:	2307      	movs	r3, #7
 800b9e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b9ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b9f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9fa:	f107 0308 	add.w	r3, r7, #8
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7ff fe87 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ba06:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba0a:	2107      	movs	r1, #7
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f973 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800ba12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba14:	69fb      	ldr	r3, [r7, #28]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3720      	adds	r7, #32
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b088      	sub	sp, #32
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ba26:	2300      	movs	r3, #0
 800ba28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba32:	2300      	movs	r3, #0
 800ba34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba3c:	f107 0308 	add.w	r3, r7, #8
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff fe66 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fb97 	bl	800c17c <SDMMC_GetCmdError>
 800ba4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba50:	69fb      	ldr	r3, [r7, #28]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3720      	adds	r7, #32
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b088      	sub	sp, #32
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ba62:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ba66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ba68:	2308      	movs	r3, #8
 800ba6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba72:	2300      	movs	r3, #0
 800ba74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba7c:	f107 0308 	add.w	r3, r7, #8
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff fe46 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fb29 	bl	800c0e0 <SDMMC_GetCmdResp7>
 800ba8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba90:	69fb      	ldr	r3, [r7, #28]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3720      	adds	r7, #32
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b088      	sub	sp, #32
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800baa8:	2337      	movs	r3, #55	@ 0x37
 800baaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bab2:	2300      	movs	r3, #0
 800bab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800baba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800babc:	f107 0308 	add.w	r3, r7, #8
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff fe26 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bacc:	2137      	movs	r1, #55	@ 0x37
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f912 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800bad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bad6:	69fb      	ldr	r3, [r7, #28]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3720      	adds	r7, #32
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800baee:	2329      	movs	r3, #41	@ 0x29
 800baf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800baf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baf8:	2300      	movs	r3, #0
 800bafa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bafc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb02:	f107 0308 	add.w	r3, r7, #8
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff fe03 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fa2e 	bl	800bf70 <SDMMC_GetCmdResp3>
 800bb14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb16:	69fb      	ldr	r3, [r7, #28]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3720      	adds	r7, #32
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bb2e:	2306      	movs	r3, #6
 800bb30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb42:	f107 0308 	add.w	r3, r7, #8
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff fde3 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bb4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb52:	2106      	movs	r1, #6
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 f8cf 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800bb5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3720      	adds	r7, #32
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b088      	sub	sp, #32
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bb72:	2333      	movs	r3, #51	@ 0x33
 800bb74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bb84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb86:	f107 0308 	add.w	r3, r7, #8
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7ff fdc1 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bb92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb96:	2133      	movs	r1, #51	@ 0x33
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f8ad 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800bb9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bba0:	69fb      	ldr	r3, [r7, #28]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3720      	adds	r7, #32
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b088      	sub	sp, #32
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bbb6:	2302      	movs	r3, #2
 800bbb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bbba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800bbbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bbc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbca:	f107 0308 	add.w	r3, r7, #8
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7ff fd9f 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f980 	bl	800bedc <SDMMC_GetCmdResp2>
 800bbdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbde:	69fb      	ldr	r3, [r7, #28]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3720      	adds	r7, #32
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b088      	sub	sp, #32
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bbf6:	2309      	movs	r3, #9
 800bbf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bbfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800bbfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc00:	2300      	movs	r3, #0
 800bc02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc0a:	f107 0308 	add.w	r3, r7, #8
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7ff fd7f 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f960 	bl	800bedc <SDMMC_GetCmdResp2>
 800bc1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc1e:	69fb      	ldr	r3, [r7, #28]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3720      	adds	r7, #32
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bc36:	2303      	movs	r3, #3
 800bc38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc40:	2300      	movs	r3, #0
 800bc42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc4a:	f107 0308 	add.w	r3, r7, #8
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7ff fd5f 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	2103      	movs	r1, #3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f9c8 	bl	800bff0 <SDMMC_GetCmdResp6>
 800bc60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc62:	69fb      	ldr	r3, [r7, #28]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3720      	adds	r7, #32
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bc7a:	230d      	movs	r3, #13
 800bc7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc84:	2300      	movs	r3, #0
 800bc86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc8e:	f107 0308 	add.w	r3, r7, #8
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff fd3d 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bc9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc9e:	210d      	movs	r1, #13
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f829 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800bca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bca8:	69fb      	ldr	r3, [r7, #28]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3720      	adds	r7, #32
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b088      	sub	sp, #32
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bcbe:	230d      	movs	r3, #13
 800bcc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bcc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bccc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcd2:	f107 0308 	add.w	r3, r7, #8
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff fd1b 	bl	800b714 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bcde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bce2:	210d      	movs	r1, #13
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 f807 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800bcea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcec:	69fb      	ldr	r3, [r7, #28]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3720      	adds	r7, #32
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
	...

0800bcf8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	460b      	mov	r3, r1
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd06:	4b70      	ldr	r3, [pc, #448]	@ (800bec8 <SDMMC_GetCmdResp1+0x1d0>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a70      	ldr	r2, [pc, #448]	@ (800becc <SDMMC_GetCmdResp1+0x1d4>)
 800bd0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd10:	0a5a      	lsrs	r2, r3, #9
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	fb02 f303 	mul.w	r3, r2, r3
 800bd18:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	1e5a      	subs	r2, r3, #1
 800bd1e:	61fa      	str	r2, [r7, #28]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d102      	bne.n	800bd2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd28:	e0c9      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd2e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bd30:	69ba      	ldr	r2, [r7, #24]
 800bd32:	4b67      	ldr	r3, [pc, #412]	@ (800bed0 <SDMMC_GetCmdResp1+0x1d8>)
 800bd34:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0ef      	beq.n	800bd1a <SDMMC_GetCmdResp1+0x22>
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1ea      	bne.n	800bd1a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d004      	beq.n	800bd5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2204      	movs	r2, #4
 800bd54:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd56:	2304      	movs	r3, #4
 800bd58:	e0b1      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e0a6      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4a58      	ldr	r2, [pc, #352]	@ (800bed4 <SDMMC_GetCmdResp1+0x1dc>)
 800bd74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff fcf6 	bl	800b768 <SDMMC_GetCommandResponse>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	461a      	mov	r2, r3
 800bd80:	7afb      	ldrb	r3, [r7, #11]
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d001      	beq.n	800bd8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e099      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f7ff fcf8 	bl	800b782 <SDMMC_GetResponse>
 800bd92:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	4b50      	ldr	r3, [pc, #320]	@ (800bed8 <SDMMC_GetCmdResp1+0x1e0>)
 800bd98:	4013      	ands	r3, r2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e08d      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	da02      	bge.n	800bdae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bda8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bdac:	e087      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d001      	beq.n	800bdbc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bdb8:	2340      	movs	r3, #64	@ 0x40
 800bdba:	e080      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bdc6:	2380      	movs	r3, #128	@ 0x80
 800bdc8:	e079      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bdd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bdd8:	e071      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bde4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bde8:	e069      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bdf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdf8:	e061      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800be08:	e059      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be18:	e051      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800be28:	e049      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800be38:	e041      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800be44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be48:	e039      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d002      	beq.n	800be5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800be58:	e031      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800be68:	e029      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800be74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be78:	e021      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800be84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800be88:	e019      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800be94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800be98:	e011      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bea4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bea8:	e009      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f003 0308 	and.w	r3, r3, #8
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800beb4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800beb8:	e001      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800beba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3720      	adds	r7, #32
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	24000000 	.word	0x24000000
 800becc:	10624dd3 	.word	0x10624dd3
 800bed0:	00200045 	.word	0x00200045
 800bed4:	002000c5 	.word	0x002000c5
 800bed8:	fdffe008 	.word	0xfdffe008

0800bedc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bee4:	4b1f      	ldr	r3, [pc, #124]	@ (800bf64 <SDMMC_GetCmdResp2+0x88>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a1f      	ldr	r2, [pc, #124]	@ (800bf68 <SDMMC_GetCmdResp2+0x8c>)
 800beea:	fba2 2303 	umull	r2, r3, r2, r3
 800beee:	0a5b      	lsrs	r3, r3, #9
 800bef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bef4:	fb02 f303 	mul.w	r3, r2, r3
 800bef8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	1e5a      	subs	r2, r3, #1
 800befe:	60fa      	str	r2, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d102      	bne.n	800bf0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bf08:	e026      	b.n	800bf58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d0ef      	beq.n	800befa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1ea      	bne.n	800befa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf28:	f003 0304 	and.w	r3, r3, #4
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d004      	beq.n	800bf3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2204      	movs	r2, #4
 800bf34:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf36:	2304      	movs	r3, #4
 800bf38:	e00e      	b.n	800bf58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d004      	beq.n	800bf50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e003      	b.n	800bf58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a06      	ldr	r2, [pc, #24]	@ (800bf6c <SDMMC_GetCmdResp2+0x90>)
 800bf54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3714      	adds	r7, #20
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	24000000 	.word	0x24000000
 800bf68:	10624dd3 	.word	0x10624dd3
 800bf6c:	002000c5 	.word	0x002000c5

0800bf70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf78:	4b1a      	ldr	r3, [pc, #104]	@ (800bfe4 <SDMMC_GetCmdResp3+0x74>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a1a      	ldr	r2, [pc, #104]	@ (800bfe8 <SDMMC_GetCmdResp3+0x78>)
 800bf7e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf82:	0a5b      	lsrs	r3, r3, #9
 800bf84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf88:	fb02 f303 	mul.w	r3, r2, r3
 800bf8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	1e5a      	subs	r2, r3, #1
 800bf92:	60fa      	str	r2, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bf9c:	e01b      	b.n	800bfd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfa2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d0ef      	beq.n	800bf8e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1ea      	bne.n	800bf8e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfbc:	f003 0304 	and.w	r3, r3, #4
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d004      	beq.n	800bfce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2204      	movs	r2, #4
 800bfc8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfca:	2304      	movs	r3, #4
 800bfcc:	e003      	b.n	800bfd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a06      	ldr	r2, [pc, #24]	@ (800bfec <SDMMC_GetCmdResp3+0x7c>)
 800bfd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	24000000 	.word	0x24000000
 800bfe8:	10624dd3 	.word	0x10624dd3
 800bfec:	002000c5 	.word	0x002000c5

0800bff0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	460b      	mov	r3, r1
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bffe:	4b35      	ldr	r3, [pc, #212]	@ (800c0d4 <SDMMC_GetCmdResp6+0xe4>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a35      	ldr	r2, [pc, #212]	@ (800c0d8 <SDMMC_GetCmdResp6+0xe8>)
 800c004:	fba2 2303 	umull	r2, r3, r2, r3
 800c008:	0a5b      	lsrs	r3, r3, #9
 800c00a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
 800c012:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	1e5a      	subs	r2, r3, #1
 800c018:	61fa      	str	r2, [r7, #28]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c01e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c022:	e052      	b.n	800c0ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c028:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c030:	2b00      	cmp	r3, #0
 800c032:	d0ef      	beq.n	800c014 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1ea      	bne.n	800c014 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c042:	f003 0304 	and.w	r3, r3, #4
 800c046:	2b00      	cmp	r3, #0
 800c048:	d004      	beq.n	800c054 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2204      	movs	r2, #4
 800c04e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c050:	2304      	movs	r3, #4
 800c052:	e03a      	b.n	800c0ca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c058:	f003 0301 	and.w	r3, r3, #1
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d004      	beq.n	800c06a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2201      	movs	r2, #1
 800c064:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c066:	2301      	movs	r3, #1
 800c068:	e02f      	b.n	800c0ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f7ff fb7c 	bl	800b768 <SDMMC_GetCommandResponse>
 800c070:	4603      	mov	r3, r0
 800c072:	461a      	mov	r2, r3
 800c074:	7afb      	ldrb	r3, [r7, #11]
 800c076:	4293      	cmp	r3, r2
 800c078:	d001      	beq.n	800c07e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e025      	b.n	800c0ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	4a16      	ldr	r2, [pc, #88]	@ (800c0dc <SDMMC_GetCmdResp6+0xec>)
 800c082:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c084:	2100      	movs	r1, #0
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f7ff fb7b 	bl	800b782 <SDMMC_GetResponse>
 800c08c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c094:	2b00      	cmp	r3, #0
 800c096:	d106      	bne.n	800c0a6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	0c1b      	lsrs	r3, r3, #16
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e011      	b.n	800c0ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0b4:	e009      	b.n	800c0ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c0c4:	e001      	b.n	800c0ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3720      	adds	r7, #32
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	24000000 	.word	0x24000000
 800c0d8:	10624dd3 	.word	0x10624dd3
 800c0dc:	002000c5 	.word	0x002000c5

0800c0e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c0e8:	4b22      	ldr	r3, [pc, #136]	@ (800c174 <SDMMC_GetCmdResp7+0x94>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a22      	ldr	r2, [pc, #136]	@ (800c178 <SDMMC_GetCmdResp7+0x98>)
 800c0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c0f2:	0a5b      	lsrs	r3, r3, #9
 800c0f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0f8:	fb02 f303 	mul.w	r3, r2, r3
 800c0fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	1e5a      	subs	r2, r3, #1
 800c102:	60fa      	str	r2, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d102      	bne.n	800c10e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c108:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c10c:	e02c      	b.n	800c168 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c112:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d0ef      	beq.n	800c0fe <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1ea      	bne.n	800c0fe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c12c:	f003 0304 	and.w	r3, r3, #4
 800c130:	2b00      	cmp	r3, #0
 800c132:	d004      	beq.n	800c13e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2204      	movs	r2, #4
 800c138:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c13a:	2304      	movs	r3, #4
 800c13c:	e014      	b.n	800c168 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	2b00      	cmp	r3, #0
 800c148:	d004      	beq.n	800c154 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2201      	movs	r2, #1
 800c14e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c150:	2301      	movs	r3, #1
 800c152:	e009      	b.n	800c168 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2240      	movs	r2, #64	@ 0x40
 800c164:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c166:	2300      	movs	r3, #0

}
 800c168:	4618      	mov	r0, r3
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	24000000 	.word	0x24000000
 800c178:	10624dd3 	.word	0x10624dd3

0800c17c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c184:	4b11      	ldr	r3, [pc, #68]	@ (800c1cc <SDMMC_GetCmdError+0x50>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a11      	ldr	r2, [pc, #68]	@ (800c1d0 <SDMMC_GetCmdError+0x54>)
 800c18a:	fba2 2303 	umull	r2, r3, r2, r3
 800c18e:	0a5b      	lsrs	r3, r3, #9
 800c190:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c194:	fb02 f303 	mul.w	r3, r2, r3
 800c198:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	1e5a      	subs	r2, r3, #1
 800c19e:	60fa      	str	r2, [r7, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c1a8:	e009      	b.n	800c1be <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d0f1      	beq.n	800c19a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a06      	ldr	r2, [pc, #24]	@ (800c1d4 <SDMMC_GetCmdError+0x58>)
 800c1ba:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3714      	adds	r7, #20
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	24000000 	.word	0x24000000
 800c1d0:	10624dd3 	.word	0x10624dd3
 800c1d4:	002000c5 	.word	0x002000c5

0800c1d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1d8:	b084      	sub	sp, #16
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	f107 001c 	add.w	r0, r7, #28
 800c1e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d121      	bne.n	800c236 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68da      	ldr	r2, [r3, #12]
 800c202:	4b2c      	ldr	r3, [pc, #176]	@ (800c2b4 <USB_CoreInit+0xdc>)
 800c204:	4013      	ands	r3, r2
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c216:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d105      	bne.n	800c22a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 faaa 	bl	800c784 <USB_CoreReset>
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]
 800c234:	e01b      	b.n	800c26e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fa9e 	bl	800c784 <USB_CoreReset>
 800c248:	4603      	mov	r3, r0
 800c24a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c24c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c250:	2b00      	cmp	r3, #0
 800c252:	d106      	bne.n	800c262 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c258:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	639a      	str	r2, [r3, #56]	@ 0x38
 800c260:	e005      	b.n	800c26e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c266:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c26e:	7fbb      	ldrb	r3, [r7, #30]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d116      	bne.n	800c2a2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c278:	b29a      	uxth	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c282:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b8 <USB_CoreInit+0xe0>)
 800c284:	4313      	orrs	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f043 0206 	orr.w	r2, r3, #6
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f043 0220 	orr.w	r2, r3, #32
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2ae:	b004      	add	sp, #16
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	ffbdffbf 	.word	0xffbdffbf
 800c2b8:	03ee0000 	.word	0x03ee0000

0800c2bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	f023 0201 	bic.w	r2, r3, #1
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b084      	sub	sp, #16
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c2fa:	78fb      	ldrb	r3, [r7, #3]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d115      	bne.n	800c32c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c30c:	200a      	movs	r0, #10
 800c30e:	f7f6 ffb5 	bl	800327c <HAL_Delay>
      ms += 10U;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	330a      	adds	r3, #10
 800c316:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fa25 	bl	800c768 <USB_GetMode>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b01      	cmp	r3, #1
 800c322:	d01e      	beq.n	800c362 <USB_SetCurrentMode+0x84>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2bc7      	cmp	r3, #199	@ 0xc7
 800c328:	d9f0      	bls.n	800c30c <USB_SetCurrentMode+0x2e>
 800c32a:	e01a      	b.n	800c362 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c32c:	78fb      	ldrb	r3, [r7, #3]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d115      	bne.n	800c35e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c33e:	200a      	movs	r0, #10
 800c340:	f7f6 ff9c 	bl	800327c <HAL_Delay>
      ms += 10U;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	330a      	adds	r3, #10
 800c348:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fa0c 	bl	800c768 <USB_GetMode>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d005      	beq.n	800c362 <USB_SetCurrentMode+0x84>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2bc7      	cmp	r3, #199	@ 0xc7
 800c35a:	d9f0      	bls.n	800c33e <USB_SetCurrentMode+0x60>
 800c35c:	e001      	b.n	800c362 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e005      	b.n	800c36e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2bc8      	cmp	r3, #200	@ 0xc8
 800c366:	d101      	bne.n	800c36c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e000      	b.n	800c36e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
	...

0800c378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c378:	b084      	sub	sp, #16
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b086      	sub	sp, #24
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c392:	2300      	movs	r3, #0
 800c394:	613b      	str	r3, [r7, #16]
 800c396:	e009      	b.n	800c3ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	3340      	adds	r3, #64	@ 0x40
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	613b      	str	r3, [r7, #16]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	2b0e      	cmp	r3, #14
 800c3b0:	d9f2      	bls.n	800c398 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c3b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d11c      	bne.n	800c3f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c3c8:	f043 0302 	orr.w	r3, r3, #2
 800c3cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	e005      	b.n	800c400 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c406:	461a      	mov	r2, r3
 800c408:	2300      	movs	r3, #0
 800c40a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c40c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c410:	2b01      	cmp	r3, #1
 800c412:	d10d      	bne.n	800c430 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d104      	bne.n	800c426 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c41c:	2100      	movs	r1, #0
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f968 	bl	800c6f4 <USB_SetDevSpeed>
 800c424:	e008      	b.n	800c438 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c426:	2101      	movs	r1, #1
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 f963 	bl	800c6f4 <USB_SetDevSpeed>
 800c42e:	e003      	b.n	800c438 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c430:	2103      	movs	r1, #3
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f95e 	bl	800c6f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c438:	2110      	movs	r1, #16
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f8fa 	bl	800c634 <USB_FlushTxFifo>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f924 	bl	800c698 <USB_FlushRxFifo>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c460:	461a      	mov	r2, r3
 800c462:	2300      	movs	r3, #0
 800c464:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c46c:	461a      	mov	r2, r3
 800c46e:	2300      	movs	r3, #0
 800c470:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c478:	461a      	mov	r2, r3
 800c47a:	2300      	movs	r3, #0
 800c47c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c47e:	2300      	movs	r3, #0
 800c480:	613b      	str	r3, [r7, #16]
 800c482:	e043      	b.n	800c50c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	015a      	lsls	r2, r3, #5
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	4413      	add	r3, r2
 800c48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c49a:	d118      	bne.n	800c4ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10a      	bne.n	800c4b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c4b4:	6013      	str	r3, [r2, #0]
 800c4b6:	e013      	b.n	800c4e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	015a      	lsls	r2, r3, #5
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4413      	add	r3, r2
 800c4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c4ca:	6013      	str	r3, [r2, #0]
 800c4cc:	e008      	b.n	800c4e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	015a      	lsls	r2, r3, #5
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4da:	461a      	mov	r2, r3
 800c4dc:	2300      	movs	r3, #0
 800c4de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	015a      	lsls	r2, r3, #5
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	015a      	lsls	r2, r3, #5
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4fe:	461a      	mov	r2, r3
 800c500:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c504:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	3301      	adds	r3, #1
 800c50a:	613b      	str	r3, [r7, #16]
 800c50c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c510:	461a      	mov	r2, r3
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	4293      	cmp	r3, r2
 800c516:	d3b5      	bcc.n	800c484 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c518:	2300      	movs	r3, #0
 800c51a:	613b      	str	r3, [r7, #16]
 800c51c:	e043      	b.n	800c5a6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	015a      	lsls	r2, r3, #5
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	4413      	add	r3, r2
 800c526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c530:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c534:	d118      	bne.n	800c568 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10a      	bne.n	800c552 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	015a      	lsls	r2, r3, #5
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	4413      	add	r3, r2
 800c544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c548:	461a      	mov	r2, r3
 800c54a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	e013      	b.n	800c57a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	015a      	lsls	r2, r3, #5
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	4413      	add	r3, r2
 800c55a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c55e:	461a      	mov	r2, r3
 800c560:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c564:	6013      	str	r3, [r2, #0]
 800c566:	e008      	b.n	800c57a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	015a      	lsls	r2, r3, #5
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c574:	461a      	mov	r2, r3
 800c576:	2300      	movs	r3, #0
 800c578:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	015a      	lsls	r2, r3, #5
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	4413      	add	r3, r2
 800c582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c586:	461a      	mov	r2, r3
 800c588:	2300      	movs	r3, #0
 800c58a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	015a      	lsls	r2, r3, #5
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	4413      	add	r3, r2
 800c594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c598:	461a      	mov	r2, r3
 800c59a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c59e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	613b      	str	r3, [r7, #16]
 800c5a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d3b5      	bcc.n	800c51e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c5c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c5d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c5d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d105      	bne.n	800c5e8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	699b      	ldr	r3, [r3, #24]
 800c5e0:	f043 0210 	orr.w	r2, r3, #16
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	699a      	ldr	r2, [r3, #24]
 800c5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800c62c <USB_DevInit+0x2b4>)
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c5f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d005      	beq.n	800c608 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	f043 0208 	orr.w	r2, r3, #8
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c608:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d105      	bne.n	800c61c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	699a      	ldr	r2, [r3, #24]
 800c614:	4b06      	ldr	r3, [pc, #24]	@ (800c630 <USB_DevInit+0x2b8>)
 800c616:	4313      	orrs	r3, r2
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3718      	adds	r7, #24
 800c622:	46bd      	mov	sp, r7
 800c624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c628:	b004      	add	sp, #16
 800c62a:	4770      	bx	lr
 800c62c:	803c3800 	.word	0x803c3800
 800c630:	40000004 	.word	0x40000004

0800c634 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c63e:	2300      	movs	r3, #0
 800c640:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	3301      	adds	r3, #1
 800c646:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c64e:	d901      	bls.n	800c654 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e01b      	b.n	800c68c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	691b      	ldr	r3, [r3, #16]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	daf2      	bge.n	800c642 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c65c:	2300      	movs	r3, #0
 800c65e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	019b      	lsls	r3, r3, #6
 800c664:	f043 0220 	orr.w	r2, r3, #32
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	3301      	adds	r3, #1
 800c670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c678:	d901      	bls.n	800c67e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c67a:	2303      	movs	r3, #3
 800c67c:	e006      	b.n	800c68c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	f003 0320 	and.w	r3, r3, #32
 800c686:	2b20      	cmp	r3, #32
 800c688:	d0f0      	beq.n	800c66c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c6b0:	d901      	bls.n	800c6b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c6b2:	2303      	movs	r3, #3
 800c6b4:	e018      	b.n	800c6e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	daf2      	bge.n	800c6a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2210      	movs	r2, #16
 800c6c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c6d4:	d901      	bls.n	800c6da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c6d6:	2303      	movs	r3, #3
 800c6d8:	e006      	b.n	800c6e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	f003 0310 	and.w	r3, r3, #16
 800c6e2:	2b10      	cmp	r3, #16
 800c6e4:	d0f0      	beq.n	800c6c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	78fb      	ldrb	r3, [r7, #3]
 800c70e:	68f9      	ldr	r1, [r7, #12]
 800c710:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c714:	4313      	orrs	r3, r2
 800c716:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c726:	b480      	push	{r7}
 800c728:	b085      	sub	sp, #20
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c740:	f023 0303 	bic.w	r3, r3, #3
 800c744:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c754:	f043 0302 	orr.w	r3, r3, #2
 800c758:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3714      	adds	r7, #20
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	695b      	ldr	r3, [r3, #20]
 800c774:	f003 0301 	and.w	r3, r3, #1
}
 800c778:	4618      	mov	r0, r3
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	3301      	adds	r3, #1
 800c794:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c79c:	d901      	bls.n	800c7a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e01b      	b.n	800c7da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	daf2      	bge.n	800c790 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	f043 0201 	orr.w	r2, r3, #1
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c7c6:	d901      	bls.n	800c7cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e006      	b.n	800c7da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d0f0      	beq.n	800c7ba <USB_CoreReset+0x36>

  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
	...

0800c7e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c7ec:	4904      	ldr	r1, [pc, #16]	@ (800c800 <MX_FATFS_Init+0x18>)
 800c7ee:	4805      	ldr	r0, [pc, #20]	@ (800c804 <MX_FATFS_Init+0x1c>)
 800c7f0:	f000 f9e4 	bl	800cbbc <FATFS_LinkDriver>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	4b03      	ldr	r3, [pc, #12]	@ (800c808 <MX_FATFS_Init+0x20>)
 800c7fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c7fc:	bf00      	nop
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	24001120 	.word	0x24001120
 800c804:	0800f408 	.word	0x0800f408
 800c808:	2400111c 	.word	0x2400111c

0800c80c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c816:	f000 f879 	bl	800c90c <BSP_SD_IsDetected>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d001      	beq.n	800c824 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c820:	2302      	movs	r3, #2
 800c822:	e012      	b.n	800c84a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c824:	480b      	ldr	r0, [pc, #44]	@ (800c854 <BSP_SD_Init+0x48>)
 800c826:	f7fb f8cd 	bl	80079c4 <HAL_SD_Init>
 800c82a:	4603      	mov	r3, r0
 800c82c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c82e:	79fb      	ldrb	r3, [r7, #7]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d109      	bne.n	800c848 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c834:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c838:	4806      	ldr	r0, [pc, #24]	@ (800c854 <BSP_SD_Init+0x48>)
 800c83a:	f7fb ff89 	bl	8008750 <HAL_SD_ConfigWideBusOperation>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c848:	79fb      	ldrb	r3, [r7, #7]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	240002f0 	.word	0x240002f0

0800c858 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af02      	add	r7, sp, #8
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
 800c864:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c866:	2300      	movs	r3, #0
 800c868:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	68ba      	ldr	r2, [r7, #8]
 800c872:	68f9      	ldr	r1, [r7, #12]
 800c874:	4806      	ldr	r0, [pc, #24]	@ (800c890 <BSP_SD_ReadBlocks+0x38>)
 800c876:	f7fb f9c5 	bl	8007c04 <HAL_SD_ReadBlocks>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c884:	7dfb      	ldrb	r3, [r7, #23]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3718      	adds	r7, #24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	240002f0 	.word	0x240002f0

0800c894 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af02      	add	r7, sp, #8
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
 800c8a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	68f9      	ldr	r1, [r7, #12]
 800c8b0:	4806      	ldr	r0, [pc, #24]	@ (800c8cc <BSP_SD_WriteBlocks+0x38>)
 800c8b2:	f7fb fb31 	bl	8007f18 <HAL_SD_WriteBlocks>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	240002f0 	.word	0x240002f0

0800c8d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c8d4:	4805      	ldr	r0, [pc, #20]	@ (800c8ec <BSP_SD_GetCardState+0x1c>)
 800c8d6:	f7fc f84d 	bl	8008974 <HAL_SD_GetCardState>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b04      	cmp	r3, #4
 800c8de:	bf14      	ite	ne
 800c8e0:	2301      	movne	r3, #1
 800c8e2:	2300      	moveq	r3, #0
 800c8e4:	b2db      	uxtb	r3, r3
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	240002f0 	.word	0x240002f0

0800c8f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c8f8:	6879      	ldr	r1, [r7, #4]
 800c8fa:	4803      	ldr	r0, [pc, #12]	@ (800c908 <BSP_SD_GetCardInfo+0x18>)
 800c8fc:	f7fb fefc 	bl	80086f8 <HAL_SD_GetCardInfo>
}
 800c900:	bf00      	nop
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	240002f0 	.word	0x240002f0

0800c90c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c912:	2301      	movs	r3, #1
 800c914:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c916:	f000 f80b 	bl	800c930 <BSP_PlatformIsDetected>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c920:	2300      	movs	r3, #0
 800c922:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c924:	79fb      	ldrb	r3, [r7, #7]
 800c926:	b2db      	uxtb	r3, r3
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c936:	2301      	movs	r3, #1
 800c938:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c93a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c93e:	4806      	ldr	r0, [pc, #24]	@ (800c958 <BSP_PlatformIsDetected+0x28>)
 800c940:	f7f6 ffee 	bl	8003920 <HAL_GPIO_ReadPin>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d001      	beq.n	800c94e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c94a:	2300      	movs	r3, #0
 800c94c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c94e:	79fb      	ldrb	r3, [r7, #7]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	58020c00 	.word	0x58020c00

0800c95c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	4603      	mov	r3, r0
 800c964:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c966:	4b0b      	ldr	r3, [pc, #44]	@ (800c994 <SD_CheckStatus+0x38>)
 800c968:	2201      	movs	r2, #1
 800c96a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c96c:	f7ff ffb0 	bl	800c8d0 <BSP_SD_GetCardState>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d107      	bne.n	800c986 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c976:	4b07      	ldr	r3, [pc, #28]	@ (800c994 <SD_CheckStatus+0x38>)
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f023 0301 	bic.w	r3, r3, #1
 800c980:	b2da      	uxtb	r2, r3
 800c982:	4b04      	ldr	r3, [pc, #16]	@ (800c994 <SD_CheckStatus+0x38>)
 800c984:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c986:	4b03      	ldr	r3, [pc, #12]	@ (800c994 <SD_CheckStatus+0x38>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	b2db      	uxtb	r3, r3
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	2400000d 	.word	0x2400000d

0800c998 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	4603      	mov	r3, r0
 800c9a0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c9a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c9d0 <SD_initialize+0x38>)
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c9a8:	f7ff ff30 	bl	800c80c <BSP_SD_Init>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d107      	bne.n	800c9c2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff ffd1 	bl	800c95c <SD_CheckStatus>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	461a      	mov	r2, r3
 800c9be:	4b04      	ldr	r3, [pc, #16]	@ (800c9d0 <SD_initialize+0x38>)
 800c9c0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c9c2:	4b03      	ldr	r3, [pc, #12]	@ (800c9d0 <SD_initialize+0x38>)
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	b2db      	uxtb	r3, r3
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	2400000d 	.word	0x2400000d

0800c9d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff ffbb 	bl	800c95c <SD_CheckStatus>
 800c9e6:	4603      	mov	r3, r0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	607a      	str	r2, [r7, #4]
 800c9fa:	603b      	str	r3, [r7, #0]
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ca04:	f04f 33ff 	mov.w	r3, #4294967295
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	68b8      	ldr	r0, [r7, #8]
 800ca0e:	f7ff ff23 	bl	800c858 <BSP_SD_ReadBlocks>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d107      	bne.n	800ca28 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ca18:	bf00      	nop
 800ca1a:	f7ff ff59 	bl	800c8d0 <BSP_SD_GetCardState>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1fa      	bne.n	800ca1a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ca28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3718      	adds	r7, #24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b086      	sub	sp, #24
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
 800ca3c:	603b      	str	r3, [r7, #0]
 800ca3e:	4603      	mov	r3, r0
 800ca40:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ca46:	f04f 33ff 	mov.w	r3, #4294967295
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	6879      	ldr	r1, [r7, #4]
 800ca4e:	68b8      	ldr	r0, [r7, #8]
 800ca50:	f7ff ff20 	bl	800c894 <BSP_SD_WriteBlocks>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d107      	bne.n	800ca6a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ca5a:	bf00      	nop
 800ca5c:	f7ff ff38 	bl	800c8d0 <BSP_SD_GetCardState>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1fa      	bne.n	800ca5c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3718      	adds	r7, #24
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b08c      	sub	sp, #48	@ 0x30
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	603a      	str	r2, [r7, #0]
 800ca7e:	71fb      	strb	r3, [r7, #7]
 800ca80:	460b      	mov	r3, r1
 800ca82:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ca8a:	4b25      	ldr	r3, [pc, #148]	@ (800cb20 <SD_ioctl+0xac>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <SD_ioctl+0x28>
 800ca98:	2303      	movs	r3, #3
 800ca9a:	e03c      	b.n	800cb16 <SD_ioctl+0xa2>

  switch (cmd)
 800ca9c:	79bb      	ldrb	r3, [r7, #6]
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	d834      	bhi.n	800cb0c <SD_ioctl+0x98>
 800caa2:	a201      	add	r2, pc, #4	@ (adr r2, 800caa8 <SD_ioctl+0x34>)
 800caa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa8:	0800cab9 	.word	0x0800cab9
 800caac:	0800cac1 	.word	0x0800cac1
 800cab0:	0800cad9 	.word	0x0800cad9
 800cab4:	0800caf3 	.word	0x0800caf3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cabe:	e028      	b.n	800cb12 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cac0:	f107 0308 	add.w	r3, r7, #8
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7ff ff13 	bl	800c8f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800caca:	6a3a      	ldr	r2, [r7, #32]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cad6:	e01c      	b.n	800cb12 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cad8:	f107 0308 	add.w	r3, r7, #8
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff ff07 	bl	800c8f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800caf0:	e00f      	b.n	800cb12 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800caf2:	f107 0308 	add.w	r3, r7, #8
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fefa 	bl	800c8f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafe:	0a5a      	lsrs	r2, r3, #9
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cb0a:	e002      	b.n	800cb12 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cb0c:	2304      	movs	r3, #4
 800cb0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cb12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3730      	adds	r7, #48	@ 0x30
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	2400000d 	.word	0x2400000d

0800cb24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb32:	2301      	movs	r3, #1
 800cb34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb3a:	4b1f      	ldr	r3, [pc, #124]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb3c:	7a5b      	ldrb	r3, [r3, #9]
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d131      	bne.n	800cba8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb44:	4b1c      	ldr	r3, [pc, #112]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb46:	7a5b      	ldrb	r3, [r3, #9]
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb4e:	2100      	movs	r1, #0
 800cb50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb52:	4b19      	ldr	r3, [pc, #100]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb54:	7a5b      	ldrb	r3, [r3, #9]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	4a17      	ldr	r2, [pc, #92]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	4413      	add	r3, r2
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb62:	4b15      	ldr	r3, [pc, #84]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb64:	7a5b      	ldrb	r3, [r3, #9]
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	461a      	mov	r2, r3
 800cb6a:	4b13      	ldr	r3, [pc, #76]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb6c:	4413      	add	r3, r2
 800cb6e:	79fa      	ldrb	r2, [r7, #7]
 800cb70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb72:	4b11      	ldr	r3, [pc, #68]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb74:	7a5b      	ldrb	r3, [r3, #9]
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	1c5a      	adds	r2, r3, #1
 800cb7a:	b2d1      	uxtb	r1, r2
 800cb7c:	4a0e      	ldr	r2, [pc, #56]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb7e:	7251      	strb	r1, [r2, #9]
 800cb80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb82:	7dbb      	ldrb	r3, [r7, #22]
 800cb84:	3330      	adds	r3, #48	@ 0x30
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	223a      	movs	r2, #58	@ 0x3a
 800cb92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	3302      	adds	r3, #2
 800cb98:	222f      	movs	r2, #47	@ 0x2f
 800cb9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	3303      	adds	r3, #3
 800cba0:	2200      	movs	r2, #0
 800cba2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	371c      	adds	r7, #28
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	24001124 	.word	0x24001124

0800cbbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff ffaa 	bl	800cb24 <FATFS_LinkDriverEx>
 800cbd0:	4603      	mov	r3, r0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <__cvt>:
 800cbda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbdc:	ed2d 8b02 	vpush	{d8}
 800cbe0:	eeb0 8b40 	vmov.f64	d8, d0
 800cbe4:	b085      	sub	sp, #20
 800cbe6:	4617      	mov	r7, r2
 800cbe8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800cbea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbec:	ee18 2a90 	vmov	r2, s17
 800cbf0:	f025 0520 	bic.w	r5, r5, #32
 800cbf4:	2a00      	cmp	r2, #0
 800cbf6:	bfb6      	itet	lt
 800cbf8:	222d      	movlt	r2, #45	@ 0x2d
 800cbfa:	2200      	movge	r2, #0
 800cbfc:	eeb1 8b40 	vneglt.f64	d8, d0
 800cc00:	2d46      	cmp	r5, #70	@ 0x46
 800cc02:	460c      	mov	r4, r1
 800cc04:	701a      	strb	r2, [r3, #0]
 800cc06:	d004      	beq.n	800cc12 <__cvt+0x38>
 800cc08:	2d45      	cmp	r5, #69	@ 0x45
 800cc0a:	d100      	bne.n	800cc0e <__cvt+0x34>
 800cc0c:	3401      	adds	r4, #1
 800cc0e:	2102      	movs	r1, #2
 800cc10:	e000      	b.n	800cc14 <__cvt+0x3a>
 800cc12:	2103      	movs	r1, #3
 800cc14:	ab03      	add	r3, sp, #12
 800cc16:	9301      	str	r3, [sp, #4]
 800cc18:	ab02      	add	r3, sp, #8
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	4622      	mov	r2, r4
 800cc1e:	4633      	mov	r3, r6
 800cc20:	eeb0 0b48 	vmov.f64	d0, d8
 800cc24:	f000 fe1c 	bl	800d860 <_dtoa_r>
 800cc28:	2d47      	cmp	r5, #71	@ 0x47
 800cc2a:	d114      	bne.n	800cc56 <__cvt+0x7c>
 800cc2c:	07fb      	lsls	r3, r7, #31
 800cc2e:	d50a      	bpl.n	800cc46 <__cvt+0x6c>
 800cc30:	1902      	adds	r2, r0, r4
 800cc32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3a:	bf08      	it	eq
 800cc3c:	9203      	streq	r2, [sp, #12]
 800cc3e:	2130      	movs	r1, #48	@ 0x30
 800cc40:	9b03      	ldr	r3, [sp, #12]
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d319      	bcc.n	800cc7a <__cvt+0xa0>
 800cc46:	9b03      	ldr	r3, [sp, #12]
 800cc48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc4a:	1a1b      	subs	r3, r3, r0
 800cc4c:	6013      	str	r3, [r2, #0]
 800cc4e:	b005      	add	sp, #20
 800cc50:	ecbd 8b02 	vpop	{d8}
 800cc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc56:	2d46      	cmp	r5, #70	@ 0x46
 800cc58:	eb00 0204 	add.w	r2, r0, r4
 800cc5c:	d1e9      	bne.n	800cc32 <__cvt+0x58>
 800cc5e:	7803      	ldrb	r3, [r0, #0]
 800cc60:	2b30      	cmp	r3, #48	@ 0x30
 800cc62:	d107      	bne.n	800cc74 <__cvt+0x9a>
 800cc64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6c:	bf1c      	itt	ne
 800cc6e:	f1c4 0401 	rsbne	r4, r4, #1
 800cc72:	6034      	strne	r4, [r6, #0]
 800cc74:	6833      	ldr	r3, [r6, #0]
 800cc76:	441a      	add	r2, r3
 800cc78:	e7db      	b.n	800cc32 <__cvt+0x58>
 800cc7a:	1c5c      	adds	r4, r3, #1
 800cc7c:	9403      	str	r4, [sp, #12]
 800cc7e:	7019      	strb	r1, [r3, #0]
 800cc80:	e7de      	b.n	800cc40 <__cvt+0x66>

0800cc82 <__exponent>:
 800cc82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc84:	2900      	cmp	r1, #0
 800cc86:	bfba      	itte	lt
 800cc88:	4249      	neglt	r1, r1
 800cc8a:	232d      	movlt	r3, #45	@ 0x2d
 800cc8c:	232b      	movge	r3, #43	@ 0x2b
 800cc8e:	2909      	cmp	r1, #9
 800cc90:	7002      	strb	r2, [r0, #0]
 800cc92:	7043      	strb	r3, [r0, #1]
 800cc94:	dd29      	ble.n	800ccea <__exponent+0x68>
 800cc96:	f10d 0307 	add.w	r3, sp, #7
 800cc9a:	461d      	mov	r5, r3
 800cc9c:	270a      	movs	r7, #10
 800cc9e:	461a      	mov	r2, r3
 800cca0:	fbb1 f6f7 	udiv	r6, r1, r7
 800cca4:	fb07 1416 	mls	r4, r7, r6, r1
 800cca8:	3430      	adds	r4, #48	@ 0x30
 800ccaa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ccae:	460c      	mov	r4, r1
 800ccb0:	2c63      	cmp	r4, #99	@ 0x63
 800ccb2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	dcf1      	bgt.n	800cc9e <__exponent+0x1c>
 800ccba:	3130      	adds	r1, #48	@ 0x30
 800ccbc:	1e94      	subs	r4, r2, #2
 800ccbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ccc2:	1c41      	adds	r1, r0, #1
 800ccc4:	4623      	mov	r3, r4
 800ccc6:	42ab      	cmp	r3, r5
 800ccc8:	d30a      	bcc.n	800cce0 <__exponent+0x5e>
 800ccca:	f10d 0309 	add.w	r3, sp, #9
 800ccce:	1a9b      	subs	r3, r3, r2
 800ccd0:	42ac      	cmp	r4, r5
 800ccd2:	bf88      	it	hi
 800ccd4:	2300      	movhi	r3, #0
 800ccd6:	3302      	adds	r3, #2
 800ccd8:	4403      	add	r3, r0
 800ccda:	1a18      	subs	r0, r3, r0
 800ccdc:	b003      	add	sp, #12
 800ccde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cce0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cce4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cce8:	e7ed      	b.n	800ccc6 <__exponent+0x44>
 800ccea:	2330      	movs	r3, #48	@ 0x30
 800ccec:	3130      	adds	r1, #48	@ 0x30
 800ccee:	7083      	strb	r3, [r0, #2]
 800ccf0:	70c1      	strb	r1, [r0, #3]
 800ccf2:	1d03      	adds	r3, r0, #4
 800ccf4:	e7f1      	b.n	800ccda <__exponent+0x58>
	...

0800ccf8 <_printf_float>:
 800ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	b08d      	sub	sp, #52	@ 0x34
 800ccfe:	460c      	mov	r4, r1
 800cd00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cd04:	4616      	mov	r6, r2
 800cd06:	461f      	mov	r7, r3
 800cd08:	4605      	mov	r5, r0
 800cd0a:	f000 fca9 	bl	800d660 <_localeconv_r>
 800cd0e:	f8d0 b000 	ldr.w	fp, [r0]
 800cd12:	4658      	mov	r0, fp
 800cd14:	f7f3 fb34 	bl	8000380 <strlen>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd1c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cd24:	6822      	ldr	r2, [r4, #0]
 800cd26:	9005      	str	r0, [sp, #20]
 800cd28:	3307      	adds	r3, #7
 800cd2a:	f023 0307 	bic.w	r3, r3, #7
 800cd2e:	f103 0108 	add.w	r1, r3, #8
 800cd32:	f8c8 1000 	str.w	r1, [r8]
 800cd36:	ed93 0b00 	vldr	d0, [r3]
 800cd3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800cf98 <_printf_float+0x2a0>
 800cd3e:	eeb0 7bc0 	vabs.f64	d7, d0
 800cd42:	eeb4 7b46 	vcmp.f64	d7, d6
 800cd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd4a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800cd4e:	dd24      	ble.n	800cd9a <_printf_float+0xa2>
 800cd50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd58:	d502      	bpl.n	800cd60 <_printf_float+0x68>
 800cd5a:	232d      	movs	r3, #45	@ 0x2d
 800cd5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd60:	498f      	ldr	r1, [pc, #572]	@ (800cfa0 <_printf_float+0x2a8>)
 800cd62:	4b90      	ldr	r3, [pc, #576]	@ (800cfa4 <_printf_float+0x2ac>)
 800cd64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800cd68:	bf8c      	ite	hi
 800cd6a:	4688      	movhi	r8, r1
 800cd6c:	4698      	movls	r8, r3
 800cd6e:	f022 0204 	bic.w	r2, r2, #4
 800cd72:	2303      	movs	r3, #3
 800cd74:	6123      	str	r3, [r4, #16]
 800cd76:	6022      	str	r2, [r4, #0]
 800cd78:	f04f 0a00 	mov.w	sl, #0
 800cd7c:	9700      	str	r7, [sp, #0]
 800cd7e:	4633      	mov	r3, r6
 800cd80:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd82:	4621      	mov	r1, r4
 800cd84:	4628      	mov	r0, r5
 800cd86:	f000 f9d1 	bl	800d12c <_printf_common>
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	f040 8089 	bne.w	800cea2 <_printf_float+0x1aa>
 800cd90:	f04f 30ff 	mov.w	r0, #4294967295
 800cd94:	b00d      	add	sp, #52	@ 0x34
 800cd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9a:	eeb4 0b40 	vcmp.f64	d0, d0
 800cd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda2:	d709      	bvc.n	800cdb8 <_printf_float+0xc0>
 800cda4:	ee10 3a90 	vmov	r3, s1
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	bfbc      	itt	lt
 800cdac:	232d      	movlt	r3, #45	@ 0x2d
 800cdae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cdb2:	497d      	ldr	r1, [pc, #500]	@ (800cfa8 <_printf_float+0x2b0>)
 800cdb4:	4b7d      	ldr	r3, [pc, #500]	@ (800cfac <_printf_float+0x2b4>)
 800cdb6:	e7d5      	b.n	800cd64 <_printf_float+0x6c>
 800cdb8:	6863      	ldr	r3, [r4, #4]
 800cdba:	1c59      	adds	r1, r3, #1
 800cdbc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800cdc0:	d139      	bne.n	800ce36 <_printf_float+0x13e>
 800cdc2:	2306      	movs	r3, #6
 800cdc4:	6063      	str	r3, [r4, #4]
 800cdc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cdca:	2300      	movs	r3, #0
 800cdcc:	6022      	str	r2, [r4, #0]
 800cdce:	9303      	str	r3, [sp, #12]
 800cdd0:	ab0a      	add	r3, sp, #40	@ 0x28
 800cdd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cdd6:	ab09      	add	r3, sp, #36	@ 0x24
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	6861      	ldr	r1, [r4, #4]
 800cddc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cde0:	4628      	mov	r0, r5
 800cde2:	f7ff fefa 	bl	800cbda <__cvt>
 800cde6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cdea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cdec:	4680      	mov	r8, r0
 800cdee:	d129      	bne.n	800ce44 <_printf_float+0x14c>
 800cdf0:	1cc8      	adds	r0, r1, #3
 800cdf2:	db02      	blt.n	800cdfa <_printf_float+0x102>
 800cdf4:	6863      	ldr	r3, [r4, #4]
 800cdf6:	4299      	cmp	r1, r3
 800cdf8:	dd41      	ble.n	800ce7e <_printf_float+0x186>
 800cdfa:	f1a9 0902 	sub.w	r9, r9, #2
 800cdfe:	fa5f f989 	uxtb.w	r9, r9
 800ce02:	3901      	subs	r1, #1
 800ce04:	464a      	mov	r2, r9
 800ce06:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ce0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce0c:	f7ff ff39 	bl	800cc82 <__exponent>
 800ce10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce12:	1813      	adds	r3, r2, r0
 800ce14:	2a01      	cmp	r2, #1
 800ce16:	4682      	mov	sl, r0
 800ce18:	6123      	str	r3, [r4, #16]
 800ce1a:	dc02      	bgt.n	800ce22 <_printf_float+0x12a>
 800ce1c:	6822      	ldr	r2, [r4, #0]
 800ce1e:	07d2      	lsls	r2, r2, #31
 800ce20:	d501      	bpl.n	800ce26 <_printf_float+0x12e>
 800ce22:	3301      	adds	r3, #1
 800ce24:	6123      	str	r3, [r4, #16]
 800ce26:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0a6      	beq.n	800cd7c <_printf_float+0x84>
 800ce2e:	232d      	movs	r3, #45	@ 0x2d
 800ce30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce34:	e7a2      	b.n	800cd7c <_printf_float+0x84>
 800ce36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ce3a:	d1c4      	bne.n	800cdc6 <_printf_float+0xce>
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1c2      	bne.n	800cdc6 <_printf_float+0xce>
 800ce40:	2301      	movs	r3, #1
 800ce42:	e7bf      	b.n	800cdc4 <_printf_float+0xcc>
 800ce44:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ce48:	d9db      	bls.n	800ce02 <_printf_float+0x10a>
 800ce4a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ce4e:	d118      	bne.n	800ce82 <_printf_float+0x18a>
 800ce50:	2900      	cmp	r1, #0
 800ce52:	6863      	ldr	r3, [r4, #4]
 800ce54:	dd0b      	ble.n	800ce6e <_printf_float+0x176>
 800ce56:	6121      	str	r1, [r4, #16]
 800ce58:	b913      	cbnz	r3, 800ce60 <_printf_float+0x168>
 800ce5a:	6822      	ldr	r2, [r4, #0]
 800ce5c:	07d0      	lsls	r0, r2, #31
 800ce5e:	d502      	bpl.n	800ce66 <_printf_float+0x16e>
 800ce60:	3301      	adds	r3, #1
 800ce62:	440b      	add	r3, r1
 800ce64:	6123      	str	r3, [r4, #16]
 800ce66:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ce68:	f04f 0a00 	mov.w	sl, #0
 800ce6c:	e7db      	b.n	800ce26 <_printf_float+0x12e>
 800ce6e:	b913      	cbnz	r3, 800ce76 <_printf_float+0x17e>
 800ce70:	6822      	ldr	r2, [r4, #0]
 800ce72:	07d2      	lsls	r2, r2, #31
 800ce74:	d501      	bpl.n	800ce7a <_printf_float+0x182>
 800ce76:	3302      	adds	r3, #2
 800ce78:	e7f4      	b.n	800ce64 <_printf_float+0x16c>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e7f2      	b.n	800ce64 <_printf_float+0x16c>
 800ce7e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ce82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce84:	4299      	cmp	r1, r3
 800ce86:	db05      	blt.n	800ce94 <_printf_float+0x19c>
 800ce88:	6823      	ldr	r3, [r4, #0]
 800ce8a:	6121      	str	r1, [r4, #16]
 800ce8c:	07d8      	lsls	r0, r3, #31
 800ce8e:	d5ea      	bpl.n	800ce66 <_printf_float+0x16e>
 800ce90:	1c4b      	adds	r3, r1, #1
 800ce92:	e7e7      	b.n	800ce64 <_printf_float+0x16c>
 800ce94:	2900      	cmp	r1, #0
 800ce96:	bfd4      	ite	le
 800ce98:	f1c1 0202 	rsble	r2, r1, #2
 800ce9c:	2201      	movgt	r2, #1
 800ce9e:	4413      	add	r3, r2
 800cea0:	e7e0      	b.n	800ce64 <_printf_float+0x16c>
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	055a      	lsls	r2, r3, #21
 800cea6:	d407      	bmi.n	800ceb8 <_printf_float+0x1c0>
 800cea8:	6923      	ldr	r3, [r4, #16]
 800ceaa:	4642      	mov	r2, r8
 800ceac:	4631      	mov	r1, r6
 800ceae:	4628      	mov	r0, r5
 800ceb0:	47b8      	blx	r7
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	d12a      	bne.n	800cf0c <_printf_float+0x214>
 800ceb6:	e76b      	b.n	800cd90 <_printf_float+0x98>
 800ceb8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cebc:	f240 80e0 	bls.w	800d080 <_printf_float+0x388>
 800cec0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800cec4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cecc:	d133      	bne.n	800cf36 <_printf_float+0x23e>
 800cece:	4a38      	ldr	r2, [pc, #224]	@ (800cfb0 <_printf_float+0x2b8>)
 800ced0:	2301      	movs	r3, #1
 800ced2:	4631      	mov	r1, r6
 800ced4:	4628      	mov	r0, r5
 800ced6:	47b8      	blx	r7
 800ced8:	3001      	adds	r0, #1
 800ceda:	f43f af59 	beq.w	800cd90 <_printf_float+0x98>
 800cede:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cee2:	4543      	cmp	r3, r8
 800cee4:	db02      	blt.n	800ceec <_printf_float+0x1f4>
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	07d8      	lsls	r0, r3, #31
 800ceea:	d50f      	bpl.n	800cf0c <_printf_float+0x214>
 800ceec:	9b05      	ldr	r3, [sp, #20]
 800ceee:	465a      	mov	r2, fp
 800cef0:	4631      	mov	r1, r6
 800cef2:	4628      	mov	r0, r5
 800cef4:	47b8      	blx	r7
 800cef6:	3001      	adds	r0, #1
 800cef8:	f43f af4a 	beq.w	800cd90 <_printf_float+0x98>
 800cefc:	f04f 0900 	mov.w	r9, #0
 800cf00:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf04:	f104 0a1a 	add.w	sl, r4, #26
 800cf08:	45c8      	cmp	r8, r9
 800cf0a:	dc09      	bgt.n	800cf20 <_printf_float+0x228>
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	079b      	lsls	r3, r3, #30
 800cf10:	f100 8107 	bmi.w	800d122 <_printf_float+0x42a>
 800cf14:	68e0      	ldr	r0, [r4, #12]
 800cf16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf18:	4298      	cmp	r0, r3
 800cf1a:	bfb8      	it	lt
 800cf1c:	4618      	movlt	r0, r3
 800cf1e:	e739      	b.n	800cd94 <_printf_float+0x9c>
 800cf20:	2301      	movs	r3, #1
 800cf22:	4652      	mov	r2, sl
 800cf24:	4631      	mov	r1, r6
 800cf26:	4628      	mov	r0, r5
 800cf28:	47b8      	blx	r7
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	f43f af30 	beq.w	800cd90 <_printf_float+0x98>
 800cf30:	f109 0901 	add.w	r9, r9, #1
 800cf34:	e7e8      	b.n	800cf08 <_printf_float+0x210>
 800cf36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	dc3b      	bgt.n	800cfb4 <_printf_float+0x2bc>
 800cf3c:	4a1c      	ldr	r2, [pc, #112]	@ (800cfb0 <_printf_float+0x2b8>)
 800cf3e:	2301      	movs	r3, #1
 800cf40:	4631      	mov	r1, r6
 800cf42:	4628      	mov	r0, r5
 800cf44:	47b8      	blx	r7
 800cf46:	3001      	adds	r0, #1
 800cf48:	f43f af22 	beq.w	800cd90 <_printf_float+0x98>
 800cf4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cf50:	ea59 0303 	orrs.w	r3, r9, r3
 800cf54:	d102      	bne.n	800cf5c <_printf_float+0x264>
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	07d9      	lsls	r1, r3, #31
 800cf5a:	d5d7      	bpl.n	800cf0c <_printf_float+0x214>
 800cf5c:	9b05      	ldr	r3, [sp, #20]
 800cf5e:	465a      	mov	r2, fp
 800cf60:	4631      	mov	r1, r6
 800cf62:	4628      	mov	r0, r5
 800cf64:	47b8      	blx	r7
 800cf66:	3001      	adds	r0, #1
 800cf68:	f43f af12 	beq.w	800cd90 <_printf_float+0x98>
 800cf6c:	f04f 0a00 	mov.w	sl, #0
 800cf70:	f104 0b1a 	add.w	fp, r4, #26
 800cf74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf76:	425b      	negs	r3, r3
 800cf78:	4553      	cmp	r3, sl
 800cf7a:	dc01      	bgt.n	800cf80 <_printf_float+0x288>
 800cf7c:	464b      	mov	r3, r9
 800cf7e:	e794      	b.n	800ceaa <_printf_float+0x1b2>
 800cf80:	2301      	movs	r3, #1
 800cf82:	465a      	mov	r2, fp
 800cf84:	4631      	mov	r1, r6
 800cf86:	4628      	mov	r0, r5
 800cf88:	47b8      	blx	r7
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	f43f af00 	beq.w	800cd90 <_printf_float+0x98>
 800cf90:	f10a 0a01 	add.w	sl, sl, #1
 800cf94:	e7ee      	b.n	800cf74 <_printf_float+0x27c>
 800cf96:	bf00      	nop
 800cf98:	ffffffff 	.word	0xffffffff
 800cf9c:	7fefffff 	.word	0x7fefffff
 800cfa0:	0800f420 	.word	0x0800f420
 800cfa4:	0800f41c 	.word	0x0800f41c
 800cfa8:	0800f428 	.word	0x0800f428
 800cfac:	0800f424 	.word	0x0800f424
 800cfb0:	0800f42c 	.word	0x0800f42c
 800cfb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfba:	4553      	cmp	r3, sl
 800cfbc:	bfa8      	it	ge
 800cfbe:	4653      	movge	r3, sl
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	4699      	mov	r9, r3
 800cfc4:	dc37      	bgt.n	800d036 <_printf_float+0x33e>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	9307      	str	r3, [sp, #28]
 800cfca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfce:	f104 021a 	add.w	r2, r4, #26
 800cfd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfd4:	9907      	ldr	r1, [sp, #28]
 800cfd6:	9306      	str	r3, [sp, #24]
 800cfd8:	eba3 0309 	sub.w	r3, r3, r9
 800cfdc:	428b      	cmp	r3, r1
 800cfde:	dc31      	bgt.n	800d044 <_printf_float+0x34c>
 800cfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe2:	459a      	cmp	sl, r3
 800cfe4:	dc3b      	bgt.n	800d05e <_printf_float+0x366>
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	07da      	lsls	r2, r3, #31
 800cfea:	d438      	bmi.n	800d05e <_printf_float+0x366>
 800cfec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfee:	ebaa 0903 	sub.w	r9, sl, r3
 800cff2:	9b06      	ldr	r3, [sp, #24]
 800cff4:	ebaa 0303 	sub.w	r3, sl, r3
 800cff8:	4599      	cmp	r9, r3
 800cffa:	bfa8      	it	ge
 800cffc:	4699      	movge	r9, r3
 800cffe:	f1b9 0f00 	cmp.w	r9, #0
 800d002:	dc34      	bgt.n	800d06e <_printf_float+0x376>
 800d004:	f04f 0800 	mov.w	r8, #0
 800d008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d00c:	f104 0b1a 	add.w	fp, r4, #26
 800d010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d012:	ebaa 0303 	sub.w	r3, sl, r3
 800d016:	eba3 0309 	sub.w	r3, r3, r9
 800d01a:	4543      	cmp	r3, r8
 800d01c:	f77f af76 	ble.w	800cf0c <_printf_float+0x214>
 800d020:	2301      	movs	r3, #1
 800d022:	465a      	mov	r2, fp
 800d024:	4631      	mov	r1, r6
 800d026:	4628      	mov	r0, r5
 800d028:	47b8      	blx	r7
 800d02a:	3001      	adds	r0, #1
 800d02c:	f43f aeb0 	beq.w	800cd90 <_printf_float+0x98>
 800d030:	f108 0801 	add.w	r8, r8, #1
 800d034:	e7ec      	b.n	800d010 <_printf_float+0x318>
 800d036:	4642      	mov	r2, r8
 800d038:	4631      	mov	r1, r6
 800d03a:	4628      	mov	r0, r5
 800d03c:	47b8      	blx	r7
 800d03e:	3001      	adds	r0, #1
 800d040:	d1c1      	bne.n	800cfc6 <_printf_float+0x2ce>
 800d042:	e6a5      	b.n	800cd90 <_printf_float+0x98>
 800d044:	2301      	movs	r3, #1
 800d046:	4631      	mov	r1, r6
 800d048:	4628      	mov	r0, r5
 800d04a:	9206      	str	r2, [sp, #24]
 800d04c:	47b8      	blx	r7
 800d04e:	3001      	adds	r0, #1
 800d050:	f43f ae9e 	beq.w	800cd90 <_printf_float+0x98>
 800d054:	9b07      	ldr	r3, [sp, #28]
 800d056:	9a06      	ldr	r2, [sp, #24]
 800d058:	3301      	adds	r3, #1
 800d05a:	9307      	str	r3, [sp, #28]
 800d05c:	e7b9      	b.n	800cfd2 <_printf_float+0x2da>
 800d05e:	9b05      	ldr	r3, [sp, #20]
 800d060:	465a      	mov	r2, fp
 800d062:	4631      	mov	r1, r6
 800d064:	4628      	mov	r0, r5
 800d066:	47b8      	blx	r7
 800d068:	3001      	adds	r0, #1
 800d06a:	d1bf      	bne.n	800cfec <_printf_float+0x2f4>
 800d06c:	e690      	b.n	800cd90 <_printf_float+0x98>
 800d06e:	9a06      	ldr	r2, [sp, #24]
 800d070:	464b      	mov	r3, r9
 800d072:	4442      	add	r2, r8
 800d074:	4631      	mov	r1, r6
 800d076:	4628      	mov	r0, r5
 800d078:	47b8      	blx	r7
 800d07a:	3001      	adds	r0, #1
 800d07c:	d1c2      	bne.n	800d004 <_printf_float+0x30c>
 800d07e:	e687      	b.n	800cd90 <_printf_float+0x98>
 800d080:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800d084:	f1b9 0f01 	cmp.w	r9, #1
 800d088:	dc01      	bgt.n	800d08e <_printf_float+0x396>
 800d08a:	07db      	lsls	r3, r3, #31
 800d08c:	d536      	bpl.n	800d0fc <_printf_float+0x404>
 800d08e:	2301      	movs	r3, #1
 800d090:	4642      	mov	r2, r8
 800d092:	4631      	mov	r1, r6
 800d094:	4628      	mov	r0, r5
 800d096:	47b8      	blx	r7
 800d098:	3001      	adds	r0, #1
 800d09a:	f43f ae79 	beq.w	800cd90 <_printf_float+0x98>
 800d09e:	9b05      	ldr	r3, [sp, #20]
 800d0a0:	465a      	mov	r2, fp
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	47b8      	blx	r7
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	f43f ae71 	beq.w	800cd90 <_printf_float+0x98>
 800d0ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800d0b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ba:	f109 39ff 	add.w	r9, r9, #4294967295
 800d0be:	d018      	beq.n	800d0f2 <_printf_float+0x3fa>
 800d0c0:	464b      	mov	r3, r9
 800d0c2:	f108 0201 	add.w	r2, r8, #1
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	47b8      	blx	r7
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	d10c      	bne.n	800d0ea <_printf_float+0x3f2>
 800d0d0:	e65e      	b.n	800cd90 <_printf_float+0x98>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	465a      	mov	r2, fp
 800d0d6:	4631      	mov	r1, r6
 800d0d8:	4628      	mov	r0, r5
 800d0da:	47b8      	blx	r7
 800d0dc:	3001      	adds	r0, #1
 800d0de:	f43f ae57 	beq.w	800cd90 <_printf_float+0x98>
 800d0e2:	f108 0801 	add.w	r8, r8, #1
 800d0e6:	45c8      	cmp	r8, r9
 800d0e8:	dbf3      	blt.n	800d0d2 <_printf_float+0x3da>
 800d0ea:	4653      	mov	r3, sl
 800d0ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d0f0:	e6dc      	b.n	800ceac <_printf_float+0x1b4>
 800d0f2:	f04f 0800 	mov.w	r8, #0
 800d0f6:	f104 0b1a 	add.w	fp, r4, #26
 800d0fa:	e7f4      	b.n	800d0e6 <_printf_float+0x3ee>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	4642      	mov	r2, r8
 800d100:	e7e1      	b.n	800d0c6 <_printf_float+0x3ce>
 800d102:	2301      	movs	r3, #1
 800d104:	464a      	mov	r2, r9
 800d106:	4631      	mov	r1, r6
 800d108:	4628      	mov	r0, r5
 800d10a:	47b8      	blx	r7
 800d10c:	3001      	adds	r0, #1
 800d10e:	f43f ae3f 	beq.w	800cd90 <_printf_float+0x98>
 800d112:	f108 0801 	add.w	r8, r8, #1
 800d116:	68e3      	ldr	r3, [r4, #12]
 800d118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d11a:	1a5b      	subs	r3, r3, r1
 800d11c:	4543      	cmp	r3, r8
 800d11e:	dcf0      	bgt.n	800d102 <_printf_float+0x40a>
 800d120:	e6f8      	b.n	800cf14 <_printf_float+0x21c>
 800d122:	f04f 0800 	mov.w	r8, #0
 800d126:	f104 0919 	add.w	r9, r4, #25
 800d12a:	e7f4      	b.n	800d116 <_printf_float+0x41e>

0800d12c <_printf_common>:
 800d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d130:	4616      	mov	r6, r2
 800d132:	4698      	mov	r8, r3
 800d134:	688a      	ldr	r2, [r1, #8]
 800d136:	690b      	ldr	r3, [r1, #16]
 800d138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d13c:	4293      	cmp	r3, r2
 800d13e:	bfb8      	it	lt
 800d140:	4613      	movlt	r3, r2
 800d142:	6033      	str	r3, [r6, #0]
 800d144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d148:	4607      	mov	r7, r0
 800d14a:	460c      	mov	r4, r1
 800d14c:	b10a      	cbz	r2, 800d152 <_printf_common+0x26>
 800d14e:	3301      	adds	r3, #1
 800d150:	6033      	str	r3, [r6, #0]
 800d152:	6823      	ldr	r3, [r4, #0]
 800d154:	0699      	lsls	r1, r3, #26
 800d156:	bf42      	ittt	mi
 800d158:	6833      	ldrmi	r3, [r6, #0]
 800d15a:	3302      	addmi	r3, #2
 800d15c:	6033      	strmi	r3, [r6, #0]
 800d15e:	6825      	ldr	r5, [r4, #0]
 800d160:	f015 0506 	ands.w	r5, r5, #6
 800d164:	d106      	bne.n	800d174 <_printf_common+0x48>
 800d166:	f104 0a19 	add.w	sl, r4, #25
 800d16a:	68e3      	ldr	r3, [r4, #12]
 800d16c:	6832      	ldr	r2, [r6, #0]
 800d16e:	1a9b      	subs	r3, r3, r2
 800d170:	42ab      	cmp	r3, r5
 800d172:	dc26      	bgt.n	800d1c2 <_printf_common+0x96>
 800d174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d178:	6822      	ldr	r2, [r4, #0]
 800d17a:	3b00      	subs	r3, #0
 800d17c:	bf18      	it	ne
 800d17e:	2301      	movne	r3, #1
 800d180:	0692      	lsls	r2, r2, #26
 800d182:	d42b      	bmi.n	800d1dc <_printf_common+0xb0>
 800d184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d188:	4641      	mov	r1, r8
 800d18a:	4638      	mov	r0, r7
 800d18c:	47c8      	blx	r9
 800d18e:	3001      	adds	r0, #1
 800d190:	d01e      	beq.n	800d1d0 <_printf_common+0xa4>
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	6922      	ldr	r2, [r4, #16]
 800d196:	f003 0306 	and.w	r3, r3, #6
 800d19a:	2b04      	cmp	r3, #4
 800d19c:	bf02      	ittt	eq
 800d19e:	68e5      	ldreq	r5, [r4, #12]
 800d1a0:	6833      	ldreq	r3, [r6, #0]
 800d1a2:	1aed      	subeq	r5, r5, r3
 800d1a4:	68a3      	ldr	r3, [r4, #8]
 800d1a6:	bf0c      	ite	eq
 800d1a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1ac:	2500      	movne	r5, #0
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	bfc4      	itt	gt
 800d1b2:	1a9b      	subgt	r3, r3, r2
 800d1b4:	18ed      	addgt	r5, r5, r3
 800d1b6:	2600      	movs	r6, #0
 800d1b8:	341a      	adds	r4, #26
 800d1ba:	42b5      	cmp	r5, r6
 800d1bc:	d11a      	bne.n	800d1f4 <_printf_common+0xc8>
 800d1be:	2000      	movs	r0, #0
 800d1c0:	e008      	b.n	800d1d4 <_printf_common+0xa8>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	4652      	mov	r2, sl
 800d1c6:	4641      	mov	r1, r8
 800d1c8:	4638      	mov	r0, r7
 800d1ca:	47c8      	blx	r9
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	d103      	bne.n	800d1d8 <_printf_common+0xac>
 800d1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d8:	3501      	adds	r5, #1
 800d1da:	e7c6      	b.n	800d16a <_printf_common+0x3e>
 800d1dc:	18e1      	adds	r1, r4, r3
 800d1de:	1c5a      	adds	r2, r3, #1
 800d1e0:	2030      	movs	r0, #48	@ 0x30
 800d1e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d1e6:	4422      	add	r2, r4
 800d1e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d1ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d1f0:	3302      	adds	r3, #2
 800d1f2:	e7c7      	b.n	800d184 <_printf_common+0x58>
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	4641      	mov	r1, r8
 800d1fa:	4638      	mov	r0, r7
 800d1fc:	47c8      	blx	r9
 800d1fe:	3001      	adds	r0, #1
 800d200:	d0e6      	beq.n	800d1d0 <_printf_common+0xa4>
 800d202:	3601      	adds	r6, #1
 800d204:	e7d9      	b.n	800d1ba <_printf_common+0x8e>
	...

0800d208 <_printf_i>:
 800d208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d20c:	7e0f      	ldrb	r7, [r1, #24]
 800d20e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d210:	2f78      	cmp	r7, #120	@ 0x78
 800d212:	4691      	mov	r9, r2
 800d214:	4680      	mov	r8, r0
 800d216:	460c      	mov	r4, r1
 800d218:	469a      	mov	sl, r3
 800d21a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d21e:	d807      	bhi.n	800d230 <_printf_i+0x28>
 800d220:	2f62      	cmp	r7, #98	@ 0x62
 800d222:	d80a      	bhi.n	800d23a <_printf_i+0x32>
 800d224:	2f00      	cmp	r7, #0
 800d226:	f000 80d1 	beq.w	800d3cc <_printf_i+0x1c4>
 800d22a:	2f58      	cmp	r7, #88	@ 0x58
 800d22c:	f000 80b8 	beq.w	800d3a0 <_printf_i+0x198>
 800d230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d238:	e03a      	b.n	800d2b0 <_printf_i+0xa8>
 800d23a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d23e:	2b15      	cmp	r3, #21
 800d240:	d8f6      	bhi.n	800d230 <_printf_i+0x28>
 800d242:	a101      	add	r1, pc, #4	@ (adr r1, 800d248 <_printf_i+0x40>)
 800d244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d248:	0800d2a1 	.word	0x0800d2a1
 800d24c:	0800d2b5 	.word	0x0800d2b5
 800d250:	0800d231 	.word	0x0800d231
 800d254:	0800d231 	.word	0x0800d231
 800d258:	0800d231 	.word	0x0800d231
 800d25c:	0800d231 	.word	0x0800d231
 800d260:	0800d2b5 	.word	0x0800d2b5
 800d264:	0800d231 	.word	0x0800d231
 800d268:	0800d231 	.word	0x0800d231
 800d26c:	0800d231 	.word	0x0800d231
 800d270:	0800d231 	.word	0x0800d231
 800d274:	0800d3b3 	.word	0x0800d3b3
 800d278:	0800d2df 	.word	0x0800d2df
 800d27c:	0800d36d 	.word	0x0800d36d
 800d280:	0800d231 	.word	0x0800d231
 800d284:	0800d231 	.word	0x0800d231
 800d288:	0800d3d5 	.word	0x0800d3d5
 800d28c:	0800d231 	.word	0x0800d231
 800d290:	0800d2df 	.word	0x0800d2df
 800d294:	0800d231 	.word	0x0800d231
 800d298:	0800d231 	.word	0x0800d231
 800d29c:	0800d375 	.word	0x0800d375
 800d2a0:	6833      	ldr	r3, [r6, #0]
 800d2a2:	1d1a      	adds	r2, r3, #4
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6032      	str	r2, [r6, #0]
 800d2a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e09c      	b.n	800d3ee <_printf_i+0x1e6>
 800d2b4:	6833      	ldr	r3, [r6, #0]
 800d2b6:	6820      	ldr	r0, [r4, #0]
 800d2b8:	1d19      	adds	r1, r3, #4
 800d2ba:	6031      	str	r1, [r6, #0]
 800d2bc:	0606      	lsls	r6, r0, #24
 800d2be:	d501      	bpl.n	800d2c4 <_printf_i+0xbc>
 800d2c0:	681d      	ldr	r5, [r3, #0]
 800d2c2:	e003      	b.n	800d2cc <_printf_i+0xc4>
 800d2c4:	0645      	lsls	r5, r0, #25
 800d2c6:	d5fb      	bpl.n	800d2c0 <_printf_i+0xb8>
 800d2c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d2cc:	2d00      	cmp	r5, #0
 800d2ce:	da03      	bge.n	800d2d8 <_printf_i+0xd0>
 800d2d0:	232d      	movs	r3, #45	@ 0x2d
 800d2d2:	426d      	negs	r5, r5
 800d2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2d8:	4858      	ldr	r0, [pc, #352]	@ (800d43c <_printf_i+0x234>)
 800d2da:	230a      	movs	r3, #10
 800d2dc:	e011      	b.n	800d302 <_printf_i+0xfa>
 800d2de:	6821      	ldr	r1, [r4, #0]
 800d2e0:	6833      	ldr	r3, [r6, #0]
 800d2e2:	0608      	lsls	r0, r1, #24
 800d2e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d2e8:	d402      	bmi.n	800d2f0 <_printf_i+0xe8>
 800d2ea:	0649      	lsls	r1, r1, #25
 800d2ec:	bf48      	it	mi
 800d2ee:	b2ad      	uxthmi	r5, r5
 800d2f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d2f2:	4852      	ldr	r0, [pc, #328]	@ (800d43c <_printf_i+0x234>)
 800d2f4:	6033      	str	r3, [r6, #0]
 800d2f6:	bf14      	ite	ne
 800d2f8:	230a      	movne	r3, #10
 800d2fa:	2308      	moveq	r3, #8
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d302:	6866      	ldr	r6, [r4, #4]
 800d304:	60a6      	str	r6, [r4, #8]
 800d306:	2e00      	cmp	r6, #0
 800d308:	db05      	blt.n	800d316 <_printf_i+0x10e>
 800d30a:	6821      	ldr	r1, [r4, #0]
 800d30c:	432e      	orrs	r6, r5
 800d30e:	f021 0104 	bic.w	r1, r1, #4
 800d312:	6021      	str	r1, [r4, #0]
 800d314:	d04b      	beq.n	800d3ae <_printf_i+0x1a6>
 800d316:	4616      	mov	r6, r2
 800d318:	fbb5 f1f3 	udiv	r1, r5, r3
 800d31c:	fb03 5711 	mls	r7, r3, r1, r5
 800d320:	5dc7      	ldrb	r7, [r0, r7]
 800d322:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d326:	462f      	mov	r7, r5
 800d328:	42bb      	cmp	r3, r7
 800d32a:	460d      	mov	r5, r1
 800d32c:	d9f4      	bls.n	800d318 <_printf_i+0x110>
 800d32e:	2b08      	cmp	r3, #8
 800d330:	d10b      	bne.n	800d34a <_printf_i+0x142>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	07df      	lsls	r7, r3, #31
 800d336:	d508      	bpl.n	800d34a <_printf_i+0x142>
 800d338:	6923      	ldr	r3, [r4, #16]
 800d33a:	6861      	ldr	r1, [r4, #4]
 800d33c:	4299      	cmp	r1, r3
 800d33e:	bfde      	ittt	le
 800d340:	2330      	movle	r3, #48	@ 0x30
 800d342:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d346:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d34a:	1b92      	subs	r2, r2, r6
 800d34c:	6122      	str	r2, [r4, #16]
 800d34e:	f8cd a000 	str.w	sl, [sp]
 800d352:	464b      	mov	r3, r9
 800d354:	aa03      	add	r2, sp, #12
 800d356:	4621      	mov	r1, r4
 800d358:	4640      	mov	r0, r8
 800d35a:	f7ff fee7 	bl	800d12c <_printf_common>
 800d35e:	3001      	adds	r0, #1
 800d360:	d14a      	bne.n	800d3f8 <_printf_i+0x1f0>
 800d362:	f04f 30ff 	mov.w	r0, #4294967295
 800d366:	b004      	add	sp, #16
 800d368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	f043 0320 	orr.w	r3, r3, #32
 800d372:	6023      	str	r3, [r4, #0]
 800d374:	4832      	ldr	r0, [pc, #200]	@ (800d440 <_printf_i+0x238>)
 800d376:	2778      	movs	r7, #120	@ 0x78
 800d378:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	6831      	ldr	r1, [r6, #0]
 800d380:	061f      	lsls	r7, r3, #24
 800d382:	f851 5b04 	ldr.w	r5, [r1], #4
 800d386:	d402      	bmi.n	800d38e <_printf_i+0x186>
 800d388:	065f      	lsls	r7, r3, #25
 800d38a:	bf48      	it	mi
 800d38c:	b2ad      	uxthmi	r5, r5
 800d38e:	6031      	str	r1, [r6, #0]
 800d390:	07d9      	lsls	r1, r3, #31
 800d392:	bf44      	itt	mi
 800d394:	f043 0320 	orrmi.w	r3, r3, #32
 800d398:	6023      	strmi	r3, [r4, #0]
 800d39a:	b11d      	cbz	r5, 800d3a4 <_printf_i+0x19c>
 800d39c:	2310      	movs	r3, #16
 800d39e:	e7ad      	b.n	800d2fc <_printf_i+0xf4>
 800d3a0:	4826      	ldr	r0, [pc, #152]	@ (800d43c <_printf_i+0x234>)
 800d3a2:	e7e9      	b.n	800d378 <_printf_i+0x170>
 800d3a4:	6823      	ldr	r3, [r4, #0]
 800d3a6:	f023 0320 	bic.w	r3, r3, #32
 800d3aa:	6023      	str	r3, [r4, #0]
 800d3ac:	e7f6      	b.n	800d39c <_printf_i+0x194>
 800d3ae:	4616      	mov	r6, r2
 800d3b0:	e7bd      	b.n	800d32e <_printf_i+0x126>
 800d3b2:	6833      	ldr	r3, [r6, #0]
 800d3b4:	6825      	ldr	r5, [r4, #0]
 800d3b6:	6961      	ldr	r1, [r4, #20]
 800d3b8:	1d18      	adds	r0, r3, #4
 800d3ba:	6030      	str	r0, [r6, #0]
 800d3bc:	062e      	lsls	r6, r5, #24
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	d501      	bpl.n	800d3c6 <_printf_i+0x1be>
 800d3c2:	6019      	str	r1, [r3, #0]
 800d3c4:	e002      	b.n	800d3cc <_printf_i+0x1c4>
 800d3c6:	0668      	lsls	r0, r5, #25
 800d3c8:	d5fb      	bpl.n	800d3c2 <_printf_i+0x1ba>
 800d3ca:	8019      	strh	r1, [r3, #0]
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	6123      	str	r3, [r4, #16]
 800d3d0:	4616      	mov	r6, r2
 800d3d2:	e7bc      	b.n	800d34e <_printf_i+0x146>
 800d3d4:	6833      	ldr	r3, [r6, #0]
 800d3d6:	1d1a      	adds	r2, r3, #4
 800d3d8:	6032      	str	r2, [r6, #0]
 800d3da:	681e      	ldr	r6, [r3, #0]
 800d3dc:	6862      	ldr	r2, [r4, #4]
 800d3de:	2100      	movs	r1, #0
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	f7f2 ff7d 	bl	80002e0 <memchr>
 800d3e6:	b108      	cbz	r0, 800d3ec <_printf_i+0x1e4>
 800d3e8:	1b80      	subs	r0, r0, r6
 800d3ea:	6060      	str	r0, [r4, #4]
 800d3ec:	6863      	ldr	r3, [r4, #4]
 800d3ee:	6123      	str	r3, [r4, #16]
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3f6:	e7aa      	b.n	800d34e <_printf_i+0x146>
 800d3f8:	6923      	ldr	r3, [r4, #16]
 800d3fa:	4632      	mov	r2, r6
 800d3fc:	4649      	mov	r1, r9
 800d3fe:	4640      	mov	r0, r8
 800d400:	47d0      	blx	sl
 800d402:	3001      	adds	r0, #1
 800d404:	d0ad      	beq.n	800d362 <_printf_i+0x15a>
 800d406:	6823      	ldr	r3, [r4, #0]
 800d408:	079b      	lsls	r3, r3, #30
 800d40a:	d413      	bmi.n	800d434 <_printf_i+0x22c>
 800d40c:	68e0      	ldr	r0, [r4, #12]
 800d40e:	9b03      	ldr	r3, [sp, #12]
 800d410:	4298      	cmp	r0, r3
 800d412:	bfb8      	it	lt
 800d414:	4618      	movlt	r0, r3
 800d416:	e7a6      	b.n	800d366 <_printf_i+0x15e>
 800d418:	2301      	movs	r3, #1
 800d41a:	4632      	mov	r2, r6
 800d41c:	4649      	mov	r1, r9
 800d41e:	4640      	mov	r0, r8
 800d420:	47d0      	blx	sl
 800d422:	3001      	adds	r0, #1
 800d424:	d09d      	beq.n	800d362 <_printf_i+0x15a>
 800d426:	3501      	adds	r5, #1
 800d428:	68e3      	ldr	r3, [r4, #12]
 800d42a:	9903      	ldr	r1, [sp, #12]
 800d42c:	1a5b      	subs	r3, r3, r1
 800d42e:	42ab      	cmp	r3, r5
 800d430:	dcf2      	bgt.n	800d418 <_printf_i+0x210>
 800d432:	e7eb      	b.n	800d40c <_printf_i+0x204>
 800d434:	2500      	movs	r5, #0
 800d436:	f104 0619 	add.w	r6, r4, #25
 800d43a:	e7f5      	b.n	800d428 <_printf_i+0x220>
 800d43c:	0800f42e 	.word	0x0800f42e
 800d440:	0800f43f 	.word	0x0800f43f

0800d444 <std>:
 800d444:	2300      	movs	r3, #0
 800d446:	b510      	push	{r4, lr}
 800d448:	4604      	mov	r4, r0
 800d44a:	e9c0 3300 	strd	r3, r3, [r0]
 800d44e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d452:	6083      	str	r3, [r0, #8]
 800d454:	8181      	strh	r1, [r0, #12]
 800d456:	6643      	str	r3, [r0, #100]	@ 0x64
 800d458:	81c2      	strh	r2, [r0, #14]
 800d45a:	6183      	str	r3, [r0, #24]
 800d45c:	4619      	mov	r1, r3
 800d45e:	2208      	movs	r2, #8
 800d460:	305c      	adds	r0, #92	@ 0x5c
 800d462:	f000 f8f4 	bl	800d64e <memset>
 800d466:	4b0d      	ldr	r3, [pc, #52]	@ (800d49c <std+0x58>)
 800d468:	6263      	str	r3, [r4, #36]	@ 0x24
 800d46a:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a0 <std+0x5c>)
 800d46c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d46e:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a4 <std+0x60>)
 800d470:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d472:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a8 <std+0x64>)
 800d474:	6323      	str	r3, [r4, #48]	@ 0x30
 800d476:	4b0d      	ldr	r3, [pc, #52]	@ (800d4ac <std+0x68>)
 800d478:	6224      	str	r4, [r4, #32]
 800d47a:	429c      	cmp	r4, r3
 800d47c:	d006      	beq.n	800d48c <std+0x48>
 800d47e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d482:	4294      	cmp	r4, r2
 800d484:	d002      	beq.n	800d48c <std+0x48>
 800d486:	33d0      	adds	r3, #208	@ 0xd0
 800d488:	429c      	cmp	r4, r3
 800d48a:	d105      	bne.n	800d498 <std+0x54>
 800d48c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d494:	f000 b958 	b.w	800d748 <__retarget_lock_init_recursive>
 800d498:	bd10      	pop	{r4, pc}
 800d49a:	bf00      	nop
 800d49c:	0800d5c9 	.word	0x0800d5c9
 800d4a0:	0800d5eb 	.word	0x0800d5eb
 800d4a4:	0800d623 	.word	0x0800d623
 800d4a8:	0800d647 	.word	0x0800d647
 800d4ac:	24001130 	.word	0x24001130

0800d4b0 <stdio_exit_handler>:
 800d4b0:	4a02      	ldr	r2, [pc, #8]	@ (800d4bc <stdio_exit_handler+0xc>)
 800d4b2:	4903      	ldr	r1, [pc, #12]	@ (800d4c0 <stdio_exit_handler+0x10>)
 800d4b4:	4803      	ldr	r0, [pc, #12]	@ (800d4c4 <stdio_exit_handler+0x14>)
 800d4b6:	f000 b869 	b.w	800d58c <_fwalk_sglue>
 800d4ba:	bf00      	nop
 800d4bc:	24000010 	.word	0x24000010
 800d4c0:	0800ef9d 	.word	0x0800ef9d
 800d4c4:	24000020 	.word	0x24000020

0800d4c8 <cleanup_stdio>:
 800d4c8:	6841      	ldr	r1, [r0, #4]
 800d4ca:	4b0c      	ldr	r3, [pc, #48]	@ (800d4fc <cleanup_stdio+0x34>)
 800d4cc:	4299      	cmp	r1, r3
 800d4ce:	b510      	push	{r4, lr}
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	d001      	beq.n	800d4d8 <cleanup_stdio+0x10>
 800d4d4:	f001 fd62 	bl	800ef9c <_fflush_r>
 800d4d8:	68a1      	ldr	r1, [r4, #8]
 800d4da:	4b09      	ldr	r3, [pc, #36]	@ (800d500 <cleanup_stdio+0x38>)
 800d4dc:	4299      	cmp	r1, r3
 800d4de:	d002      	beq.n	800d4e6 <cleanup_stdio+0x1e>
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f001 fd5b 	bl	800ef9c <_fflush_r>
 800d4e6:	68e1      	ldr	r1, [r4, #12]
 800d4e8:	4b06      	ldr	r3, [pc, #24]	@ (800d504 <cleanup_stdio+0x3c>)
 800d4ea:	4299      	cmp	r1, r3
 800d4ec:	d004      	beq.n	800d4f8 <cleanup_stdio+0x30>
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4f4:	f001 bd52 	b.w	800ef9c <_fflush_r>
 800d4f8:	bd10      	pop	{r4, pc}
 800d4fa:	bf00      	nop
 800d4fc:	24001130 	.word	0x24001130
 800d500:	24001198 	.word	0x24001198
 800d504:	24001200 	.word	0x24001200

0800d508 <global_stdio_init.part.0>:
 800d508:	b510      	push	{r4, lr}
 800d50a:	4b0b      	ldr	r3, [pc, #44]	@ (800d538 <global_stdio_init.part.0+0x30>)
 800d50c:	4c0b      	ldr	r4, [pc, #44]	@ (800d53c <global_stdio_init.part.0+0x34>)
 800d50e:	4a0c      	ldr	r2, [pc, #48]	@ (800d540 <global_stdio_init.part.0+0x38>)
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	4620      	mov	r0, r4
 800d514:	2200      	movs	r2, #0
 800d516:	2104      	movs	r1, #4
 800d518:	f7ff ff94 	bl	800d444 <std>
 800d51c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d520:	2201      	movs	r2, #1
 800d522:	2109      	movs	r1, #9
 800d524:	f7ff ff8e 	bl	800d444 <std>
 800d528:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d52c:	2202      	movs	r2, #2
 800d52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d532:	2112      	movs	r1, #18
 800d534:	f7ff bf86 	b.w	800d444 <std>
 800d538:	24001268 	.word	0x24001268
 800d53c:	24001130 	.word	0x24001130
 800d540:	0800d4b1 	.word	0x0800d4b1

0800d544 <__sfp_lock_acquire>:
 800d544:	4801      	ldr	r0, [pc, #4]	@ (800d54c <__sfp_lock_acquire+0x8>)
 800d546:	f000 b900 	b.w	800d74a <__retarget_lock_acquire_recursive>
 800d54a:	bf00      	nop
 800d54c:	24001271 	.word	0x24001271

0800d550 <__sfp_lock_release>:
 800d550:	4801      	ldr	r0, [pc, #4]	@ (800d558 <__sfp_lock_release+0x8>)
 800d552:	f000 b8fb 	b.w	800d74c <__retarget_lock_release_recursive>
 800d556:	bf00      	nop
 800d558:	24001271 	.word	0x24001271

0800d55c <__sinit>:
 800d55c:	b510      	push	{r4, lr}
 800d55e:	4604      	mov	r4, r0
 800d560:	f7ff fff0 	bl	800d544 <__sfp_lock_acquire>
 800d564:	6a23      	ldr	r3, [r4, #32]
 800d566:	b11b      	cbz	r3, 800d570 <__sinit+0x14>
 800d568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d56c:	f7ff bff0 	b.w	800d550 <__sfp_lock_release>
 800d570:	4b04      	ldr	r3, [pc, #16]	@ (800d584 <__sinit+0x28>)
 800d572:	6223      	str	r3, [r4, #32]
 800d574:	4b04      	ldr	r3, [pc, #16]	@ (800d588 <__sinit+0x2c>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1f5      	bne.n	800d568 <__sinit+0xc>
 800d57c:	f7ff ffc4 	bl	800d508 <global_stdio_init.part.0>
 800d580:	e7f2      	b.n	800d568 <__sinit+0xc>
 800d582:	bf00      	nop
 800d584:	0800d4c9 	.word	0x0800d4c9
 800d588:	24001268 	.word	0x24001268

0800d58c <_fwalk_sglue>:
 800d58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d590:	4607      	mov	r7, r0
 800d592:	4688      	mov	r8, r1
 800d594:	4614      	mov	r4, r2
 800d596:	2600      	movs	r6, #0
 800d598:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d59c:	f1b9 0901 	subs.w	r9, r9, #1
 800d5a0:	d505      	bpl.n	800d5ae <_fwalk_sglue+0x22>
 800d5a2:	6824      	ldr	r4, [r4, #0]
 800d5a4:	2c00      	cmp	r4, #0
 800d5a6:	d1f7      	bne.n	800d598 <_fwalk_sglue+0xc>
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ae:	89ab      	ldrh	r3, [r5, #12]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d907      	bls.n	800d5c4 <_fwalk_sglue+0x38>
 800d5b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	d003      	beq.n	800d5c4 <_fwalk_sglue+0x38>
 800d5bc:	4629      	mov	r1, r5
 800d5be:	4638      	mov	r0, r7
 800d5c0:	47c0      	blx	r8
 800d5c2:	4306      	orrs	r6, r0
 800d5c4:	3568      	adds	r5, #104	@ 0x68
 800d5c6:	e7e9      	b.n	800d59c <_fwalk_sglue+0x10>

0800d5c8 <__sread>:
 800d5c8:	b510      	push	{r4, lr}
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d0:	f000 f86c 	bl	800d6ac <_read_r>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	bfab      	itete	ge
 800d5d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d5da:	89a3      	ldrhlt	r3, [r4, #12]
 800d5dc:	181b      	addge	r3, r3, r0
 800d5de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d5e2:	bfac      	ite	ge
 800d5e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d5e6:	81a3      	strhlt	r3, [r4, #12]
 800d5e8:	bd10      	pop	{r4, pc}

0800d5ea <__swrite>:
 800d5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ee:	461f      	mov	r7, r3
 800d5f0:	898b      	ldrh	r3, [r1, #12]
 800d5f2:	05db      	lsls	r3, r3, #23
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	4616      	mov	r6, r2
 800d5fa:	d505      	bpl.n	800d608 <__swrite+0x1e>
 800d5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d600:	2302      	movs	r3, #2
 800d602:	2200      	movs	r2, #0
 800d604:	f000 f840 	bl	800d688 <_lseek_r>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d60e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d612:	81a3      	strh	r3, [r4, #12]
 800d614:	4632      	mov	r2, r6
 800d616:	463b      	mov	r3, r7
 800d618:	4628      	mov	r0, r5
 800d61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d61e:	f000 b857 	b.w	800d6d0 <_write_r>

0800d622 <__sseek>:
 800d622:	b510      	push	{r4, lr}
 800d624:	460c      	mov	r4, r1
 800d626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d62a:	f000 f82d 	bl	800d688 <_lseek_r>
 800d62e:	1c43      	adds	r3, r0, #1
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	bf15      	itete	ne
 800d634:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d636:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d63a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d63e:	81a3      	strheq	r3, [r4, #12]
 800d640:	bf18      	it	ne
 800d642:	81a3      	strhne	r3, [r4, #12]
 800d644:	bd10      	pop	{r4, pc}

0800d646 <__sclose>:
 800d646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d64a:	f000 b80d 	b.w	800d668 <_close_r>

0800d64e <memset>:
 800d64e:	4402      	add	r2, r0
 800d650:	4603      	mov	r3, r0
 800d652:	4293      	cmp	r3, r2
 800d654:	d100      	bne.n	800d658 <memset+0xa>
 800d656:	4770      	bx	lr
 800d658:	f803 1b01 	strb.w	r1, [r3], #1
 800d65c:	e7f9      	b.n	800d652 <memset+0x4>
	...

0800d660 <_localeconv_r>:
 800d660:	4800      	ldr	r0, [pc, #0]	@ (800d664 <_localeconv_r+0x4>)
 800d662:	4770      	bx	lr
 800d664:	2400015c 	.word	0x2400015c

0800d668 <_close_r>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	4d06      	ldr	r5, [pc, #24]	@ (800d684 <_close_r+0x1c>)
 800d66c:	2300      	movs	r3, #0
 800d66e:	4604      	mov	r4, r0
 800d670:	4608      	mov	r0, r1
 800d672:	602b      	str	r3, [r5, #0]
 800d674:	f7f4 fa43 	bl	8001afe <_close>
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	d102      	bne.n	800d682 <_close_r+0x1a>
 800d67c:	682b      	ldr	r3, [r5, #0]
 800d67e:	b103      	cbz	r3, 800d682 <_close_r+0x1a>
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	bd38      	pop	{r3, r4, r5, pc}
 800d684:	2400126c 	.word	0x2400126c

0800d688 <_lseek_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	4d07      	ldr	r5, [pc, #28]	@ (800d6a8 <_lseek_r+0x20>)
 800d68c:	4604      	mov	r4, r0
 800d68e:	4608      	mov	r0, r1
 800d690:	4611      	mov	r1, r2
 800d692:	2200      	movs	r2, #0
 800d694:	602a      	str	r2, [r5, #0]
 800d696:	461a      	mov	r2, r3
 800d698:	f7f4 fa58 	bl	8001b4c <_lseek>
 800d69c:	1c43      	adds	r3, r0, #1
 800d69e:	d102      	bne.n	800d6a6 <_lseek_r+0x1e>
 800d6a0:	682b      	ldr	r3, [r5, #0]
 800d6a2:	b103      	cbz	r3, 800d6a6 <_lseek_r+0x1e>
 800d6a4:	6023      	str	r3, [r4, #0]
 800d6a6:	bd38      	pop	{r3, r4, r5, pc}
 800d6a8:	2400126c 	.word	0x2400126c

0800d6ac <_read_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	4d07      	ldr	r5, [pc, #28]	@ (800d6cc <_read_r+0x20>)
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	4608      	mov	r0, r1
 800d6b4:	4611      	mov	r1, r2
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	602a      	str	r2, [r5, #0]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	f7f4 fa02 	bl	8001ac4 <_read>
 800d6c0:	1c43      	adds	r3, r0, #1
 800d6c2:	d102      	bne.n	800d6ca <_read_r+0x1e>
 800d6c4:	682b      	ldr	r3, [r5, #0]
 800d6c6:	b103      	cbz	r3, 800d6ca <_read_r+0x1e>
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	bd38      	pop	{r3, r4, r5, pc}
 800d6cc:	2400126c 	.word	0x2400126c

0800d6d0 <_write_r>:
 800d6d0:	b538      	push	{r3, r4, r5, lr}
 800d6d2:	4d07      	ldr	r5, [pc, #28]	@ (800d6f0 <_write_r+0x20>)
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	4608      	mov	r0, r1
 800d6d8:	4611      	mov	r1, r2
 800d6da:	2200      	movs	r2, #0
 800d6dc:	602a      	str	r2, [r5, #0]
 800d6de:	461a      	mov	r2, r3
 800d6e0:	f7f3 fde0 	bl	80012a4 <_write>
 800d6e4:	1c43      	adds	r3, r0, #1
 800d6e6:	d102      	bne.n	800d6ee <_write_r+0x1e>
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	b103      	cbz	r3, 800d6ee <_write_r+0x1e>
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	bd38      	pop	{r3, r4, r5, pc}
 800d6f0:	2400126c 	.word	0x2400126c

0800d6f4 <__errno>:
 800d6f4:	4b01      	ldr	r3, [pc, #4]	@ (800d6fc <__errno+0x8>)
 800d6f6:	6818      	ldr	r0, [r3, #0]
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	2400001c 	.word	0x2400001c

0800d700 <__libc_init_array>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	4d0d      	ldr	r5, [pc, #52]	@ (800d738 <__libc_init_array+0x38>)
 800d704:	4c0d      	ldr	r4, [pc, #52]	@ (800d73c <__libc_init_array+0x3c>)
 800d706:	1b64      	subs	r4, r4, r5
 800d708:	10a4      	asrs	r4, r4, #2
 800d70a:	2600      	movs	r6, #0
 800d70c:	42a6      	cmp	r6, r4
 800d70e:	d109      	bne.n	800d724 <__libc_init_array+0x24>
 800d710:	4d0b      	ldr	r5, [pc, #44]	@ (800d740 <__libc_init_array+0x40>)
 800d712:	4c0c      	ldr	r4, [pc, #48]	@ (800d744 <__libc_init_array+0x44>)
 800d714:	f001 fe50 	bl	800f3b8 <_init>
 800d718:	1b64      	subs	r4, r4, r5
 800d71a:	10a4      	asrs	r4, r4, #2
 800d71c:	2600      	movs	r6, #0
 800d71e:	42a6      	cmp	r6, r4
 800d720:	d105      	bne.n	800d72e <__libc_init_array+0x2e>
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	f855 3b04 	ldr.w	r3, [r5], #4
 800d728:	4798      	blx	r3
 800d72a:	3601      	adds	r6, #1
 800d72c:	e7ee      	b.n	800d70c <__libc_init_array+0xc>
 800d72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d732:	4798      	blx	r3
 800d734:	3601      	adds	r6, #1
 800d736:	e7f2      	b.n	800d71e <__libc_init_array+0x1e>
 800d738:	0800f79c 	.word	0x0800f79c
 800d73c:	0800f79c 	.word	0x0800f79c
 800d740:	0800f79c 	.word	0x0800f79c
 800d744:	0800f7a0 	.word	0x0800f7a0

0800d748 <__retarget_lock_init_recursive>:
 800d748:	4770      	bx	lr

0800d74a <__retarget_lock_acquire_recursive>:
 800d74a:	4770      	bx	lr

0800d74c <__retarget_lock_release_recursive>:
 800d74c:	4770      	bx	lr

0800d74e <quorem>:
 800d74e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d752:	6903      	ldr	r3, [r0, #16]
 800d754:	690c      	ldr	r4, [r1, #16]
 800d756:	42a3      	cmp	r3, r4
 800d758:	4607      	mov	r7, r0
 800d75a:	db7e      	blt.n	800d85a <quorem+0x10c>
 800d75c:	3c01      	subs	r4, #1
 800d75e:	f101 0814 	add.w	r8, r1, #20
 800d762:	00a3      	lsls	r3, r4, #2
 800d764:	f100 0514 	add.w	r5, r0, #20
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d778:	3301      	adds	r3, #1
 800d77a:	429a      	cmp	r2, r3
 800d77c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d780:	fbb2 f6f3 	udiv	r6, r2, r3
 800d784:	d32e      	bcc.n	800d7e4 <quorem+0x96>
 800d786:	f04f 0a00 	mov.w	sl, #0
 800d78a:	46c4      	mov	ip, r8
 800d78c:	46ae      	mov	lr, r5
 800d78e:	46d3      	mov	fp, sl
 800d790:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d794:	b298      	uxth	r0, r3
 800d796:	fb06 a000 	mla	r0, r6, r0, sl
 800d79a:	0c02      	lsrs	r2, r0, #16
 800d79c:	0c1b      	lsrs	r3, r3, #16
 800d79e:	fb06 2303 	mla	r3, r6, r3, r2
 800d7a2:	f8de 2000 	ldr.w	r2, [lr]
 800d7a6:	b280      	uxth	r0, r0
 800d7a8:	b292      	uxth	r2, r2
 800d7aa:	1a12      	subs	r2, r2, r0
 800d7ac:	445a      	add	r2, fp
 800d7ae:	f8de 0000 	ldr.w	r0, [lr]
 800d7b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d7bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d7c0:	b292      	uxth	r2, r2
 800d7c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d7c6:	45e1      	cmp	r9, ip
 800d7c8:	f84e 2b04 	str.w	r2, [lr], #4
 800d7cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d7d0:	d2de      	bcs.n	800d790 <quorem+0x42>
 800d7d2:	9b00      	ldr	r3, [sp, #0]
 800d7d4:	58eb      	ldr	r3, [r5, r3]
 800d7d6:	b92b      	cbnz	r3, 800d7e4 <quorem+0x96>
 800d7d8:	9b01      	ldr	r3, [sp, #4]
 800d7da:	3b04      	subs	r3, #4
 800d7dc:	429d      	cmp	r5, r3
 800d7de:	461a      	mov	r2, r3
 800d7e0:	d32f      	bcc.n	800d842 <quorem+0xf4>
 800d7e2:	613c      	str	r4, [r7, #16]
 800d7e4:	4638      	mov	r0, r7
 800d7e6:	f001 f90b 	bl	800ea00 <__mcmp>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	db25      	blt.n	800d83a <quorem+0xec>
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800d7f6:	f8d1 c000 	ldr.w	ip, [r1]
 800d7fa:	fa1f fe82 	uxth.w	lr, r2
 800d7fe:	fa1f f38c 	uxth.w	r3, ip
 800d802:	eba3 030e 	sub.w	r3, r3, lr
 800d806:	4403      	add	r3, r0
 800d808:	0c12      	lsrs	r2, r2, #16
 800d80a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d80e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d812:	b29b      	uxth	r3, r3
 800d814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d818:	45c1      	cmp	r9, r8
 800d81a:	f841 3b04 	str.w	r3, [r1], #4
 800d81e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d822:	d2e6      	bcs.n	800d7f2 <quorem+0xa4>
 800d824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d82c:	b922      	cbnz	r2, 800d838 <quorem+0xea>
 800d82e:	3b04      	subs	r3, #4
 800d830:	429d      	cmp	r5, r3
 800d832:	461a      	mov	r2, r3
 800d834:	d30b      	bcc.n	800d84e <quorem+0x100>
 800d836:	613c      	str	r4, [r7, #16]
 800d838:	3601      	adds	r6, #1
 800d83a:	4630      	mov	r0, r6
 800d83c:	b003      	add	sp, #12
 800d83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d842:	6812      	ldr	r2, [r2, #0]
 800d844:	3b04      	subs	r3, #4
 800d846:	2a00      	cmp	r2, #0
 800d848:	d1cb      	bne.n	800d7e2 <quorem+0x94>
 800d84a:	3c01      	subs	r4, #1
 800d84c:	e7c6      	b.n	800d7dc <quorem+0x8e>
 800d84e:	6812      	ldr	r2, [r2, #0]
 800d850:	3b04      	subs	r3, #4
 800d852:	2a00      	cmp	r2, #0
 800d854:	d1ef      	bne.n	800d836 <quorem+0xe8>
 800d856:	3c01      	subs	r4, #1
 800d858:	e7ea      	b.n	800d830 <quorem+0xe2>
 800d85a:	2000      	movs	r0, #0
 800d85c:	e7ee      	b.n	800d83c <quorem+0xee>
	...

0800d860 <_dtoa_r>:
 800d860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d864:	ed2d 8b02 	vpush	{d8}
 800d868:	69c7      	ldr	r7, [r0, #28]
 800d86a:	b091      	sub	sp, #68	@ 0x44
 800d86c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d870:	ec55 4b10 	vmov	r4, r5, d0
 800d874:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d876:	9107      	str	r1, [sp, #28]
 800d878:	4681      	mov	r9, r0
 800d87a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d87c:	930d      	str	r3, [sp, #52]	@ 0x34
 800d87e:	b97f      	cbnz	r7, 800d8a0 <_dtoa_r+0x40>
 800d880:	2010      	movs	r0, #16
 800d882:	f000 fd95 	bl	800e3b0 <malloc>
 800d886:	4602      	mov	r2, r0
 800d888:	f8c9 001c 	str.w	r0, [r9, #28]
 800d88c:	b920      	cbnz	r0, 800d898 <_dtoa_r+0x38>
 800d88e:	4ba0      	ldr	r3, [pc, #640]	@ (800db10 <_dtoa_r+0x2b0>)
 800d890:	21ef      	movs	r1, #239	@ 0xef
 800d892:	48a0      	ldr	r0, [pc, #640]	@ (800db14 <_dtoa_r+0x2b4>)
 800d894:	f001 fc5c 	bl	800f150 <__assert_func>
 800d898:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d89c:	6007      	str	r7, [r0, #0]
 800d89e:	60c7      	str	r7, [r0, #12]
 800d8a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d8a4:	6819      	ldr	r1, [r3, #0]
 800d8a6:	b159      	cbz	r1, 800d8c0 <_dtoa_r+0x60>
 800d8a8:	685a      	ldr	r2, [r3, #4]
 800d8aa:	604a      	str	r2, [r1, #4]
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	4093      	lsls	r3, r2
 800d8b0:	608b      	str	r3, [r1, #8]
 800d8b2:	4648      	mov	r0, r9
 800d8b4:	f000 fe72 	bl	800e59c <_Bfree>
 800d8b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	601a      	str	r2, [r3, #0]
 800d8c0:	1e2b      	subs	r3, r5, #0
 800d8c2:	bfbb      	ittet	lt
 800d8c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d8c8:	9303      	strlt	r3, [sp, #12]
 800d8ca:	2300      	movge	r3, #0
 800d8cc:	2201      	movlt	r2, #1
 800d8ce:	bfac      	ite	ge
 800d8d0:	6033      	strge	r3, [r6, #0]
 800d8d2:	6032      	strlt	r2, [r6, #0]
 800d8d4:	4b90      	ldr	r3, [pc, #576]	@ (800db18 <_dtoa_r+0x2b8>)
 800d8d6:	9e03      	ldr	r6, [sp, #12]
 800d8d8:	43b3      	bics	r3, r6
 800d8da:	d110      	bne.n	800d8fe <_dtoa_r+0x9e>
 800d8dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d8de:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d8e8:	4323      	orrs	r3, r4
 800d8ea:	f000 84e6 	beq.w	800e2ba <_dtoa_r+0xa5a>
 800d8ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d8f0:	4f8a      	ldr	r7, [pc, #552]	@ (800db1c <_dtoa_r+0x2bc>)
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f000 84e8 	beq.w	800e2c8 <_dtoa_r+0xa68>
 800d8f8:	1cfb      	adds	r3, r7, #3
 800d8fa:	f000 bce3 	b.w	800e2c4 <_dtoa_r+0xa64>
 800d8fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d902:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d90a:	d10a      	bne.n	800d922 <_dtoa_r+0xc2>
 800d90c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d90e:	2301      	movs	r3, #1
 800d910:	6013      	str	r3, [r2, #0]
 800d912:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d914:	b113      	cbz	r3, 800d91c <_dtoa_r+0xbc>
 800d916:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d918:	4b81      	ldr	r3, [pc, #516]	@ (800db20 <_dtoa_r+0x2c0>)
 800d91a:	6013      	str	r3, [r2, #0]
 800d91c:	4f81      	ldr	r7, [pc, #516]	@ (800db24 <_dtoa_r+0x2c4>)
 800d91e:	f000 bcd3 	b.w	800e2c8 <_dtoa_r+0xa68>
 800d922:	aa0e      	add	r2, sp, #56	@ 0x38
 800d924:	a90f      	add	r1, sp, #60	@ 0x3c
 800d926:	4648      	mov	r0, r9
 800d928:	eeb0 0b48 	vmov.f64	d0, d8
 800d92c:	f001 f918 	bl	800eb60 <__d2b>
 800d930:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d936:	9001      	str	r0, [sp, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d045      	beq.n	800d9c8 <_dtoa_r+0x168>
 800d93c:	eeb0 7b48 	vmov.f64	d7, d8
 800d940:	ee18 1a90 	vmov	r1, s17
 800d944:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d948:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d94c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d950:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d954:	2500      	movs	r5, #0
 800d956:	ee07 1a90 	vmov	s15, r1
 800d95a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d95e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800daf8 <_dtoa_r+0x298>
 800d962:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d966:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800db00 <_dtoa_r+0x2a0>
 800d96a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d96e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800db08 <_dtoa_r+0x2a8>
 800d972:	ee07 3a90 	vmov	s15, r3
 800d976:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d97a:	eeb0 7b46 	vmov.f64	d7, d6
 800d97e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d982:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d986:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d98e:	ee16 8a90 	vmov	r8, s13
 800d992:	d508      	bpl.n	800d9a6 <_dtoa_r+0x146>
 800d994:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d998:	eeb4 6b47 	vcmp.f64	d6, d7
 800d99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a0:	bf18      	it	ne
 800d9a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d9a6:	f1b8 0f16 	cmp.w	r8, #22
 800d9aa:	d82b      	bhi.n	800da04 <_dtoa_r+0x1a4>
 800d9ac:	495e      	ldr	r1, [pc, #376]	@ (800db28 <_dtoa_r+0x2c8>)
 800d9ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d9b2:	ed91 7b00 	vldr	d7, [r1]
 800d9b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9be:	d501      	bpl.n	800d9c4 <_dtoa_r+0x164>
 800d9c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d9c4:	2100      	movs	r1, #0
 800d9c6:	e01e      	b.n	800da06 <_dtoa_r+0x1a6>
 800d9c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9ca:	4413      	add	r3, r2
 800d9cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d9d0:	2920      	cmp	r1, #32
 800d9d2:	bfc1      	itttt	gt
 800d9d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d9d8:	408e      	lslgt	r6, r1
 800d9da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d9de:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d9e2:	bfd6      	itet	le
 800d9e4:	f1c1 0120 	rsble	r1, r1, #32
 800d9e8:	4331      	orrgt	r1, r6
 800d9ea:	fa04 f101 	lslle.w	r1, r4, r1
 800d9ee:	ee07 1a90 	vmov	s15, r1
 800d9f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	ee17 1a90 	vmov	r1, s15
 800d9fc:	2501      	movs	r5, #1
 800d9fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800da02:	e7a8      	b.n	800d956 <_dtoa_r+0xf6>
 800da04:	2101      	movs	r1, #1
 800da06:	1ad2      	subs	r2, r2, r3
 800da08:	1e53      	subs	r3, r2, #1
 800da0a:	9306      	str	r3, [sp, #24]
 800da0c:	bf45      	ittet	mi
 800da0e:	f1c2 0301 	rsbmi	r3, r2, #1
 800da12:	9304      	strmi	r3, [sp, #16]
 800da14:	2300      	movpl	r3, #0
 800da16:	2300      	movmi	r3, #0
 800da18:	bf4c      	ite	mi
 800da1a:	9306      	strmi	r3, [sp, #24]
 800da1c:	9304      	strpl	r3, [sp, #16]
 800da1e:	f1b8 0f00 	cmp.w	r8, #0
 800da22:	910c      	str	r1, [sp, #48]	@ 0x30
 800da24:	db18      	blt.n	800da58 <_dtoa_r+0x1f8>
 800da26:	9b06      	ldr	r3, [sp, #24]
 800da28:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800da2c:	4443      	add	r3, r8
 800da2e:	9306      	str	r3, [sp, #24]
 800da30:	2300      	movs	r3, #0
 800da32:	9a07      	ldr	r2, [sp, #28]
 800da34:	2a09      	cmp	r2, #9
 800da36:	d845      	bhi.n	800dac4 <_dtoa_r+0x264>
 800da38:	2a05      	cmp	r2, #5
 800da3a:	bfc4      	itt	gt
 800da3c:	3a04      	subgt	r2, #4
 800da3e:	9207      	strgt	r2, [sp, #28]
 800da40:	9a07      	ldr	r2, [sp, #28]
 800da42:	f1a2 0202 	sub.w	r2, r2, #2
 800da46:	bfcc      	ite	gt
 800da48:	2400      	movgt	r4, #0
 800da4a:	2401      	movle	r4, #1
 800da4c:	2a03      	cmp	r2, #3
 800da4e:	d844      	bhi.n	800dada <_dtoa_r+0x27a>
 800da50:	e8df f002 	tbb	[pc, r2]
 800da54:	0b173634 	.word	0x0b173634
 800da58:	9b04      	ldr	r3, [sp, #16]
 800da5a:	2200      	movs	r2, #0
 800da5c:	eba3 0308 	sub.w	r3, r3, r8
 800da60:	9304      	str	r3, [sp, #16]
 800da62:	920a      	str	r2, [sp, #40]	@ 0x28
 800da64:	f1c8 0300 	rsb	r3, r8, #0
 800da68:	e7e3      	b.n	800da32 <_dtoa_r+0x1d2>
 800da6a:	2201      	movs	r2, #1
 800da6c:	9208      	str	r2, [sp, #32]
 800da6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da70:	eb08 0b02 	add.w	fp, r8, r2
 800da74:	f10b 0a01 	add.w	sl, fp, #1
 800da78:	4652      	mov	r2, sl
 800da7a:	2a01      	cmp	r2, #1
 800da7c:	bfb8      	it	lt
 800da7e:	2201      	movlt	r2, #1
 800da80:	e006      	b.n	800da90 <_dtoa_r+0x230>
 800da82:	2201      	movs	r2, #1
 800da84:	9208      	str	r2, [sp, #32]
 800da86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da88:	2a00      	cmp	r2, #0
 800da8a:	dd29      	ble.n	800dae0 <_dtoa_r+0x280>
 800da8c:	4693      	mov	fp, r2
 800da8e:	4692      	mov	sl, r2
 800da90:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800da94:	2100      	movs	r1, #0
 800da96:	2004      	movs	r0, #4
 800da98:	f100 0614 	add.w	r6, r0, #20
 800da9c:	4296      	cmp	r6, r2
 800da9e:	d926      	bls.n	800daee <_dtoa_r+0x28e>
 800daa0:	6079      	str	r1, [r7, #4]
 800daa2:	4648      	mov	r0, r9
 800daa4:	9305      	str	r3, [sp, #20]
 800daa6:	f000 fd39 	bl	800e51c <_Balloc>
 800daaa:	9b05      	ldr	r3, [sp, #20]
 800daac:	4607      	mov	r7, r0
 800daae:	2800      	cmp	r0, #0
 800dab0:	d13e      	bne.n	800db30 <_dtoa_r+0x2d0>
 800dab2:	4b1e      	ldr	r3, [pc, #120]	@ (800db2c <_dtoa_r+0x2cc>)
 800dab4:	4602      	mov	r2, r0
 800dab6:	f240 11af 	movw	r1, #431	@ 0x1af
 800daba:	e6ea      	b.n	800d892 <_dtoa_r+0x32>
 800dabc:	2200      	movs	r2, #0
 800dabe:	e7e1      	b.n	800da84 <_dtoa_r+0x224>
 800dac0:	2200      	movs	r2, #0
 800dac2:	e7d3      	b.n	800da6c <_dtoa_r+0x20c>
 800dac4:	2401      	movs	r4, #1
 800dac6:	2200      	movs	r2, #0
 800dac8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800dacc:	f04f 3bff 	mov.w	fp, #4294967295
 800dad0:	2100      	movs	r1, #0
 800dad2:	46da      	mov	sl, fp
 800dad4:	2212      	movs	r2, #18
 800dad6:	9109      	str	r1, [sp, #36]	@ 0x24
 800dad8:	e7da      	b.n	800da90 <_dtoa_r+0x230>
 800dada:	2201      	movs	r2, #1
 800dadc:	9208      	str	r2, [sp, #32]
 800dade:	e7f5      	b.n	800dacc <_dtoa_r+0x26c>
 800dae0:	f04f 0b01 	mov.w	fp, #1
 800dae4:	46da      	mov	sl, fp
 800dae6:	465a      	mov	r2, fp
 800dae8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800daec:	e7d0      	b.n	800da90 <_dtoa_r+0x230>
 800daee:	3101      	adds	r1, #1
 800daf0:	0040      	lsls	r0, r0, #1
 800daf2:	e7d1      	b.n	800da98 <_dtoa_r+0x238>
 800daf4:	f3af 8000 	nop.w
 800daf8:	636f4361 	.word	0x636f4361
 800dafc:	3fd287a7 	.word	0x3fd287a7
 800db00:	8b60c8b3 	.word	0x8b60c8b3
 800db04:	3fc68a28 	.word	0x3fc68a28
 800db08:	509f79fb 	.word	0x509f79fb
 800db0c:	3fd34413 	.word	0x3fd34413
 800db10:	0800f45d 	.word	0x0800f45d
 800db14:	0800f474 	.word	0x0800f474
 800db18:	7ff00000 	.word	0x7ff00000
 800db1c:	0800f459 	.word	0x0800f459
 800db20:	0800f42d 	.word	0x0800f42d
 800db24:	0800f42c 	.word	0x0800f42c
 800db28:	0800f5c8 	.word	0x0800f5c8
 800db2c:	0800f4cc 	.word	0x0800f4cc
 800db30:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800db34:	f1ba 0f0e 	cmp.w	sl, #14
 800db38:	6010      	str	r0, [r2, #0]
 800db3a:	d86e      	bhi.n	800dc1a <_dtoa_r+0x3ba>
 800db3c:	2c00      	cmp	r4, #0
 800db3e:	d06c      	beq.n	800dc1a <_dtoa_r+0x3ba>
 800db40:	f1b8 0f00 	cmp.w	r8, #0
 800db44:	f340 80b4 	ble.w	800dcb0 <_dtoa_r+0x450>
 800db48:	4ac8      	ldr	r2, [pc, #800]	@ (800de6c <_dtoa_r+0x60c>)
 800db4a:	f008 010f 	and.w	r1, r8, #15
 800db4e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800db52:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800db56:	ed92 7b00 	vldr	d7, [r2]
 800db5a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800db5e:	f000 809b 	beq.w	800dc98 <_dtoa_r+0x438>
 800db62:	4ac3      	ldr	r2, [pc, #780]	@ (800de70 <_dtoa_r+0x610>)
 800db64:	ed92 6b08 	vldr	d6, [r2, #32]
 800db68:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800db6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800db70:	f001 010f 	and.w	r1, r1, #15
 800db74:	2203      	movs	r2, #3
 800db76:	48be      	ldr	r0, [pc, #760]	@ (800de70 <_dtoa_r+0x610>)
 800db78:	2900      	cmp	r1, #0
 800db7a:	f040 808f 	bne.w	800dc9c <_dtoa_r+0x43c>
 800db7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800db82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800db86:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800db8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db90:	2900      	cmp	r1, #0
 800db92:	f000 80b3 	beq.w	800dcfc <_dtoa_r+0x49c>
 800db96:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800db9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800db9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba2:	f140 80ab 	bpl.w	800dcfc <_dtoa_r+0x49c>
 800dba6:	f1ba 0f00 	cmp.w	sl, #0
 800dbaa:	f000 80a7 	beq.w	800dcfc <_dtoa_r+0x49c>
 800dbae:	f1bb 0f00 	cmp.w	fp, #0
 800dbb2:	dd30      	ble.n	800dc16 <_dtoa_r+0x3b6>
 800dbb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800dbb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbc0:	f108 31ff 	add.w	r1, r8, #4294967295
 800dbc4:	9105      	str	r1, [sp, #20]
 800dbc6:	3201      	adds	r2, #1
 800dbc8:	465c      	mov	r4, fp
 800dbca:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dbce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800dbd2:	ee07 2a90 	vmov	s15, r2
 800dbd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dbda:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dbde:	ee15 2a90 	vmov	r2, s11
 800dbe2:	ec51 0b15 	vmov	r0, r1, d5
 800dbe6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800dbea:	2c00      	cmp	r4, #0
 800dbec:	f040 808a 	bne.w	800dd04 <_dtoa_r+0x4a4>
 800dbf0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800dbf4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dbf8:	ec41 0b17 	vmov	d7, r0, r1
 800dbfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc04:	f300 826a 	bgt.w	800e0dc <_dtoa_r+0x87c>
 800dc08:	eeb1 7b47 	vneg.f64	d7, d7
 800dc0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc14:	d423      	bmi.n	800dc5e <_dtoa_r+0x3fe>
 800dc16:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dc1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dc1c:	2a00      	cmp	r2, #0
 800dc1e:	f2c0 8129 	blt.w	800de74 <_dtoa_r+0x614>
 800dc22:	f1b8 0f0e 	cmp.w	r8, #14
 800dc26:	f300 8125 	bgt.w	800de74 <_dtoa_r+0x614>
 800dc2a:	4b90      	ldr	r3, [pc, #576]	@ (800de6c <_dtoa_r+0x60c>)
 800dc2c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dc30:	ed93 6b00 	vldr	d6, [r3]
 800dc34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f280 80c8 	bge.w	800ddcc <_dtoa_r+0x56c>
 800dc3c:	f1ba 0f00 	cmp.w	sl, #0
 800dc40:	f300 80c4 	bgt.w	800ddcc <_dtoa_r+0x56c>
 800dc44:	d10b      	bne.n	800dc5e <_dtoa_r+0x3fe>
 800dc46:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800dc4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dc4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5a:	f2c0 823c 	blt.w	800e0d6 <_dtoa_r+0x876>
 800dc5e:	2400      	movs	r4, #0
 800dc60:	4625      	mov	r5, r4
 800dc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc64:	43db      	mvns	r3, r3
 800dc66:	9305      	str	r3, [sp, #20]
 800dc68:	463e      	mov	r6, r7
 800dc6a:	f04f 0800 	mov.w	r8, #0
 800dc6e:	4621      	mov	r1, r4
 800dc70:	4648      	mov	r0, r9
 800dc72:	f000 fc93 	bl	800e59c <_Bfree>
 800dc76:	2d00      	cmp	r5, #0
 800dc78:	f000 80a2 	beq.w	800ddc0 <_dtoa_r+0x560>
 800dc7c:	f1b8 0f00 	cmp.w	r8, #0
 800dc80:	d005      	beq.n	800dc8e <_dtoa_r+0x42e>
 800dc82:	45a8      	cmp	r8, r5
 800dc84:	d003      	beq.n	800dc8e <_dtoa_r+0x42e>
 800dc86:	4641      	mov	r1, r8
 800dc88:	4648      	mov	r0, r9
 800dc8a:	f000 fc87 	bl	800e59c <_Bfree>
 800dc8e:	4629      	mov	r1, r5
 800dc90:	4648      	mov	r0, r9
 800dc92:	f000 fc83 	bl	800e59c <_Bfree>
 800dc96:	e093      	b.n	800ddc0 <_dtoa_r+0x560>
 800dc98:	2202      	movs	r2, #2
 800dc9a:	e76c      	b.n	800db76 <_dtoa_r+0x316>
 800dc9c:	07cc      	lsls	r4, r1, #31
 800dc9e:	d504      	bpl.n	800dcaa <_dtoa_r+0x44a>
 800dca0:	ed90 6b00 	vldr	d6, [r0]
 800dca4:	3201      	adds	r2, #1
 800dca6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcaa:	1049      	asrs	r1, r1, #1
 800dcac:	3008      	adds	r0, #8
 800dcae:	e763      	b.n	800db78 <_dtoa_r+0x318>
 800dcb0:	d022      	beq.n	800dcf8 <_dtoa_r+0x498>
 800dcb2:	f1c8 0100 	rsb	r1, r8, #0
 800dcb6:	4a6d      	ldr	r2, [pc, #436]	@ (800de6c <_dtoa_r+0x60c>)
 800dcb8:	f001 000f 	and.w	r0, r1, #15
 800dcbc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dcc0:	ed92 7b00 	vldr	d7, [r2]
 800dcc4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800dcc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dccc:	4868      	ldr	r0, [pc, #416]	@ (800de70 <_dtoa_r+0x610>)
 800dcce:	1109      	asrs	r1, r1, #4
 800dcd0:	2400      	movs	r4, #0
 800dcd2:	2202      	movs	r2, #2
 800dcd4:	b929      	cbnz	r1, 800dce2 <_dtoa_r+0x482>
 800dcd6:	2c00      	cmp	r4, #0
 800dcd8:	f43f af57 	beq.w	800db8a <_dtoa_r+0x32a>
 800dcdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dce0:	e753      	b.n	800db8a <_dtoa_r+0x32a>
 800dce2:	07ce      	lsls	r6, r1, #31
 800dce4:	d505      	bpl.n	800dcf2 <_dtoa_r+0x492>
 800dce6:	ed90 6b00 	vldr	d6, [r0]
 800dcea:	3201      	adds	r2, #1
 800dcec:	2401      	movs	r4, #1
 800dcee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcf2:	1049      	asrs	r1, r1, #1
 800dcf4:	3008      	adds	r0, #8
 800dcf6:	e7ed      	b.n	800dcd4 <_dtoa_r+0x474>
 800dcf8:	2202      	movs	r2, #2
 800dcfa:	e746      	b.n	800db8a <_dtoa_r+0x32a>
 800dcfc:	f8cd 8014 	str.w	r8, [sp, #20]
 800dd00:	4654      	mov	r4, sl
 800dd02:	e762      	b.n	800dbca <_dtoa_r+0x36a>
 800dd04:	4a59      	ldr	r2, [pc, #356]	@ (800de6c <_dtoa_r+0x60c>)
 800dd06:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800dd0a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dd0e:	9a08      	ldr	r2, [sp, #32]
 800dd10:	ec41 0b17 	vmov	d7, r0, r1
 800dd14:	443c      	add	r4, r7
 800dd16:	b34a      	cbz	r2, 800dd6c <_dtoa_r+0x50c>
 800dd18:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800dd1c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800dd20:	463e      	mov	r6, r7
 800dd22:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dd26:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800dd2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dd2e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dd32:	ee14 2a90 	vmov	r2, s9
 800dd36:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dd3a:	3230      	adds	r2, #48	@ 0x30
 800dd3c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dd40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd48:	f806 2b01 	strb.w	r2, [r6], #1
 800dd4c:	d438      	bmi.n	800ddc0 <_dtoa_r+0x560>
 800dd4e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dd52:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd5a:	d46e      	bmi.n	800de3a <_dtoa_r+0x5da>
 800dd5c:	42a6      	cmp	r6, r4
 800dd5e:	f43f af5a 	beq.w	800dc16 <_dtoa_r+0x3b6>
 800dd62:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dd66:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dd6a:	e7e0      	b.n	800dd2e <_dtoa_r+0x4ce>
 800dd6c:	4621      	mov	r1, r4
 800dd6e:	463e      	mov	r6, r7
 800dd70:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dd74:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800dd78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dd7c:	ee14 2a90 	vmov	r2, s9
 800dd80:	3230      	adds	r2, #48	@ 0x30
 800dd82:	f806 2b01 	strb.w	r2, [r6], #1
 800dd86:	42a6      	cmp	r6, r4
 800dd88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dd8c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dd90:	d119      	bne.n	800ddc6 <_dtoa_r+0x566>
 800dd92:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800dd96:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dd9a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda2:	dc4a      	bgt.n	800de3a <_dtoa_r+0x5da>
 800dda4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800dda8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ddac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb0:	f57f af31 	bpl.w	800dc16 <_dtoa_r+0x3b6>
 800ddb4:	460e      	mov	r6, r1
 800ddb6:	3901      	subs	r1, #1
 800ddb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ddbc:	2b30      	cmp	r3, #48	@ 0x30
 800ddbe:	d0f9      	beq.n	800ddb4 <_dtoa_r+0x554>
 800ddc0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ddc4:	e027      	b.n	800de16 <_dtoa_r+0x5b6>
 800ddc6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ddca:	e7d5      	b.n	800dd78 <_dtoa_r+0x518>
 800ddcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ddd0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ddd4:	463e      	mov	r6, r7
 800ddd6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ddda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ddde:	ee15 3a10 	vmov	r3, s10
 800dde2:	3330      	adds	r3, #48	@ 0x30
 800dde4:	f806 3b01 	strb.w	r3, [r6], #1
 800dde8:	1bf3      	subs	r3, r6, r7
 800ddea:	459a      	cmp	sl, r3
 800ddec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ddf0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ddf4:	d132      	bne.n	800de5c <_dtoa_r+0x5fc>
 800ddf6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ddfa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ddfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de02:	dc18      	bgt.n	800de36 <_dtoa_r+0x5d6>
 800de04:	eeb4 7b46 	vcmp.f64	d7, d6
 800de08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0c:	d103      	bne.n	800de16 <_dtoa_r+0x5b6>
 800de0e:	ee15 3a10 	vmov	r3, s10
 800de12:	07db      	lsls	r3, r3, #31
 800de14:	d40f      	bmi.n	800de36 <_dtoa_r+0x5d6>
 800de16:	9901      	ldr	r1, [sp, #4]
 800de18:	4648      	mov	r0, r9
 800de1a:	f000 fbbf 	bl	800e59c <_Bfree>
 800de1e:	2300      	movs	r3, #0
 800de20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de22:	7033      	strb	r3, [r6, #0]
 800de24:	f108 0301 	add.w	r3, r8, #1
 800de28:	6013      	str	r3, [r2, #0]
 800de2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f000 824b 	beq.w	800e2c8 <_dtoa_r+0xa68>
 800de32:	601e      	str	r6, [r3, #0]
 800de34:	e248      	b.n	800e2c8 <_dtoa_r+0xa68>
 800de36:	f8cd 8014 	str.w	r8, [sp, #20]
 800de3a:	4633      	mov	r3, r6
 800de3c:	461e      	mov	r6, r3
 800de3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de42:	2a39      	cmp	r2, #57	@ 0x39
 800de44:	d106      	bne.n	800de54 <_dtoa_r+0x5f4>
 800de46:	429f      	cmp	r7, r3
 800de48:	d1f8      	bne.n	800de3c <_dtoa_r+0x5dc>
 800de4a:	9a05      	ldr	r2, [sp, #20]
 800de4c:	3201      	adds	r2, #1
 800de4e:	9205      	str	r2, [sp, #20]
 800de50:	2230      	movs	r2, #48	@ 0x30
 800de52:	703a      	strb	r2, [r7, #0]
 800de54:	781a      	ldrb	r2, [r3, #0]
 800de56:	3201      	adds	r2, #1
 800de58:	701a      	strb	r2, [r3, #0]
 800de5a:	e7b1      	b.n	800ddc0 <_dtoa_r+0x560>
 800de5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800de60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de68:	d1b5      	bne.n	800ddd6 <_dtoa_r+0x576>
 800de6a:	e7d4      	b.n	800de16 <_dtoa_r+0x5b6>
 800de6c:	0800f5c8 	.word	0x0800f5c8
 800de70:	0800f5a0 	.word	0x0800f5a0
 800de74:	9908      	ldr	r1, [sp, #32]
 800de76:	2900      	cmp	r1, #0
 800de78:	f000 80e9 	beq.w	800e04e <_dtoa_r+0x7ee>
 800de7c:	9907      	ldr	r1, [sp, #28]
 800de7e:	2901      	cmp	r1, #1
 800de80:	f300 80cb 	bgt.w	800e01a <_dtoa_r+0x7ba>
 800de84:	2d00      	cmp	r5, #0
 800de86:	f000 80c4 	beq.w	800e012 <_dtoa_r+0x7b2>
 800de8a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800de8e:	9e04      	ldr	r6, [sp, #16]
 800de90:	461c      	mov	r4, r3
 800de92:	9305      	str	r3, [sp, #20]
 800de94:	9b04      	ldr	r3, [sp, #16]
 800de96:	4413      	add	r3, r2
 800de98:	9304      	str	r3, [sp, #16]
 800de9a:	9b06      	ldr	r3, [sp, #24]
 800de9c:	2101      	movs	r1, #1
 800de9e:	4413      	add	r3, r2
 800dea0:	4648      	mov	r0, r9
 800dea2:	9306      	str	r3, [sp, #24]
 800dea4:	f000 fc2e 	bl	800e704 <__i2b>
 800dea8:	9b05      	ldr	r3, [sp, #20]
 800deaa:	4605      	mov	r5, r0
 800deac:	b166      	cbz	r6, 800dec8 <_dtoa_r+0x668>
 800deae:	9a06      	ldr	r2, [sp, #24]
 800deb0:	2a00      	cmp	r2, #0
 800deb2:	dd09      	ble.n	800dec8 <_dtoa_r+0x668>
 800deb4:	42b2      	cmp	r2, r6
 800deb6:	9904      	ldr	r1, [sp, #16]
 800deb8:	bfa8      	it	ge
 800deba:	4632      	movge	r2, r6
 800debc:	1a89      	subs	r1, r1, r2
 800debe:	9104      	str	r1, [sp, #16]
 800dec0:	9906      	ldr	r1, [sp, #24]
 800dec2:	1ab6      	subs	r6, r6, r2
 800dec4:	1a8a      	subs	r2, r1, r2
 800dec6:	9206      	str	r2, [sp, #24]
 800dec8:	b30b      	cbz	r3, 800df0e <_dtoa_r+0x6ae>
 800deca:	9a08      	ldr	r2, [sp, #32]
 800decc:	2a00      	cmp	r2, #0
 800dece:	f000 80c5 	beq.w	800e05c <_dtoa_r+0x7fc>
 800ded2:	2c00      	cmp	r4, #0
 800ded4:	f000 80bf 	beq.w	800e056 <_dtoa_r+0x7f6>
 800ded8:	4629      	mov	r1, r5
 800deda:	4622      	mov	r2, r4
 800dedc:	4648      	mov	r0, r9
 800dede:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dee0:	f000 fcc8 	bl	800e874 <__pow5mult>
 800dee4:	9a01      	ldr	r2, [sp, #4]
 800dee6:	4601      	mov	r1, r0
 800dee8:	4605      	mov	r5, r0
 800deea:	4648      	mov	r0, r9
 800deec:	f000 fc20 	bl	800e730 <__multiply>
 800def0:	9901      	ldr	r1, [sp, #4]
 800def2:	9005      	str	r0, [sp, #20]
 800def4:	4648      	mov	r0, r9
 800def6:	f000 fb51 	bl	800e59c <_Bfree>
 800defa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800defc:	1b1b      	subs	r3, r3, r4
 800defe:	f000 80b0 	beq.w	800e062 <_dtoa_r+0x802>
 800df02:	9905      	ldr	r1, [sp, #20]
 800df04:	461a      	mov	r2, r3
 800df06:	4648      	mov	r0, r9
 800df08:	f000 fcb4 	bl	800e874 <__pow5mult>
 800df0c:	9001      	str	r0, [sp, #4]
 800df0e:	2101      	movs	r1, #1
 800df10:	4648      	mov	r0, r9
 800df12:	f000 fbf7 	bl	800e704 <__i2b>
 800df16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df18:	4604      	mov	r4, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f000 81da 	beq.w	800e2d4 <_dtoa_r+0xa74>
 800df20:	461a      	mov	r2, r3
 800df22:	4601      	mov	r1, r0
 800df24:	4648      	mov	r0, r9
 800df26:	f000 fca5 	bl	800e874 <__pow5mult>
 800df2a:	9b07      	ldr	r3, [sp, #28]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	4604      	mov	r4, r0
 800df30:	f300 80a0 	bgt.w	800e074 <_dtoa_r+0x814>
 800df34:	9b02      	ldr	r3, [sp, #8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f040 8096 	bne.w	800e068 <_dtoa_r+0x808>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800df42:	2a00      	cmp	r2, #0
 800df44:	f040 8092 	bne.w	800e06c <_dtoa_r+0x80c>
 800df48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800df4c:	0d12      	lsrs	r2, r2, #20
 800df4e:	0512      	lsls	r2, r2, #20
 800df50:	2a00      	cmp	r2, #0
 800df52:	f000 808d 	beq.w	800e070 <_dtoa_r+0x810>
 800df56:	9b04      	ldr	r3, [sp, #16]
 800df58:	3301      	adds	r3, #1
 800df5a:	9304      	str	r3, [sp, #16]
 800df5c:	9b06      	ldr	r3, [sp, #24]
 800df5e:	3301      	adds	r3, #1
 800df60:	9306      	str	r3, [sp, #24]
 800df62:	2301      	movs	r3, #1
 800df64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 81b9 	beq.w	800e2e0 <_dtoa_r+0xa80>
 800df6e:	6922      	ldr	r2, [r4, #16]
 800df70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800df74:	6910      	ldr	r0, [r2, #16]
 800df76:	f000 fb79 	bl	800e66c <__hi0bits>
 800df7a:	f1c0 0020 	rsb	r0, r0, #32
 800df7e:	9b06      	ldr	r3, [sp, #24]
 800df80:	4418      	add	r0, r3
 800df82:	f010 001f 	ands.w	r0, r0, #31
 800df86:	f000 8081 	beq.w	800e08c <_dtoa_r+0x82c>
 800df8a:	f1c0 0220 	rsb	r2, r0, #32
 800df8e:	2a04      	cmp	r2, #4
 800df90:	dd73      	ble.n	800e07a <_dtoa_r+0x81a>
 800df92:	9b04      	ldr	r3, [sp, #16]
 800df94:	f1c0 001c 	rsb	r0, r0, #28
 800df98:	4403      	add	r3, r0
 800df9a:	9304      	str	r3, [sp, #16]
 800df9c:	9b06      	ldr	r3, [sp, #24]
 800df9e:	4406      	add	r6, r0
 800dfa0:	4403      	add	r3, r0
 800dfa2:	9306      	str	r3, [sp, #24]
 800dfa4:	9b04      	ldr	r3, [sp, #16]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	dd05      	ble.n	800dfb6 <_dtoa_r+0x756>
 800dfaa:	9901      	ldr	r1, [sp, #4]
 800dfac:	461a      	mov	r2, r3
 800dfae:	4648      	mov	r0, r9
 800dfb0:	f000 fcba 	bl	800e928 <__lshift>
 800dfb4:	9001      	str	r0, [sp, #4]
 800dfb6:	9b06      	ldr	r3, [sp, #24]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	dd05      	ble.n	800dfc8 <_dtoa_r+0x768>
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	4648      	mov	r0, r9
 800dfc2:	f000 fcb1 	bl	800e928 <__lshift>
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d060      	beq.n	800e090 <_dtoa_r+0x830>
 800dfce:	9801      	ldr	r0, [sp, #4]
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	f000 fd15 	bl	800ea00 <__mcmp>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	da5a      	bge.n	800e090 <_dtoa_r+0x830>
 800dfda:	f108 33ff 	add.w	r3, r8, #4294967295
 800dfde:	9305      	str	r3, [sp, #20]
 800dfe0:	9901      	ldr	r1, [sp, #4]
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	220a      	movs	r2, #10
 800dfe6:	4648      	mov	r0, r9
 800dfe8:	f000 fafa 	bl	800e5e0 <__multadd>
 800dfec:	9b08      	ldr	r3, [sp, #32]
 800dfee:	9001      	str	r0, [sp, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f000 8177 	beq.w	800e2e4 <_dtoa_r+0xa84>
 800dff6:	4629      	mov	r1, r5
 800dff8:	2300      	movs	r3, #0
 800dffa:	220a      	movs	r2, #10
 800dffc:	4648      	mov	r0, r9
 800dffe:	f000 faef 	bl	800e5e0 <__multadd>
 800e002:	f1bb 0f00 	cmp.w	fp, #0
 800e006:	4605      	mov	r5, r0
 800e008:	dc6e      	bgt.n	800e0e8 <_dtoa_r+0x888>
 800e00a:	9b07      	ldr	r3, [sp, #28]
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	dc48      	bgt.n	800e0a2 <_dtoa_r+0x842>
 800e010:	e06a      	b.n	800e0e8 <_dtoa_r+0x888>
 800e012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e014:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e018:	e739      	b.n	800de8e <_dtoa_r+0x62e>
 800e01a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800e01e:	42a3      	cmp	r3, r4
 800e020:	db07      	blt.n	800e032 <_dtoa_r+0x7d2>
 800e022:	f1ba 0f00 	cmp.w	sl, #0
 800e026:	eba3 0404 	sub.w	r4, r3, r4
 800e02a:	db0b      	blt.n	800e044 <_dtoa_r+0x7e4>
 800e02c:	9e04      	ldr	r6, [sp, #16]
 800e02e:	4652      	mov	r2, sl
 800e030:	e72f      	b.n	800de92 <_dtoa_r+0x632>
 800e032:	1ae2      	subs	r2, r4, r3
 800e034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e036:	9e04      	ldr	r6, [sp, #16]
 800e038:	4413      	add	r3, r2
 800e03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e03c:	4652      	mov	r2, sl
 800e03e:	4623      	mov	r3, r4
 800e040:	2400      	movs	r4, #0
 800e042:	e726      	b.n	800de92 <_dtoa_r+0x632>
 800e044:	9a04      	ldr	r2, [sp, #16]
 800e046:	eba2 060a 	sub.w	r6, r2, sl
 800e04a:	2200      	movs	r2, #0
 800e04c:	e721      	b.n	800de92 <_dtoa_r+0x632>
 800e04e:	9e04      	ldr	r6, [sp, #16]
 800e050:	9d08      	ldr	r5, [sp, #32]
 800e052:	461c      	mov	r4, r3
 800e054:	e72a      	b.n	800deac <_dtoa_r+0x64c>
 800e056:	9a01      	ldr	r2, [sp, #4]
 800e058:	9205      	str	r2, [sp, #20]
 800e05a:	e752      	b.n	800df02 <_dtoa_r+0x6a2>
 800e05c:	9901      	ldr	r1, [sp, #4]
 800e05e:	461a      	mov	r2, r3
 800e060:	e751      	b.n	800df06 <_dtoa_r+0x6a6>
 800e062:	9b05      	ldr	r3, [sp, #20]
 800e064:	9301      	str	r3, [sp, #4]
 800e066:	e752      	b.n	800df0e <_dtoa_r+0x6ae>
 800e068:	2300      	movs	r3, #0
 800e06a:	e77b      	b.n	800df64 <_dtoa_r+0x704>
 800e06c:	9b02      	ldr	r3, [sp, #8]
 800e06e:	e779      	b.n	800df64 <_dtoa_r+0x704>
 800e070:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e072:	e778      	b.n	800df66 <_dtoa_r+0x706>
 800e074:	2300      	movs	r3, #0
 800e076:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e078:	e779      	b.n	800df6e <_dtoa_r+0x70e>
 800e07a:	d093      	beq.n	800dfa4 <_dtoa_r+0x744>
 800e07c:	9b04      	ldr	r3, [sp, #16]
 800e07e:	321c      	adds	r2, #28
 800e080:	4413      	add	r3, r2
 800e082:	9304      	str	r3, [sp, #16]
 800e084:	9b06      	ldr	r3, [sp, #24]
 800e086:	4416      	add	r6, r2
 800e088:	4413      	add	r3, r2
 800e08a:	e78a      	b.n	800dfa2 <_dtoa_r+0x742>
 800e08c:	4602      	mov	r2, r0
 800e08e:	e7f5      	b.n	800e07c <_dtoa_r+0x81c>
 800e090:	f1ba 0f00 	cmp.w	sl, #0
 800e094:	f8cd 8014 	str.w	r8, [sp, #20]
 800e098:	46d3      	mov	fp, sl
 800e09a:	dc21      	bgt.n	800e0e0 <_dtoa_r+0x880>
 800e09c:	9b07      	ldr	r3, [sp, #28]
 800e09e:	2b02      	cmp	r3, #2
 800e0a0:	dd1e      	ble.n	800e0e0 <_dtoa_r+0x880>
 800e0a2:	f1bb 0f00 	cmp.w	fp, #0
 800e0a6:	f47f addc 	bne.w	800dc62 <_dtoa_r+0x402>
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	465b      	mov	r3, fp
 800e0ae:	2205      	movs	r2, #5
 800e0b0:	4648      	mov	r0, r9
 800e0b2:	f000 fa95 	bl	800e5e0 <__multadd>
 800e0b6:	4601      	mov	r1, r0
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	9801      	ldr	r0, [sp, #4]
 800e0bc:	f000 fca0 	bl	800ea00 <__mcmp>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	f77f adce 	ble.w	800dc62 <_dtoa_r+0x402>
 800e0c6:	463e      	mov	r6, r7
 800e0c8:	2331      	movs	r3, #49	@ 0x31
 800e0ca:	f806 3b01 	strb.w	r3, [r6], #1
 800e0ce:	9b05      	ldr	r3, [sp, #20]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	9305      	str	r3, [sp, #20]
 800e0d4:	e5c9      	b.n	800dc6a <_dtoa_r+0x40a>
 800e0d6:	f8cd 8014 	str.w	r8, [sp, #20]
 800e0da:	4654      	mov	r4, sl
 800e0dc:	4625      	mov	r5, r4
 800e0de:	e7f2      	b.n	800e0c6 <_dtoa_r+0x866>
 800e0e0:	9b08      	ldr	r3, [sp, #32]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	f000 8102 	beq.w	800e2ec <_dtoa_r+0xa8c>
 800e0e8:	2e00      	cmp	r6, #0
 800e0ea:	dd05      	ble.n	800e0f8 <_dtoa_r+0x898>
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	4632      	mov	r2, r6
 800e0f0:	4648      	mov	r0, r9
 800e0f2:	f000 fc19 	bl	800e928 <__lshift>
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d058      	beq.n	800e1b0 <_dtoa_r+0x950>
 800e0fe:	6869      	ldr	r1, [r5, #4]
 800e100:	4648      	mov	r0, r9
 800e102:	f000 fa0b 	bl	800e51c <_Balloc>
 800e106:	4606      	mov	r6, r0
 800e108:	b928      	cbnz	r0, 800e116 <_dtoa_r+0x8b6>
 800e10a:	4b82      	ldr	r3, [pc, #520]	@ (800e314 <_dtoa_r+0xab4>)
 800e10c:	4602      	mov	r2, r0
 800e10e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e112:	f7ff bbbe 	b.w	800d892 <_dtoa_r+0x32>
 800e116:	692a      	ldr	r2, [r5, #16]
 800e118:	3202      	adds	r2, #2
 800e11a:	0092      	lsls	r2, r2, #2
 800e11c:	f105 010c 	add.w	r1, r5, #12
 800e120:	300c      	adds	r0, #12
 800e122:	f001 f807 	bl	800f134 <memcpy>
 800e126:	2201      	movs	r2, #1
 800e128:	4631      	mov	r1, r6
 800e12a:	4648      	mov	r0, r9
 800e12c:	f000 fbfc 	bl	800e928 <__lshift>
 800e130:	1c7b      	adds	r3, r7, #1
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	eb07 030b 	add.w	r3, r7, fp
 800e138:	9309      	str	r3, [sp, #36]	@ 0x24
 800e13a:	9b02      	ldr	r3, [sp, #8]
 800e13c:	f003 0301 	and.w	r3, r3, #1
 800e140:	46a8      	mov	r8, r5
 800e142:	9308      	str	r3, [sp, #32]
 800e144:	4605      	mov	r5, r0
 800e146:	9b04      	ldr	r3, [sp, #16]
 800e148:	9801      	ldr	r0, [sp, #4]
 800e14a:	4621      	mov	r1, r4
 800e14c:	f103 3bff 	add.w	fp, r3, #4294967295
 800e150:	f7ff fafd 	bl	800d74e <quorem>
 800e154:	4641      	mov	r1, r8
 800e156:	9002      	str	r0, [sp, #8]
 800e158:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e15c:	9801      	ldr	r0, [sp, #4]
 800e15e:	f000 fc4f 	bl	800ea00 <__mcmp>
 800e162:	462a      	mov	r2, r5
 800e164:	9006      	str	r0, [sp, #24]
 800e166:	4621      	mov	r1, r4
 800e168:	4648      	mov	r0, r9
 800e16a:	f000 fc65 	bl	800ea38 <__mdiff>
 800e16e:	68c2      	ldr	r2, [r0, #12]
 800e170:	4606      	mov	r6, r0
 800e172:	b9fa      	cbnz	r2, 800e1b4 <_dtoa_r+0x954>
 800e174:	4601      	mov	r1, r0
 800e176:	9801      	ldr	r0, [sp, #4]
 800e178:	f000 fc42 	bl	800ea00 <__mcmp>
 800e17c:	4602      	mov	r2, r0
 800e17e:	4631      	mov	r1, r6
 800e180:	4648      	mov	r0, r9
 800e182:	920a      	str	r2, [sp, #40]	@ 0x28
 800e184:	f000 fa0a 	bl	800e59c <_Bfree>
 800e188:	9b07      	ldr	r3, [sp, #28]
 800e18a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e18c:	9e04      	ldr	r6, [sp, #16]
 800e18e:	ea42 0103 	orr.w	r1, r2, r3
 800e192:	9b08      	ldr	r3, [sp, #32]
 800e194:	4319      	orrs	r1, r3
 800e196:	d10f      	bne.n	800e1b8 <_dtoa_r+0x958>
 800e198:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e19c:	d028      	beq.n	800e1f0 <_dtoa_r+0x990>
 800e19e:	9b06      	ldr	r3, [sp, #24]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	dd02      	ble.n	800e1aa <_dtoa_r+0x94a>
 800e1a4:	9b02      	ldr	r3, [sp, #8]
 800e1a6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800e1aa:	f88b a000 	strb.w	sl, [fp]
 800e1ae:	e55e      	b.n	800dc6e <_dtoa_r+0x40e>
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	e7bd      	b.n	800e130 <_dtoa_r+0x8d0>
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	e7e2      	b.n	800e17e <_dtoa_r+0x91e>
 800e1b8:	9b06      	ldr	r3, [sp, #24]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	db04      	blt.n	800e1c8 <_dtoa_r+0x968>
 800e1be:	9907      	ldr	r1, [sp, #28]
 800e1c0:	430b      	orrs	r3, r1
 800e1c2:	9908      	ldr	r1, [sp, #32]
 800e1c4:	430b      	orrs	r3, r1
 800e1c6:	d120      	bne.n	800e20a <_dtoa_r+0x9aa>
 800e1c8:	2a00      	cmp	r2, #0
 800e1ca:	ddee      	ble.n	800e1aa <_dtoa_r+0x94a>
 800e1cc:	9901      	ldr	r1, [sp, #4]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4648      	mov	r0, r9
 800e1d2:	f000 fba9 	bl	800e928 <__lshift>
 800e1d6:	4621      	mov	r1, r4
 800e1d8:	9001      	str	r0, [sp, #4]
 800e1da:	f000 fc11 	bl	800ea00 <__mcmp>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	dc03      	bgt.n	800e1ea <_dtoa_r+0x98a>
 800e1e2:	d1e2      	bne.n	800e1aa <_dtoa_r+0x94a>
 800e1e4:	f01a 0f01 	tst.w	sl, #1
 800e1e8:	d0df      	beq.n	800e1aa <_dtoa_r+0x94a>
 800e1ea:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e1ee:	d1d9      	bne.n	800e1a4 <_dtoa_r+0x944>
 800e1f0:	2339      	movs	r3, #57	@ 0x39
 800e1f2:	f88b 3000 	strb.w	r3, [fp]
 800e1f6:	4633      	mov	r3, r6
 800e1f8:	461e      	mov	r6, r3
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e200:	2a39      	cmp	r2, #57	@ 0x39
 800e202:	d052      	beq.n	800e2aa <_dtoa_r+0xa4a>
 800e204:	3201      	adds	r2, #1
 800e206:	701a      	strb	r2, [r3, #0]
 800e208:	e531      	b.n	800dc6e <_dtoa_r+0x40e>
 800e20a:	2a00      	cmp	r2, #0
 800e20c:	dd07      	ble.n	800e21e <_dtoa_r+0x9be>
 800e20e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e212:	d0ed      	beq.n	800e1f0 <_dtoa_r+0x990>
 800e214:	f10a 0301 	add.w	r3, sl, #1
 800e218:	f88b 3000 	strb.w	r3, [fp]
 800e21c:	e527      	b.n	800dc6e <_dtoa_r+0x40e>
 800e21e:	9b04      	ldr	r3, [sp, #16]
 800e220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e222:	f803 ac01 	strb.w	sl, [r3, #-1]
 800e226:	4293      	cmp	r3, r2
 800e228:	d029      	beq.n	800e27e <_dtoa_r+0xa1e>
 800e22a:	9901      	ldr	r1, [sp, #4]
 800e22c:	2300      	movs	r3, #0
 800e22e:	220a      	movs	r2, #10
 800e230:	4648      	mov	r0, r9
 800e232:	f000 f9d5 	bl	800e5e0 <__multadd>
 800e236:	45a8      	cmp	r8, r5
 800e238:	9001      	str	r0, [sp, #4]
 800e23a:	f04f 0300 	mov.w	r3, #0
 800e23e:	f04f 020a 	mov.w	r2, #10
 800e242:	4641      	mov	r1, r8
 800e244:	4648      	mov	r0, r9
 800e246:	d107      	bne.n	800e258 <_dtoa_r+0x9f8>
 800e248:	f000 f9ca 	bl	800e5e0 <__multadd>
 800e24c:	4680      	mov	r8, r0
 800e24e:	4605      	mov	r5, r0
 800e250:	9b04      	ldr	r3, [sp, #16]
 800e252:	3301      	adds	r3, #1
 800e254:	9304      	str	r3, [sp, #16]
 800e256:	e776      	b.n	800e146 <_dtoa_r+0x8e6>
 800e258:	f000 f9c2 	bl	800e5e0 <__multadd>
 800e25c:	4629      	mov	r1, r5
 800e25e:	4680      	mov	r8, r0
 800e260:	2300      	movs	r3, #0
 800e262:	220a      	movs	r2, #10
 800e264:	4648      	mov	r0, r9
 800e266:	f000 f9bb 	bl	800e5e0 <__multadd>
 800e26a:	4605      	mov	r5, r0
 800e26c:	e7f0      	b.n	800e250 <_dtoa_r+0x9f0>
 800e26e:	f1bb 0f00 	cmp.w	fp, #0
 800e272:	bfcc      	ite	gt
 800e274:	465e      	movgt	r6, fp
 800e276:	2601      	movle	r6, #1
 800e278:	443e      	add	r6, r7
 800e27a:	f04f 0800 	mov.w	r8, #0
 800e27e:	9901      	ldr	r1, [sp, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	4648      	mov	r0, r9
 800e284:	f000 fb50 	bl	800e928 <__lshift>
 800e288:	4621      	mov	r1, r4
 800e28a:	9001      	str	r0, [sp, #4]
 800e28c:	f000 fbb8 	bl	800ea00 <__mcmp>
 800e290:	2800      	cmp	r0, #0
 800e292:	dcb0      	bgt.n	800e1f6 <_dtoa_r+0x996>
 800e294:	d102      	bne.n	800e29c <_dtoa_r+0xa3c>
 800e296:	f01a 0f01 	tst.w	sl, #1
 800e29a:	d1ac      	bne.n	800e1f6 <_dtoa_r+0x996>
 800e29c:	4633      	mov	r3, r6
 800e29e:	461e      	mov	r6, r3
 800e2a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2a4:	2a30      	cmp	r2, #48	@ 0x30
 800e2a6:	d0fa      	beq.n	800e29e <_dtoa_r+0xa3e>
 800e2a8:	e4e1      	b.n	800dc6e <_dtoa_r+0x40e>
 800e2aa:	429f      	cmp	r7, r3
 800e2ac:	d1a4      	bne.n	800e1f8 <_dtoa_r+0x998>
 800e2ae:	9b05      	ldr	r3, [sp, #20]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	9305      	str	r3, [sp, #20]
 800e2b4:	2331      	movs	r3, #49	@ 0x31
 800e2b6:	703b      	strb	r3, [r7, #0]
 800e2b8:	e4d9      	b.n	800dc6e <_dtoa_r+0x40e>
 800e2ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e2bc:	4f16      	ldr	r7, [pc, #88]	@ (800e318 <_dtoa_r+0xab8>)
 800e2be:	b11b      	cbz	r3, 800e2c8 <_dtoa_r+0xa68>
 800e2c0:	f107 0308 	add.w	r3, r7, #8
 800e2c4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e2c6:	6013      	str	r3, [r2, #0]
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	b011      	add	sp, #68	@ 0x44
 800e2cc:	ecbd 8b02 	vpop	{d8}
 800e2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d4:	9b07      	ldr	r3, [sp, #28]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	f77f ae2c 	ble.w	800df34 <_dtoa_r+0x6d4>
 800e2dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2e0:	2001      	movs	r0, #1
 800e2e2:	e64c      	b.n	800df7e <_dtoa_r+0x71e>
 800e2e4:	f1bb 0f00 	cmp.w	fp, #0
 800e2e8:	f77f aed8 	ble.w	800e09c <_dtoa_r+0x83c>
 800e2ec:	463e      	mov	r6, r7
 800e2ee:	9801      	ldr	r0, [sp, #4]
 800e2f0:	4621      	mov	r1, r4
 800e2f2:	f7ff fa2c 	bl	800d74e <quorem>
 800e2f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e2fa:	f806 ab01 	strb.w	sl, [r6], #1
 800e2fe:	1bf2      	subs	r2, r6, r7
 800e300:	4593      	cmp	fp, r2
 800e302:	ddb4      	ble.n	800e26e <_dtoa_r+0xa0e>
 800e304:	9901      	ldr	r1, [sp, #4]
 800e306:	2300      	movs	r3, #0
 800e308:	220a      	movs	r2, #10
 800e30a:	4648      	mov	r0, r9
 800e30c:	f000 f968 	bl	800e5e0 <__multadd>
 800e310:	9001      	str	r0, [sp, #4]
 800e312:	e7ec      	b.n	800e2ee <_dtoa_r+0xa8e>
 800e314:	0800f4cc 	.word	0x0800f4cc
 800e318:	0800f450 	.word	0x0800f450

0800e31c <_free_r>:
 800e31c:	b538      	push	{r3, r4, r5, lr}
 800e31e:	4605      	mov	r5, r0
 800e320:	2900      	cmp	r1, #0
 800e322:	d041      	beq.n	800e3a8 <_free_r+0x8c>
 800e324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e328:	1f0c      	subs	r4, r1, #4
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	bfb8      	it	lt
 800e32e:	18e4      	addlt	r4, r4, r3
 800e330:	f000 f8e8 	bl	800e504 <__malloc_lock>
 800e334:	4a1d      	ldr	r2, [pc, #116]	@ (800e3ac <_free_r+0x90>)
 800e336:	6813      	ldr	r3, [r2, #0]
 800e338:	b933      	cbnz	r3, 800e348 <_free_r+0x2c>
 800e33a:	6063      	str	r3, [r4, #4]
 800e33c:	6014      	str	r4, [r2, #0]
 800e33e:	4628      	mov	r0, r5
 800e340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e344:	f000 b8e4 	b.w	800e510 <__malloc_unlock>
 800e348:	42a3      	cmp	r3, r4
 800e34a:	d908      	bls.n	800e35e <_free_r+0x42>
 800e34c:	6820      	ldr	r0, [r4, #0]
 800e34e:	1821      	adds	r1, r4, r0
 800e350:	428b      	cmp	r3, r1
 800e352:	bf01      	itttt	eq
 800e354:	6819      	ldreq	r1, [r3, #0]
 800e356:	685b      	ldreq	r3, [r3, #4]
 800e358:	1809      	addeq	r1, r1, r0
 800e35a:	6021      	streq	r1, [r4, #0]
 800e35c:	e7ed      	b.n	800e33a <_free_r+0x1e>
 800e35e:	461a      	mov	r2, r3
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	b10b      	cbz	r3, 800e368 <_free_r+0x4c>
 800e364:	42a3      	cmp	r3, r4
 800e366:	d9fa      	bls.n	800e35e <_free_r+0x42>
 800e368:	6811      	ldr	r1, [r2, #0]
 800e36a:	1850      	adds	r0, r2, r1
 800e36c:	42a0      	cmp	r0, r4
 800e36e:	d10b      	bne.n	800e388 <_free_r+0x6c>
 800e370:	6820      	ldr	r0, [r4, #0]
 800e372:	4401      	add	r1, r0
 800e374:	1850      	adds	r0, r2, r1
 800e376:	4283      	cmp	r3, r0
 800e378:	6011      	str	r1, [r2, #0]
 800e37a:	d1e0      	bne.n	800e33e <_free_r+0x22>
 800e37c:	6818      	ldr	r0, [r3, #0]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	6053      	str	r3, [r2, #4]
 800e382:	4408      	add	r0, r1
 800e384:	6010      	str	r0, [r2, #0]
 800e386:	e7da      	b.n	800e33e <_free_r+0x22>
 800e388:	d902      	bls.n	800e390 <_free_r+0x74>
 800e38a:	230c      	movs	r3, #12
 800e38c:	602b      	str	r3, [r5, #0]
 800e38e:	e7d6      	b.n	800e33e <_free_r+0x22>
 800e390:	6820      	ldr	r0, [r4, #0]
 800e392:	1821      	adds	r1, r4, r0
 800e394:	428b      	cmp	r3, r1
 800e396:	bf04      	itt	eq
 800e398:	6819      	ldreq	r1, [r3, #0]
 800e39a:	685b      	ldreq	r3, [r3, #4]
 800e39c:	6063      	str	r3, [r4, #4]
 800e39e:	bf04      	itt	eq
 800e3a0:	1809      	addeq	r1, r1, r0
 800e3a2:	6021      	streq	r1, [r4, #0]
 800e3a4:	6054      	str	r4, [r2, #4]
 800e3a6:	e7ca      	b.n	800e33e <_free_r+0x22>
 800e3a8:	bd38      	pop	{r3, r4, r5, pc}
 800e3aa:	bf00      	nop
 800e3ac:	24001278 	.word	0x24001278

0800e3b0 <malloc>:
 800e3b0:	4b02      	ldr	r3, [pc, #8]	@ (800e3bc <malloc+0xc>)
 800e3b2:	4601      	mov	r1, r0
 800e3b4:	6818      	ldr	r0, [r3, #0]
 800e3b6:	f000 b825 	b.w	800e404 <_malloc_r>
 800e3ba:	bf00      	nop
 800e3bc:	2400001c 	.word	0x2400001c

0800e3c0 <sbrk_aligned>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	4e0f      	ldr	r6, [pc, #60]	@ (800e400 <sbrk_aligned+0x40>)
 800e3c4:	460c      	mov	r4, r1
 800e3c6:	6831      	ldr	r1, [r6, #0]
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	b911      	cbnz	r1, 800e3d2 <sbrk_aligned+0x12>
 800e3cc:	f000 fea2 	bl	800f114 <_sbrk_r>
 800e3d0:	6030      	str	r0, [r6, #0]
 800e3d2:	4621      	mov	r1, r4
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	f000 fe9d 	bl	800f114 <_sbrk_r>
 800e3da:	1c43      	adds	r3, r0, #1
 800e3dc:	d103      	bne.n	800e3e6 <sbrk_aligned+0x26>
 800e3de:	f04f 34ff 	mov.w	r4, #4294967295
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	bd70      	pop	{r4, r5, r6, pc}
 800e3e6:	1cc4      	adds	r4, r0, #3
 800e3e8:	f024 0403 	bic.w	r4, r4, #3
 800e3ec:	42a0      	cmp	r0, r4
 800e3ee:	d0f8      	beq.n	800e3e2 <sbrk_aligned+0x22>
 800e3f0:	1a21      	subs	r1, r4, r0
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f000 fe8e 	bl	800f114 <_sbrk_r>
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	d1f2      	bne.n	800e3e2 <sbrk_aligned+0x22>
 800e3fc:	e7ef      	b.n	800e3de <sbrk_aligned+0x1e>
 800e3fe:	bf00      	nop
 800e400:	24001274 	.word	0x24001274

0800e404 <_malloc_r>:
 800e404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e408:	1ccd      	adds	r5, r1, #3
 800e40a:	f025 0503 	bic.w	r5, r5, #3
 800e40e:	3508      	adds	r5, #8
 800e410:	2d0c      	cmp	r5, #12
 800e412:	bf38      	it	cc
 800e414:	250c      	movcc	r5, #12
 800e416:	2d00      	cmp	r5, #0
 800e418:	4606      	mov	r6, r0
 800e41a:	db01      	blt.n	800e420 <_malloc_r+0x1c>
 800e41c:	42a9      	cmp	r1, r5
 800e41e:	d904      	bls.n	800e42a <_malloc_r+0x26>
 800e420:	230c      	movs	r3, #12
 800e422:	6033      	str	r3, [r6, #0]
 800e424:	2000      	movs	r0, #0
 800e426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e42a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e500 <_malloc_r+0xfc>
 800e42e:	f000 f869 	bl	800e504 <__malloc_lock>
 800e432:	f8d8 3000 	ldr.w	r3, [r8]
 800e436:	461c      	mov	r4, r3
 800e438:	bb44      	cbnz	r4, 800e48c <_malloc_r+0x88>
 800e43a:	4629      	mov	r1, r5
 800e43c:	4630      	mov	r0, r6
 800e43e:	f7ff ffbf 	bl	800e3c0 <sbrk_aligned>
 800e442:	1c43      	adds	r3, r0, #1
 800e444:	4604      	mov	r4, r0
 800e446:	d158      	bne.n	800e4fa <_malloc_r+0xf6>
 800e448:	f8d8 4000 	ldr.w	r4, [r8]
 800e44c:	4627      	mov	r7, r4
 800e44e:	2f00      	cmp	r7, #0
 800e450:	d143      	bne.n	800e4da <_malloc_r+0xd6>
 800e452:	2c00      	cmp	r4, #0
 800e454:	d04b      	beq.n	800e4ee <_malloc_r+0xea>
 800e456:	6823      	ldr	r3, [r4, #0]
 800e458:	4639      	mov	r1, r7
 800e45a:	4630      	mov	r0, r6
 800e45c:	eb04 0903 	add.w	r9, r4, r3
 800e460:	f000 fe58 	bl	800f114 <_sbrk_r>
 800e464:	4581      	cmp	r9, r0
 800e466:	d142      	bne.n	800e4ee <_malloc_r+0xea>
 800e468:	6821      	ldr	r1, [r4, #0]
 800e46a:	1a6d      	subs	r5, r5, r1
 800e46c:	4629      	mov	r1, r5
 800e46e:	4630      	mov	r0, r6
 800e470:	f7ff ffa6 	bl	800e3c0 <sbrk_aligned>
 800e474:	3001      	adds	r0, #1
 800e476:	d03a      	beq.n	800e4ee <_malloc_r+0xea>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	442b      	add	r3, r5
 800e47c:	6023      	str	r3, [r4, #0]
 800e47e:	f8d8 3000 	ldr.w	r3, [r8]
 800e482:	685a      	ldr	r2, [r3, #4]
 800e484:	bb62      	cbnz	r2, 800e4e0 <_malloc_r+0xdc>
 800e486:	f8c8 7000 	str.w	r7, [r8]
 800e48a:	e00f      	b.n	800e4ac <_malloc_r+0xa8>
 800e48c:	6822      	ldr	r2, [r4, #0]
 800e48e:	1b52      	subs	r2, r2, r5
 800e490:	d420      	bmi.n	800e4d4 <_malloc_r+0xd0>
 800e492:	2a0b      	cmp	r2, #11
 800e494:	d917      	bls.n	800e4c6 <_malloc_r+0xc2>
 800e496:	1961      	adds	r1, r4, r5
 800e498:	42a3      	cmp	r3, r4
 800e49a:	6025      	str	r5, [r4, #0]
 800e49c:	bf18      	it	ne
 800e49e:	6059      	strne	r1, [r3, #4]
 800e4a0:	6863      	ldr	r3, [r4, #4]
 800e4a2:	bf08      	it	eq
 800e4a4:	f8c8 1000 	streq.w	r1, [r8]
 800e4a8:	5162      	str	r2, [r4, r5]
 800e4aa:	604b      	str	r3, [r1, #4]
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f000 f82f 	bl	800e510 <__malloc_unlock>
 800e4b2:	f104 000b 	add.w	r0, r4, #11
 800e4b6:	1d23      	adds	r3, r4, #4
 800e4b8:	f020 0007 	bic.w	r0, r0, #7
 800e4bc:	1ac2      	subs	r2, r0, r3
 800e4be:	bf1c      	itt	ne
 800e4c0:	1a1b      	subne	r3, r3, r0
 800e4c2:	50a3      	strne	r3, [r4, r2]
 800e4c4:	e7af      	b.n	800e426 <_malloc_r+0x22>
 800e4c6:	6862      	ldr	r2, [r4, #4]
 800e4c8:	42a3      	cmp	r3, r4
 800e4ca:	bf0c      	ite	eq
 800e4cc:	f8c8 2000 	streq.w	r2, [r8]
 800e4d0:	605a      	strne	r2, [r3, #4]
 800e4d2:	e7eb      	b.n	800e4ac <_malloc_r+0xa8>
 800e4d4:	4623      	mov	r3, r4
 800e4d6:	6864      	ldr	r4, [r4, #4]
 800e4d8:	e7ae      	b.n	800e438 <_malloc_r+0x34>
 800e4da:	463c      	mov	r4, r7
 800e4dc:	687f      	ldr	r7, [r7, #4]
 800e4de:	e7b6      	b.n	800e44e <_malloc_r+0x4a>
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	42a3      	cmp	r3, r4
 800e4e6:	d1fb      	bne.n	800e4e0 <_malloc_r+0xdc>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	6053      	str	r3, [r2, #4]
 800e4ec:	e7de      	b.n	800e4ac <_malloc_r+0xa8>
 800e4ee:	230c      	movs	r3, #12
 800e4f0:	6033      	str	r3, [r6, #0]
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f000 f80c 	bl	800e510 <__malloc_unlock>
 800e4f8:	e794      	b.n	800e424 <_malloc_r+0x20>
 800e4fa:	6005      	str	r5, [r0, #0]
 800e4fc:	e7d6      	b.n	800e4ac <_malloc_r+0xa8>
 800e4fe:	bf00      	nop
 800e500:	24001278 	.word	0x24001278

0800e504 <__malloc_lock>:
 800e504:	4801      	ldr	r0, [pc, #4]	@ (800e50c <__malloc_lock+0x8>)
 800e506:	f7ff b920 	b.w	800d74a <__retarget_lock_acquire_recursive>
 800e50a:	bf00      	nop
 800e50c:	24001270 	.word	0x24001270

0800e510 <__malloc_unlock>:
 800e510:	4801      	ldr	r0, [pc, #4]	@ (800e518 <__malloc_unlock+0x8>)
 800e512:	f7ff b91b 	b.w	800d74c <__retarget_lock_release_recursive>
 800e516:	bf00      	nop
 800e518:	24001270 	.word	0x24001270

0800e51c <_Balloc>:
 800e51c:	b570      	push	{r4, r5, r6, lr}
 800e51e:	69c6      	ldr	r6, [r0, #28]
 800e520:	4604      	mov	r4, r0
 800e522:	460d      	mov	r5, r1
 800e524:	b976      	cbnz	r6, 800e544 <_Balloc+0x28>
 800e526:	2010      	movs	r0, #16
 800e528:	f7ff ff42 	bl	800e3b0 <malloc>
 800e52c:	4602      	mov	r2, r0
 800e52e:	61e0      	str	r0, [r4, #28]
 800e530:	b920      	cbnz	r0, 800e53c <_Balloc+0x20>
 800e532:	4b18      	ldr	r3, [pc, #96]	@ (800e594 <_Balloc+0x78>)
 800e534:	4818      	ldr	r0, [pc, #96]	@ (800e598 <_Balloc+0x7c>)
 800e536:	216b      	movs	r1, #107	@ 0x6b
 800e538:	f000 fe0a 	bl	800f150 <__assert_func>
 800e53c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e540:	6006      	str	r6, [r0, #0]
 800e542:	60c6      	str	r6, [r0, #12]
 800e544:	69e6      	ldr	r6, [r4, #28]
 800e546:	68f3      	ldr	r3, [r6, #12]
 800e548:	b183      	cbz	r3, 800e56c <_Balloc+0x50>
 800e54a:	69e3      	ldr	r3, [r4, #28]
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e552:	b9b8      	cbnz	r0, 800e584 <_Balloc+0x68>
 800e554:	2101      	movs	r1, #1
 800e556:	fa01 f605 	lsl.w	r6, r1, r5
 800e55a:	1d72      	adds	r2, r6, #5
 800e55c:	0092      	lsls	r2, r2, #2
 800e55e:	4620      	mov	r0, r4
 800e560:	f000 fe14 	bl	800f18c <_calloc_r>
 800e564:	b160      	cbz	r0, 800e580 <_Balloc+0x64>
 800e566:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e56a:	e00e      	b.n	800e58a <_Balloc+0x6e>
 800e56c:	2221      	movs	r2, #33	@ 0x21
 800e56e:	2104      	movs	r1, #4
 800e570:	4620      	mov	r0, r4
 800e572:	f000 fe0b 	bl	800f18c <_calloc_r>
 800e576:	69e3      	ldr	r3, [r4, #28]
 800e578:	60f0      	str	r0, [r6, #12]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1e4      	bne.n	800e54a <_Balloc+0x2e>
 800e580:	2000      	movs	r0, #0
 800e582:	bd70      	pop	{r4, r5, r6, pc}
 800e584:	6802      	ldr	r2, [r0, #0]
 800e586:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e58a:	2300      	movs	r3, #0
 800e58c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e590:	e7f7      	b.n	800e582 <_Balloc+0x66>
 800e592:	bf00      	nop
 800e594:	0800f45d 	.word	0x0800f45d
 800e598:	0800f4dd 	.word	0x0800f4dd

0800e59c <_Bfree>:
 800e59c:	b570      	push	{r4, r5, r6, lr}
 800e59e:	69c6      	ldr	r6, [r0, #28]
 800e5a0:	4605      	mov	r5, r0
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	b976      	cbnz	r6, 800e5c4 <_Bfree+0x28>
 800e5a6:	2010      	movs	r0, #16
 800e5a8:	f7ff ff02 	bl	800e3b0 <malloc>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	61e8      	str	r0, [r5, #28]
 800e5b0:	b920      	cbnz	r0, 800e5bc <_Bfree+0x20>
 800e5b2:	4b09      	ldr	r3, [pc, #36]	@ (800e5d8 <_Bfree+0x3c>)
 800e5b4:	4809      	ldr	r0, [pc, #36]	@ (800e5dc <_Bfree+0x40>)
 800e5b6:	218f      	movs	r1, #143	@ 0x8f
 800e5b8:	f000 fdca 	bl	800f150 <__assert_func>
 800e5bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5c0:	6006      	str	r6, [r0, #0]
 800e5c2:	60c6      	str	r6, [r0, #12]
 800e5c4:	b13c      	cbz	r4, 800e5d6 <_Bfree+0x3a>
 800e5c6:	69eb      	ldr	r3, [r5, #28]
 800e5c8:	6862      	ldr	r2, [r4, #4]
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5d0:	6021      	str	r1, [r4, #0]
 800e5d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5d6:	bd70      	pop	{r4, r5, r6, pc}
 800e5d8:	0800f45d 	.word	0x0800f45d
 800e5dc:	0800f4dd 	.word	0x0800f4dd

0800e5e0 <__multadd>:
 800e5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e4:	690d      	ldr	r5, [r1, #16]
 800e5e6:	4607      	mov	r7, r0
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	461e      	mov	r6, r3
 800e5ec:	f101 0c14 	add.w	ip, r1, #20
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	f8dc 3000 	ldr.w	r3, [ip]
 800e5f6:	b299      	uxth	r1, r3
 800e5f8:	fb02 6101 	mla	r1, r2, r1, r6
 800e5fc:	0c1e      	lsrs	r6, r3, #16
 800e5fe:	0c0b      	lsrs	r3, r1, #16
 800e600:	fb02 3306 	mla	r3, r2, r6, r3
 800e604:	b289      	uxth	r1, r1
 800e606:	3001      	adds	r0, #1
 800e608:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e60c:	4285      	cmp	r5, r0
 800e60e:	f84c 1b04 	str.w	r1, [ip], #4
 800e612:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e616:	dcec      	bgt.n	800e5f2 <__multadd+0x12>
 800e618:	b30e      	cbz	r6, 800e65e <__multadd+0x7e>
 800e61a:	68a3      	ldr	r3, [r4, #8]
 800e61c:	42ab      	cmp	r3, r5
 800e61e:	dc19      	bgt.n	800e654 <__multadd+0x74>
 800e620:	6861      	ldr	r1, [r4, #4]
 800e622:	4638      	mov	r0, r7
 800e624:	3101      	adds	r1, #1
 800e626:	f7ff ff79 	bl	800e51c <_Balloc>
 800e62a:	4680      	mov	r8, r0
 800e62c:	b928      	cbnz	r0, 800e63a <__multadd+0x5a>
 800e62e:	4602      	mov	r2, r0
 800e630:	4b0c      	ldr	r3, [pc, #48]	@ (800e664 <__multadd+0x84>)
 800e632:	480d      	ldr	r0, [pc, #52]	@ (800e668 <__multadd+0x88>)
 800e634:	21ba      	movs	r1, #186	@ 0xba
 800e636:	f000 fd8b 	bl	800f150 <__assert_func>
 800e63a:	6922      	ldr	r2, [r4, #16]
 800e63c:	3202      	adds	r2, #2
 800e63e:	f104 010c 	add.w	r1, r4, #12
 800e642:	0092      	lsls	r2, r2, #2
 800e644:	300c      	adds	r0, #12
 800e646:	f000 fd75 	bl	800f134 <memcpy>
 800e64a:	4621      	mov	r1, r4
 800e64c:	4638      	mov	r0, r7
 800e64e:	f7ff ffa5 	bl	800e59c <_Bfree>
 800e652:	4644      	mov	r4, r8
 800e654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e658:	3501      	adds	r5, #1
 800e65a:	615e      	str	r6, [r3, #20]
 800e65c:	6125      	str	r5, [r4, #16]
 800e65e:	4620      	mov	r0, r4
 800e660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e664:	0800f4cc 	.word	0x0800f4cc
 800e668:	0800f4dd 	.word	0x0800f4dd

0800e66c <__hi0bits>:
 800e66c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e670:	4603      	mov	r3, r0
 800e672:	bf36      	itet	cc
 800e674:	0403      	lslcc	r3, r0, #16
 800e676:	2000      	movcs	r0, #0
 800e678:	2010      	movcc	r0, #16
 800e67a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e67e:	bf3c      	itt	cc
 800e680:	021b      	lslcc	r3, r3, #8
 800e682:	3008      	addcc	r0, #8
 800e684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e688:	bf3c      	itt	cc
 800e68a:	011b      	lslcc	r3, r3, #4
 800e68c:	3004      	addcc	r0, #4
 800e68e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e692:	bf3c      	itt	cc
 800e694:	009b      	lslcc	r3, r3, #2
 800e696:	3002      	addcc	r0, #2
 800e698:	2b00      	cmp	r3, #0
 800e69a:	db05      	blt.n	800e6a8 <__hi0bits+0x3c>
 800e69c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e6a0:	f100 0001 	add.w	r0, r0, #1
 800e6a4:	bf08      	it	eq
 800e6a6:	2020      	moveq	r0, #32
 800e6a8:	4770      	bx	lr

0800e6aa <__lo0bits>:
 800e6aa:	6803      	ldr	r3, [r0, #0]
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	f013 0007 	ands.w	r0, r3, #7
 800e6b2:	d00b      	beq.n	800e6cc <__lo0bits+0x22>
 800e6b4:	07d9      	lsls	r1, r3, #31
 800e6b6:	d421      	bmi.n	800e6fc <__lo0bits+0x52>
 800e6b8:	0798      	lsls	r0, r3, #30
 800e6ba:	bf49      	itett	mi
 800e6bc:	085b      	lsrmi	r3, r3, #1
 800e6be:	089b      	lsrpl	r3, r3, #2
 800e6c0:	2001      	movmi	r0, #1
 800e6c2:	6013      	strmi	r3, [r2, #0]
 800e6c4:	bf5c      	itt	pl
 800e6c6:	6013      	strpl	r3, [r2, #0]
 800e6c8:	2002      	movpl	r0, #2
 800e6ca:	4770      	bx	lr
 800e6cc:	b299      	uxth	r1, r3
 800e6ce:	b909      	cbnz	r1, 800e6d4 <__lo0bits+0x2a>
 800e6d0:	0c1b      	lsrs	r3, r3, #16
 800e6d2:	2010      	movs	r0, #16
 800e6d4:	b2d9      	uxtb	r1, r3
 800e6d6:	b909      	cbnz	r1, 800e6dc <__lo0bits+0x32>
 800e6d8:	3008      	adds	r0, #8
 800e6da:	0a1b      	lsrs	r3, r3, #8
 800e6dc:	0719      	lsls	r1, r3, #28
 800e6de:	bf04      	itt	eq
 800e6e0:	091b      	lsreq	r3, r3, #4
 800e6e2:	3004      	addeq	r0, #4
 800e6e4:	0799      	lsls	r1, r3, #30
 800e6e6:	bf04      	itt	eq
 800e6e8:	089b      	lsreq	r3, r3, #2
 800e6ea:	3002      	addeq	r0, #2
 800e6ec:	07d9      	lsls	r1, r3, #31
 800e6ee:	d403      	bmi.n	800e6f8 <__lo0bits+0x4e>
 800e6f0:	085b      	lsrs	r3, r3, #1
 800e6f2:	f100 0001 	add.w	r0, r0, #1
 800e6f6:	d003      	beq.n	800e700 <__lo0bits+0x56>
 800e6f8:	6013      	str	r3, [r2, #0]
 800e6fa:	4770      	bx	lr
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	4770      	bx	lr
 800e700:	2020      	movs	r0, #32
 800e702:	4770      	bx	lr

0800e704 <__i2b>:
 800e704:	b510      	push	{r4, lr}
 800e706:	460c      	mov	r4, r1
 800e708:	2101      	movs	r1, #1
 800e70a:	f7ff ff07 	bl	800e51c <_Balloc>
 800e70e:	4602      	mov	r2, r0
 800e710:	b928      	cbnz	r0, 800e71e <__i2b+0x1a>
 800e712:	4b05      	ldr	r3, [pc, #20]	@ (800e728 <__i2b+0x24>)
 800e714:	4805      	ldr	r0, [pc, #20]	@ (800e72c <__i2b+0x28>)
 800e716:	f240 1145 	movw	r1, #325	@ 0x145
 800e71a:	f000 fd19 	bl	800f150 <__assert_func>
 800e71e:	2301      	movs	r3, #1
 800e720:	6144      	str	r4, [r0, #20]
 800e722:	6103      	str	r3, [r0, #16]
 800e724:	bd10      	pop	{r4, pc}
 800e726:	bf00      	nop
 800e728:	0800f4cc 	.word	0x0800f4cc
 800e72c:	0800f4dd 	.word	0x0800f4dd

0800e730 <__multiply>:
 800e730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e734:	4617      	mov	r7, r2
 800e736:	690a      	ldr	r2, [r1, #16]
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	bfa8      	it	ge
 800e73e:	463b      	movge	r3, r7
 800e740:	4689      	mov	r9, r1
 800e742:	bfa4      	itt	ge
 800e744:	460f      	movge	r7, r1
 800e746:	4699      	movge	r9, r3
 800e748:	693d      	ldr	r5, [r7, #16]
 800e74a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	6879      	ldr	r1, [r7, #4]
 800e752:	eb05 060a 	add.w	r6, r5, sl
 800e756:	42b3      	cmp	r3, r6
 800e758:	b085      	sub	sp, #20
 800e75a:	bfb8      	it	lt
 800e75c:	3101      	addlt	r1, #1
 800e75e:	f7ff fedd 	bl	800e51c <_Balloc>
 800e762:	b930      	cbnz	r0, 800e772 <__multiply+0x42>
 800e764:	4602      	mov	r2, r0
 800e766:	4b41      	ldr	r3, [pc, #260]	@ (800e86c <__multiply+0x13c>)
 800e768:	4841      	ldr	r0, [pc, #260]	@ (800e870 <__multiply+0x140>)
 800e76a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e76e:	f000 fcef 	bl	800f150 <__assert_func>
 800e772:	f100 0414 	add.w	r4, r0, #20
 800e776:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e77a:	4623      	mov	r3, r4
 800e77c:	2200      	movs	r2, #0
 800e77e:	4573      	cmp	r3, lr
 800e780:	d320      	bcc.n	800e7c4 <__multiply+0x94>
 800e782:	f107 0814 	add.w	r8, r7, #20
 800e786:	f109 0114 	add.w	r1, r9, #20
 800e78a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e78e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e792:	9302      	str	r3, [sp, #8]
 800e794:	1beb      	subs	r3, r5, r7
 800e796:	3b15      	subs	r3, #21
 800e798:	f023 0303 	bic.w	r3, r3, #3
 800e79c:	3304      	adds	r3, #4
 800e79e:	3715      	adds	r7, #21
 800e7a0:	42bd      	cmp	r5, r7
 800e7a2:	bf38      	it	cc
 800e7a4:	2304      	movcc	r3, #4
 800e7a6:	9301      	str	r3, [sp, #4]
 800e7a8:	9b02      	ldr	r3, [sp, #8]
 800e7aa:	9103      	str	r1, [sp, #12]
 800e7ac:	428b      	cmp	r3, r1
 800e7ae:	d80c      	bhi.n	800e7ca <__multiply+0x9a>
 800e7b0:	2e00      	cmp	r6, #0
 800e7b2:	dd03      	ble.n	800e7bc <__multiply+0x8c>
 800e7b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d055      	beq.n	800e868 <__multiply+0x138>
 800e7bc:	6106      	str	r6, [r0, #16]
 800e7be:	b005      	add	sp, #20
 800e7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c4:	f843 2b04 	str.w	r2, [r3], #4
 800e7c8:	e7d9      	b.n	800e77e <__multiply+0x4e>
 800e7ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800e7ce:	f1ba 0f00 	cmp.w	sl, #0
 800e7d2:	d01f      	beq.n	800e814 <__multiply+0xe4>
 800e7d4:	46c4      	mov	ip, r8
 800e7d6:	46a1      	mov	r9, r4
 800e7d8:	2700      	movs	r7, #0
 800e7da:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e7de:	f8d9 3000 	ldr.w	r3, [r9]
 800e7e2:	fa1f fb82 	uxth.w	fp, r2
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e7ec:	443b      	add	r3, r7
 800e7ee:	f8d9 7000 	ldr.w	r7, [r9]
 800e7f2:	0c12      	lsrs	r2, r2, #16
 800e7f4:	0c3f      	lsrs	r7, r7, #16
 800e7f6:	fb0a 7202 	mla	r2, sl, r2, r7
 800e7fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e804:	4565      	cmp	r5, ip
 800e806:	f849 3b04 	str.w	r3, [r9], #4
 800e80a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e80e:	d8e4      	bhi.n	800e7da <__multiply+0xaa>
 800e810:	9b01      	ldr	r3, [sp, #4]
 800e812:	50e7      	str	r7, [r4, r3]
 800e814:	9b03      	ldr	r3, [sp, #12]
 800e816:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e81a:	3104      	adds	r1, #4
 800e81c:	f1b9 0f00 	cmp.w	r9, #0
 800e820:	d020      	beq.n	800e864 <__multiply+0x134>
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	4647      	mov	r7, r8
 800e826:	46a4      	mov	ip, r4
 800e828:	f04f 0a00 	mov.w	sl, #0
 800e82c:	f8b7 b000 	ldrh.w	fp, [r7]
 800e830:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e834:	fb09 220b 	mla	r2, r9, fp, r2
 800e838:	4452      	add	r2, sl
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e840:	f84c 3b04 	str.w	r3, [ip], #4
 800e844:	f857 3b04 	ldr.w	r3, [r7], #4
 800e848:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e84c:	f8bc 3000 	ldrh.w	r3, [ip]
 800e850:	fb09 330a 	mla	r3, r9, sl, r3
 800e854:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e858:	42bd      	cmp	r5, r7
 800e85a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e85e:	d8e5      	bhi.n	800e82c <__multiply+0xfc>
 800e860:	9a01      	ldr	r2, [sp, #4]
 800e862:	50a3      	str	r3, [r4, r2]
 800e864:	3404      	adds	r4, #4
 800e866:	e79f      	b.n	800e7a8 <__multiply+0x78>
 800e868:	3e01      	subs	r6, #1
 800e86a:	e7a1      	b.n	800e7b0 <__multiply+0x80>
 800e86c:	0800f4cc 	.word	0x0800f4cc
 800e870:	0800f4dd 	.word	0x0800f4dd

0800e874 <__pow5mult>:
 800e874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e878:	4615      	mov	r5, r2
 800e87a:	f012 0203 	ands.w	r2, r2, #3
 800e87e:	4607      	mov	r7, r0
 800e880:	460e      	mov	r6, r1
 800e882:	d007      	beq.n	800e894 <__pow5mult+0x20>
 800e884:	4c25      	ldr	r4, [pc, #148]	@ (800e91c <__pow5mult+0xa8>)
 800e886:	3a01      	subs	r2, #1
 800e888:	2300      	movs	r3, #0
 800e88a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e88e:	f7ff fea7 	bl	800e5e0 <__multadd>
 800e892:	4606      	mov	r6, r0
 800e894:	10ad      	asrs	r5, r5, #2
 800e896:	d03d      	beq.n	800e914 <__pow5mult+0xa0>
 800e898:	69fc      	ldr	r4, [r7, #28]
 800e89a:	b97c      	cbnz	r4, 800e8bc <__pow5mult+0x48>
 800e89c:	2010      	movs	r0, #16
 800e89e:	f7ff fd87 	bl	800e3b0 <malloc>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	61f8      	str	r0, [r7, #28]
 800e8a6:	b928      	cbnz	r0, 800e8b4 <__pow5mult+0x40>
 800e8a8:	4b1d      	ldr	r3, [pc, #116]	@ (800e920 <__pow5mult+0xac>)
 800e8aa:	481e      	ldr	r0, [pc, #120]	@ (800e924 <__pow5mult+0xb0>)
 800e8ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e8b0:	f000 fc4e 	bl	800f150 <__assert_func>
 800e8b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8b8:	6004      	str	r4, [r0, #0]
 800e8ba:	60c4      	str	r4, [r0, #12]
 800e8bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e8c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8c4:	b94c      	cbnz	r4, 800e8da <__pow5mult+0x66>
 800e8c6:	f240 2171 	movw	r1, #625	@ 0x271
 800e8ca:	4638      	mov	r0, r7
 800e8cc:	f7ff ff1a 	bl	800e704 <__i2b>
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	6003      	str	r3, [r0, #0]
 800e8da:	f04f 0900 	mov.w	r9, #0
 800e8de:	07eb      	lsls	r3, r5, #31
 800e8e0:	d50a      	bpl.n	800e8f8 <__pow5mult+0x84>
 800e8e2:	4631      	mov	r1, r6
 800e8e4:	4622      	mov	r2, r4
 800e8e6:	4638      	mov	r0, r7
 800e8e8:	f7ff ff22 	bl	800e730 <__multiply>
 800e8ec:	4631      	mov	r1, r6
 800e8ee:	4680      	mov	r8, r0
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	f7ff fe53 	bl	800e59c <_Bfree>
 800e8f6:	4646      	mov	r6, r8
 800e8f8:	106d      	asrs	r5, r5, #1
 800e8fa:	d00b      	beq.n	800e914 <__pow5mult+0xa0>
 800e8fc:	6820      	ldr	r0, [r4, #0]
 800e8fe:	b938      	cbnz	r0, 800e910 <__pow5mult+0x9c>
 800e900:	4622      	mov	r2, r4
 800e902:	4621      	mov	r1, r4
 800e904:	4638      	mov	r0, r7
 800e906:	f7ff ff13 	bl	800e730 <__multiply>
 800e90a:	6020      	str	r0, [r4, #0]
 800e90c:	f8c0 9000 	str.w	r9, [r0]
 800e910:	4604      	mov	r4, r0
 800e912:	e7e4      	b.n	800e8de <__pow5mult+0x6a>
 800e914:	4630      	mov	r0, r6
 800e916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e91a:	bf00      	nop
 800e91c:	0800f590 	.word	0x0800f590
 800e920:	0800f45d 	.word	0x0800f45d
 800e924:	0800f4dd 	.word	0x0800f4dd

0800e928 <__lshift>:
 800e928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e92c:	460c      	mov	r4, r1
 800e92e:	6849      	ldr	r1, [r1, #4]
 800e930:	6923      	ldr	r3, [r4, #16]
 800e932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e936:	68a3      	ldr	r3, [r4, #8]
 800e938:	4607      	mov	r7, r0
 800e93a:	4691      	mov	r9, r2
 800e93c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e940:	f108 0601 	add.w	r6, r8, #1
 800e944:	42b3      	cmp	r3, r6
 800e946:	db0b      	blt.n	800e960 <__lshift+0x38>
 800e948:	4638      	mov	r0, r7
 800e94a:	f7ff fde7 	bl	800e51c <_Balloc>
 800e94e:	4605      	mov	r5, r0
 800e950:	b948      	cbnz	r0, 800e966 <__lshift+0x3e>
 800e952:	4602      	mov	r2, r0
 800e954:	4b28      	ldr	r3, [pc, #160]	@ (800e9f8 <__lshift+0xd0>)
 800e956:	4829      	ldr	r0, [pc, #164]	@ (800e9fc <__lshift+0xd4>)
 800e958:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e95c:	f000 fbf8 	bl	800f150 <__assert_func>
 800e960:	3101      	adds	r1, #1
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	e7ee      	b.n	800e944 <__lshift+0x1c>
 800e966:	2300      	movs	r3, #0
 800e968:	f100 0114 	add.w	r1, r0, #20
 800e96c:	f100 0210 	add.w	r2, r0, #16
 800e970:	4618      	mov	r0, r3
 800e972:	4553      	cmp	r3, sl
 800e974:	db33      	blt.n	800e9de <__lshift+0xb6>
 800e976:	6920      	ldr	r0, [r4, #16]
 800e978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e97c:	f104 0314 	add.w	r3, r4, #20
 800e980:	f019 091f 	ands.w	r9, r9, #31
 800e984:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e988:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e98c:	d02b      	beq.n	800e9e6 <__lshift+0xbe>
 800e98e:	f1c9 0e20 	rsb	lr, r9, #32
 800e992:	468a      	mov	sl, r1
 800e994:	2200      	movs	r2, #0
 800e996:	6818      	ldr	r0, [r3, #0]
 800e998:	fa00 f009 	lsl.w	r0, r0, r9
 800e99c:	4310      	orrs	r0, r2
 800e99e:	f84a 0b04 	str.w	r0, [sl], #4
 800e9a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9a6:	459c      	cmp	ip, r3
 800e9a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e9ac:	d8f3      	bhi.n	800e996 <__lshift+0x6e>
 800e9ae:	ebac 0304 	sub.w	r3, ip, r4
 800e9b2:	3b15      	subs	r3, #21
 800e9b4:	f023 0303 	bic.w	r3, r3, #3
 800e9b8:	3304      	adds	r3, #4
 800e9ba:	f104 0015 	add.w	r0, r4, #21
 800e9be:	4560      	cmp	r0, ip
 800e9c0:	bf88      	it	hi
 800e9c2:	2304      	movhi	r3, #4
 800e9c4:	50ca      	str	r2, [r1, r3]
 800e9c6:	b10a      	cbz	r2, 800e9cc <__lshift+0xa4>
 800e9c8:	f108 0602 	add.w	r6, r8, #2
 800e9cc:	3e01      	subs	r6, #1
 800e9ce:	4638      	mov	r0, r7
 800e9d0:	612e      	str	r6, [r5, #16]
 800e9d2:	4621      	mov	r1, r4
 800e9d4:	f7ff fde2 	bl	800e59c <_Bfree>
 800e9d8:	4628      	mov	r0, r5
 800e9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9de:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	e7c5      	b.n	800e972 <__lshift+0x4a>
 800e9e6:	3904      	subs	r1, #4
 800e9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9f0:	459c      	cmp	ip, r3
 800e9f2:	d8f9      	bhi.n	800e9e8 <__lshift+0xc0>
 800e9f4:	e7ea      	b.n	800e9cc <__lshift+0xa4>
 800e9f6:	bf00      	nop
 800e9f8:	0800f4cc 	.word	0x0800f4cc
 800e9fc:	0800f4dd 	.word	0x0800f4dd

0800ea00 <__mcmp>:
 800ea00:	690a      	ldr	r2, [r1, #16]
 800ea02:	4603      	mov	r3, r0
 800ea04:	6900      	ldr	r0, [r0, #16]
 800ea06:	1a80      	subs	r0, r0, r2
 800ea08:	b530      	push	{r4, r5, lr}
 800ea0a:	d10e      	bne.n	800ea2a <__mcmp+0x2a>
 800ea0c:	3314      	adds	r3, #20
 800ea0e:	3114      	adds	r1, #20
 800ea10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ea14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ea18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea20:	4295      	cmp	r5, r2
 800ea22:	d003      	beq.n	800ea2c <__mcmp+0x2c>
 800ea24:	d205      	bcs.n	800ea32 <__mcmp+0x32>
 800ea26:	f04f 30ff 	mov.w	r0, #4294967295
 800ea2a:	bd30      	pop	{r4, r5, pc}
 800ea2c:	42a3      	cmp	r3, r4
 800ea2e:	d3f3      	bcc.n	800ea18 <__mcmp+0x18>
 800ea30:	e7fb      	b.n	800ea2a <__mcmp+0x2a>
 800ea32:	2001      	movs	r0, #1
 800ea34:	e7f9      	b.n	800ea2a <__mcmp+0x2a>
	...

0800ea38 <__mdiff>:
 800ea38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	4689      	mov	r9, r1
 800ea3e:	4606      	mov	r6, r0
 800ea40:	4611      	mov	r1, r2
 800ea42:	4648      	mov	r0, r9
 800ea44:	4614      	mov	r4, r2
 800ea46:	f7ff ffdb 	bl	800ea00 <__mcmp>
 800ea4a:	1e05      	subs	r5, r0, #0
 800ea4c:	d112      	bne.n	800ea74 <__mdiff+0x3c>
 800ea4e:	4629      	mov	r1, r5
 800ea50:	4630      	mov	r0, r6
 800ea52:	f7ff fd63 	bl	800e51c <_Balloc>
 800ea56:	4602      	mov	r2, r0
 800ea58:	b928      	cbnz	r0, 800ea66 <__mdiff+0x2e>
 800ea5a:	4b3f      	ldr	r3, [pc, #252]	@ (800eb58 <__mdiff+0x120>)
 800ea5c:	f240 2137 	movw	r1, #567	@ 0x237
 800ea60:	483e      	ldr	r0, [pc, #248]	@ (800eb5c <__mdiff+0x124>)
 800ea62:	f000 fb75 	bl	800f150 <__assert_func>
 800ea66:	2301      	movs	r3, #1
 800ea68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	b003      	add	sp, #12
 800ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea74:	bfbc      	itt	lt
 800ea76:	464b      	movlt	r3, r9
 800ea78:	46a1      	movlt	r9, r4
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea80:	bfba      	itte	lt
 800ea82:	461c      	movlt	r4, r3
 800ea84:	2501      	movlt	r5, #1
 800ea86:	2500      	movge	r5, #0
 800ea88:	f7ff fd48 	bl	800e51c <_Balloc>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	b918      	cbnz	r0, 800ea98 <__mdiff+0x60>
 800ea90:	4b31      	ldr	r3, [pc, #196]	@ (800eb58 <__mdiff+0x120>)
 800ea92:	f240 2145 	movw	r1, #581	@ 0x245
 800ea96:	e7e3      	b.n	800ea60 <__mdiff+0x28>
 800ea98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea9c:	6926      	ldr	r6, [r4, #16]
 800ea9e:	60c5      	str	r5, [r0, #12]
 800eaa0:	f109 0310 	add.w	r3, r9, #16
 800eaa4:	f109 0514 	add.w	r5, r9, #20
 800eaa8:	f104 0e14 	add.w	lr, r4, #20
 800eaac:	f100 0b14 	add.w	fp, r0, #20
 800eab0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eab4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eab8:	9301      	str	r3, [sp, #4]
 800eaba:	46d9      	mov	r9, fp
 800eabc:	f04f 0c00 	mov.w	ip, #0
 800eac0:	9b01      	ldr	r3, [sp, #4]
 800eac2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eac6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eaca:	9301      	str	r3, [sp, #4]
 800eacc:	fa1f f38a 	uxth.w	r3, sl
 800ead0:	4619      	mov	r1, r3
 800ead2:	b283      	uxth	r3, r0
 800ead4:	1acb      	subs	r3, r1, r3
 800ead6:	0c00      	lsrs	r0, r0, #16
 800ead8:	4463      	add	r3, ip
 800eada:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eade:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eae8:	4576      	cmp	r6, lr
 800eaea:	f849 3b04 	str.w	r3, [r9], #4
 800eaee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eaf2:	d8e5      	bhi.n	800eac0 <__mdiff+0x88>
 800eaf4:	1b33      	subs	r3, r6, r4
 800eaf6:	3b15      	subs	r3, #21
 800eaf8:	f023 0303 	bic.w	r3, r3, #3
 800eafc:	3415      	adds	r4, #21
 800eafe:	3304      	adds	r3, #4
 800eb00:	42a6      	cmp	r6, r4
 800eb02:	bf38      	it	cc
 800eb04:	2304      	movcc	r3, #4
 800eb06:	441d      	add	r5, r3
 800eb08:	445b      	add	r3, fp
 800eb0a:	461e      	mov	r6, r3
 800eb0c:	462c      	mov	r4, r5
 800eb0e:	4544      	cmp	r4, r8
 800eb10:	d30e      	bcc.n	800eb30 <__mdiff+0xf8>
 800eb12:	f108 0103 	add.w	r1, r8, #3
 800eb16:	1b49      	subs	r1, r1, r5
 800eb18:	f021 0103 	bic.w	r1, r1, #3
 800eb1c:	3d03      	subs	r5, #3
 800eb1e:	45a8      	cmp	r8, r5
 800eb20:	bf38      	it	cc
 800eb22:	2100      	movcc	r1, #0
 800eb24:	440b      	add	r3, r1
 800eb26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb2a:	b191      	cbz	r1, 800eb52 <__mdiff+0x11a>
 800eb2c:	6117      	str	r7, [r2, #16]
 800eb2e:	e79d      	b.n	800ea6c <__mdiff+0x34>
 800eb30:	f854 1b04 	ldr.w	r1, [r4], #4
 800eb34:	46e6      	mov	lr, ip
 800eb36:	0c08      	lsrs	r0, r1, #16
 800eb38:	fa1c fc81 	uxtah	ip, ip, r1
 800eb3c:	4471      	add	r1, lr
 800eb3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eb42:	b289      	uxth	r1, r1
 800eb44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eb48:	f846 1b04 	str.w	r1, [r6], #4
 800eb4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb50:	e7dd      	b.n	800eb0e <__mdiff+0xd6>
 800eb52:	3f01      	subs	r7, #1
 800eb54:	e7e7      	b.n	800eb26 <__mdiff+0xee>
 800eb56:	bf00      	nop
 800eb58:	0800f4cc 	.word	0x0800f4cc
 800eb5c:	0800f4dd 	.word	0x0800f4dd

0800eb60 <__d2b>:
 800eb60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb64:	460f      	mov	r7, r1
 800eb66:	2101      	movs	r1, #1
 800eb68:	ec59 8b10 	vmov	r8, r9, d0
 800eb6c:	4616      	mov	r6, r2
 800eb6e:	f7ff fcd5 	bl	800e51c <_Balloc>
 800eb72:	4604      	mov	r4, r0
 800eb74:	b930      	cbnz	r0, 800eb84 <__d2b+0x24>
 800eb76:	4602      	mov	r2, r0
 800eb78:	4b23      	ldr	r3, [pc, #140]	@ (800ec08 <__d2b+0xa8>)
 800eb7a:	4824      	ldr	r0, [pc, #144]	@ (800ec0c <__d2b+0xac>)
 800eb7c:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb80:	f000 fae6 	bl	800f150 <__assert_func>
 800eb84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb8c:	b10d      	cbz	r5, 800eb92 <__d2b+0x32>
 800eb8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb92:	9301      	str	r3, [sp, #4]
 800eb94:	f1b8 0300 	subs.w	r3, r8, #0
 800eb98:	d023      	beq.n	800ebe2 <__d2b+0x82>
 800eb9a:	4668      	mov	r0, sp
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	f7ff fd84 	bl	800e6aa <__lo0bits>
 800eba2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eba6:	b1d0      	cbz	r0, 800ebde <__d2b+0x7e>
 800eba8:	f1c0 0320 	rsb	r3, r0, #32
 800ebac:	fa02 f303 	lsl.w	r3, r2, r3
 800ebb0:	430b      	orrs	r3, r1
 800ebb2:	40c2      	lsrs	r2, r0
 800ebb4:	6163      	str	r3, [r4, #20]
 800ebb6:	9201      	str	r2, [sp, #4]
 800ebb8:	9b01      	ldr	r3, [sp, #4]
 800ebba:	61a3      	str	r3, [r4, #24]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	bf0c      	ite	eq
 800ebc0:	2201      	moveq	r2, #1
 800ebc2:	2202      	movne	r2, #2
 800ebc4:	6122      	str	r2, [r4, #16]
 800ebc6:	b1a5      	cbz	r5, 800ebf2 <__d2b+0x92>
 800ebc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ebcc:	4405      	add	r5, r0
 800ebce:	603d      	str	r5, [r7, #0]
 800ebd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ebd4:	6030      	str	r0, [r6, #0]
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	b003      	add	sp, #12
 800ebda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebde:	6161      	str	r1, [r4, #20]
 800ebe0:	e7ea      	b.n	800ebb8 <__d2b+0x58>
 800ebe2:	a801      	add	r0, sp, #4
 800ebe4:	f7ff fd61 	bl	800e6aa <__lo0bits>
 800ebe8:	9b01      	ldr	r3, [sp, #4]
 800ebea:	6163      	str	r3, [r4, #20]
 800ebec:	3020      	adds	r0, #32
 800ebee:	2201      	movs	r2, #1
 800ebf0:	e7e8      	b.n	800ebc4 <__d2b+0x64>
 800ebf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ebfa:	6038      	str	r0, [r7, #0]
 800ebfc:	6918      	ldr	r0, [r3, #16]
 800ebfe:	f7ff fd35 	bl	800e66c <__hi0bits>
 800ec02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec06:	e7e5      	b.n	800ebd4 <__d2b+0x74>
 800ec08:	0800f4cc 	.word	0x0800f4cc
 800ec0c:	0800f4dd 	.word	0x0800f4dd

0800ec10 <__sfputc_r>:
 800ec10:	6893      	ldr	r3, [r2, #8]
 800ec12:	3b01      	subs	r3, #1
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	b410      	push	{r4}
 800ec18:	6093      	str	r3, [r2, #8]
 800ec1a:	da08      	bge.n	800ec2e <__sfputc_r+0x1e>
 800ec1c:	6994      	ldr	r4, [r2, #24]
 800ec1e:	42a3      	cmp	r3, r4
 800ec20:	db01      	blt.n	800ec26 <__sfputc_r+0x16>
 800ec22:	290a      	cmp	r1, #10
 800ec24:	d103      	bne.n	800ec2e <__sfputc_r+0x1e>
 800ec26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec2a:	f000 b9df 	b.w	800efec <__swbuf_r>
 800ec2e:	6813      	ldr	r3, [r2, #0]
 800ec30:	1c58      	adds	r0, r3, #1
 800ec32:	6010      	str	r0, [r2, #0]
 800ec34:	7019      	strb	r1, [r3, #0]
 800ec36:	4608      	mov	r0, r1
 800ec38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <__sfputs_r>:
 800ec3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec40:	4606      	mov	r6, r0
 800ec42:	460f      	mov	r7, r1
 800ec44:	4614      	mov	r4, r2
 800ec46:	18d5      	adds	r5, r2, r3
 800ec48:	42ac      	cmp	r4, r5
 800ec4a:	d101      	bne.n	800ec50 <__sfputs_r+0x12>
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	e007      	b.n	800ec60 <__sfputs_r+0x22>
 800ec50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec54:	463a      	mov	r2, r7
 800ec56:	4630      	mov	r0, r6
 800ec58:	f7ff ffda 	bl	800ec10 <__sfputc_r>
 800ec5c:	1c43      	adds	r3, r0, #1
 800ec5e:	d1f3      	bne.n	800ec48 <__sfputs_r+0xa>
 800ec60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec64 <_vfiprintf_r>:
 800ec64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec68:	460d      	mov	r5, r1
 800ec6a:	b09d      	sub	sp, #116	@ 0x74
 800ec6c:	4614      	mov	r4, r2
 800ec6e:	4698      	mov	r8, r3
 800ec70:	4606      	mov	r6, r0
 800ec72:	b118      	cbz	r0, 800ec7c <_vfiprintf_r+0x18>
 800ec74:	6a03      	ldr	r3, [r0, #32]
 800ec76:	b90b      	cbnz	r3, 800ec7c <_vfiprintf_r+0x18>
 800ec78:	f7fe fc70 	bl	800d55c <__sinit>
 800ec7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec7e:	07d9      	lsls	r1, r3, #31
 800ec80:	d405      	bmi.n	800ec8e <_vfiprintf_r+0x2a>
 800ec82:	89ab      	ldrh	r3, [r5, #12]
 800ec84:	059a      	lsls	r2, r3, #22
 800ec86:	d402      	bmi.n	800ec8e <_vfiprintf_r+0x2a>
 800ec88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec8a:	f7fe fd5e 	bl	800d74a <__retarget_lock_acquire_recursive>
 800ec8e:	89ab      	ldrh	r3, [r5, #12]
 800ec90:	071b      	lsls	r3, r3, #28
 800ec92:	d501      	bpl.n	800ec98 <_vfiprintf_r+0x34>
 800ec94:	692b      	ldr	r3, [r5, #16]
 800ec96:	b99b      	cbnz	r3, 800ecc0 <_vfiprintf_r+0x5c>
 800ec98:	4629      	mov	r1, r5
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f000 f9e4 	bl	800f068 <__swsetup_r>
 800eca0:	b170      	cbz	r0, 800ecc0 <_vfiprintf_r+0x5c>
 800eca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eca4:	07dc      	lsls	r4, r3, #31
 800eca6:	d504      	bpl.n	800ecb2 <_vfiprintf_r+0x4e>
 800eca8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecac:	b01d      	add	sp, #116	@ 0x74
 800ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb2:	89ab      	ldrh	r3, [r5, #12]
 800ecb4:	0598      	lsls	r0, r3, #22
 800ecb6:	d4f7      	bmi.n	800eca8 <_vfiprintf_r+0x44>
 800ecb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ecba:	f7fe fd47 	bl	800d74c <__retarget_lock_release_recursive>
 800ecbe:	e7f3      	b.n	800eca8 <_vfiprintf_r+0x44>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecc4:	2320      	movs	r3, #32
 800ecc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ecca:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecce:	2330      	movs	r3, #48	@ 0x30
 800ecd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee80 <_vfiprintf_r+0x21c>
 800ecd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ecd8:	f04f 0901 	mov.w	r9, #1
 800ecdc:	4623      	mov	r3, r4
 800ecde:	469a      	mov	sl, r3
 800ece0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ece4:	b10a      	cbz	r2, 800ecea <_vfiprintf_r+0x86>
 800ece6:	2a25      	cmp	r2, #37	@ 0x25
 800ece8:	d1f9      	bne.n	800ecde <_vfiprintf_r+0x7a>
 800ecea:	ebba 0b04 	subs.w	fp, sl, r4
 800ecee:	d00b      	beq.n	800ed08 <_vfiprintf_r+0xa4>
 800ecf0:	465b      	mov	r3, fp
 800ecf2:	4622      	mov	r2, r4
 800ecf4:	4629      	mov	r1, r5
 800ecf6:	4630      	mov	r0, r6
 800ecf8:	f7ff ffa1 	bl	800ec3e <__sfputs_r>
 800ecfc:	3001      	adds	r0, #1
 800ecfe:	f000 80a7 	beq.w	800ee50 <_vfiprintf_r+0x1ec>
 800ed02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed04:	445a      	add	r2, fp
 800ed06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed08:	f89a 3000 	ldrb.w	r3, [sl]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f000 809f 	beq.w	800ee50 <_vfiprintf_r+0x1ec>
 800ed12:	2300      	movs	r3, #0
 800ed14:	f04f 32ff 	mov.w	r2, #4294967295
 800ed18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed1c:	f10a 0a01 	add.w	sl, sl, #1
 800ed20:	9304      	str	r3, [sp, #16]
 800ed22:	9307      	str	r3, [sp, #28]
 800ed24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed28:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed2a:	4654      	mov	r4, sl
 800ed2c:	2205      	movs	r2, #5
 800ed2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed32:	4853      	ldr	r0, [pc, #332]	@ (800ee80 <_vfiprintf_r+0x21c>)
 800ed34:	f7f1 fad4 	bl	80002e0 <memchr>
 800ed38:	9a04      	ldr	r2, [sp, #16]
 800ed3a:	b9d8      	cbnz	r0, 800ed74 <_vfiprintf_r+0x110>
 800ed3c:	06d1      	lsls	r1, r2, #27
 800ed3e:	bf44      	itt	mi
 800ed40:	2320      	movmi	r3, #32
 800ed42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed46:	0713      	lsls	r3, r2, #28
 800ed48:	bf44      	itt	mi
 800ed4a:	232b      	movmi	r3, #43	@ 0x2b
 800ed4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed50:	f89a 3000 	ldrb.w	r3, [sl]
 800ed54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed56:	d015      	beq.n	800ed84 <_vfiprintf_r+0x120>
 800ed58:	9a07      	ldr	r2, [sp, #28]
 800ed5a:	4654      	mov	r4, sl
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	f04f 0c0a 	mov.w	ip, #10
 800ed62:	4621      	mov	r1, r4
 800ed64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed68:	3b30      	subs	r3, #48	@ 0x30
 800ed6a:	2b09      	cmp	r3, #9
 800ed6c:	d94b      	bls.n	800ee06 <_vfiprintf_r+0x1a2>
 800ed6e:	b1b0      	cbz	r0, 800ed9e <_vfiprintf_r+0x13a>
 800ed70:	9207      	str	r2, [sp, #28]
 800ed72:	e014      	b.n	800ed9e <_vfiprintf_r+0x13a>
 800ed74:	eba0 0308 	sub.w	r3, r0, r8
 800ed78:	fa09 f303 	lsl.w	r3, r9, r3
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	9304      	str	r3, [sp, #16]
 800ed80:	46a2      	mov	sl, r4
 800ed82:	e7d2      	b.n	800ed2a <_vfiprintf_r+0xc6>
 800ed84:	9b03      	ldr	r3, [sp, #12]
 800ed86:	1d19      	adds	r1, r3, #4
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	9103      	str	r1, [sp, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	bfbb      	ittet	lt
 800ed90:	425b      	neglt	r3, r3
 800ed92:	f042 0202 	orrlt.w	r2, r2, #2
 800ed96:	9307      	strge	r3, [sp, #28]
 800ed98:	9307      	strlt	r3, [sp, #28]
 800ed9a:	bfb8      	it	lt
 800ed9c:	9204      	strlt	r2, [sp, #16]
 800ed9e:	7823      	ldrb	r3, [r4, #0]
 800eda0:	2b2e      	cmp	r3, #46	@ 0x2e
 800eda2:	d10a      	bne.n	800edba <_vfiprintf_r+0x156>
 800eda4:	7863      	ldrb	r3, [r4, #1]
 800eda6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eda8:	d132      	bne.n	800ee10 <_vfiprintf_r+0x1ac>
 800edaa:	9b03      	ldr	r3, [sp, #12]
 800edac:	1d1a      	adds	r2, r3, #4
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	9203      	str	r2, [sp, #12]
 800edb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800edb6:	3402      	adds	r4, #2
 800edb8:	9305      	str	r3, [sp, #20]
 800edba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee90 <_vfiprintf_r+0x22c>
 800edbe:	7821      	ldrb	r1, [r4, #0]
 800edc0:	2203      	movs	r2, #3
 800edc2:	4650      	mov	r0, sl
 800edc4:	f7f1 fa8c 	bl	80002e0 <memchr>
 800edc8:	b138      	cbz	r0, 800edda <_vfiprintf_r+0x176>
 800edca:	9b04      	ldr	r3, [sp, #16]
 800edcc:	eba0 000a 	sub.w	r0, r0, sl
 800edd0:	2240      	movs	r2, #64	@ 0x40
 800edd2:	4082      	lsls	r2, r0
 800edd4:	4313      	orrs	r3, r2
 800edd6:	3401      	adds	r4, #1
 800edd8:	9304      	str	r3, [sp, #16]
 800edda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edde:	4829      	ldr	r0, [pc, #164]	@ (800ee84 <_vfiprintf_r+0x220>)
 800ede0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ede4:	2206      	movs	r2, #6
 800ede6:	f7f1 fa7b 	bl	80002e0 <memchr>
 800edea:	2800      	cmp	r0, #0
 800edec:	d03f      	beq.n	800ee6e <_vfiprintf_r+0x20a>
 800edee:	4b26      	ldr	r3, [pc, #152]	@ (800ee88 <_vfiprintf_r+0x224>)
 800edf0:	bb1b      	cbnz	r3, 800ee3a <_vfiprintf_r+0x1d6>
 800edf2:	9b03      	ldr	r3, [sp, #12]
 800edf4:	3307      	adds	r3, #7
 800edf6:	f023 0307 	bic.w	r3, r3, #7
 800edfa:	3308      	adds	r3, #8
 800edfc:	9303      	str	r3, [sp, #12]
 800edfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee00:	443b      	add	r3, r7
 800ee02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee04:	e76a      	b.n	800ecdc <_vfiprintf_r+0x78>
 800ee06:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee0a:	460c      	mov	r4, r1
 800ee0c:	2001      	movs	r0, #1
 800ee0e:	e7a8      	b.n	800ed62 <_vfiprintf_r+0xfe>
 800ee10:	2300      	movs	r3, #0
 800ee12:	3401      	adds	r4, #1
 800ee14:	9305      	str	r3, [sp, #20]
 800ee16:	4619      	mov	r1, r3
 800ee18:	f04f 0c0a 	mov.w	ip, #10
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee22:	3a30      	subs	r2, #48	@ 0x30
 800ee24:	2a09      	cmp	r2, #9
 800ee26:	d903      	bls.n	800ee30 <_vfiprintf_r+0x1cc>
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d0c6      	beq.n	800edba <_vfiprintf_r+0x156>
 800ee2c:	9105      	str	r1, [sp, #20]
 800ee2e:	e7c4      	b.n	800edba <_vfiprintf_r+0x156>
 800ee30:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee34:	4604      	mov	r4, r0
 800ee36:	2301      	movs	r3, #1
 800ee38:	e7f0      	b.n	800ee1c <_vfiprintf_r+0x1b8>
 800ee3a:	ab03      	add	r3, sp, #12
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	462a      	mov	r2, r5
 800ee40:	4b12      	ldr	r3, [pc, #72]	@ (800ee8c <_vfiprintf_r+0x228>)
 800ee42:	a904      	add	r1, sp, #16
 800ee44:	4630      	mov	r0, r6
 800ee46:	f7fd ff57 	bl	800ccf8 <_printf_float>
 800ee4a:	4607      	mov	r7, r0
 800ee4c:	1c78      	adds	r0, r7, #1
 800ee4e:	d1d6      	bne.n	800edfe <_vfiprintf_r+0x19a>
 800ee50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee52:	07d9      	lsls	r1, r3, #31
 800ee54:	d405      	bmi.n	800ee62 <_vfiprintf_r+0x1fe>
 800ee56:	89ab      	ldrh	r3, [r5, #12]
 800ee58:	059a      	lsls	r2, r3, #22
 800ee5a:	d402      	bmi.n	800ee62 <_vfiprintf_r+0x1fe>
 800ee5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee5e:	f7fe fc75 	bl	800d74c <__retarget_lock_release_recursive>
 800ee62:	89ab      	ldrh	r3, [r5, #12]
 800ee64:	065b      	lsls	r3, r3, #25
 800ee66:	f53f af1f 	bmi.w	800eca8 <_vfiprintf_r+0x44>
 800ee6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee6c:	e71e      	b.n	800ecac <_vfiprintf_r+0x48>
 800ee6e:	ab03      	add	r3, sp, #12
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	462a      	mov	r2, r5
 800ee74:	4b05      	ldr	r3, [pc, #20]	@ (800ee8c <_vfiprintf_r+0x228>)
 800ee76:	a904      	add	r1, sp, #16
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f7fe f9c5 	bl	800d208 <_printf_i>
 800ee7e:	e7e4      	b.n	800ee4a <_vfiprintf_r+0x1e6>
 800ee80:	0800f536 	.word	0x0800f536
 800ee84:	0800f540 	.word	0x0800f540
 800ee88:	0800ccf9 	.word	0x0800ccf9
 800ee8c:	0800ec3f 	.word	0x0800ec3f
 800ee90:	0800f53c 	.word	0x0800f53c

0800ee94 <__sflush_r>:
 800ee94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9c:	0716      	lsls	r6, r2, #28
 800ee9e:	4605      	mov	r5, r0
 800eea0:	460c      	mov	r4, r1
 800eea2:	d454      	bmi.n	800ef4e <__sflush_r+0xba>
 800eea4:	684b      	ldr	r3, [r1, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	dc02      	bgt.n	800eeb0 <__sflush_r+0x1c>
 800eeaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	dd48      	ble.n	800ef42 <__sflush_r+0xae>
 800eeb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eeb2:	2e00      	cmp	r6, #0
 800eeb4:	d045      	beq.n	800ef42 <__sflush_r+0xae>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eebc:	682f      	ldr	r7, [r5, #0]
 800eebe:	6a21      	ldr	r1, [r4, #32]
 800eec0:	602b      	str	r3, [r5, #0]
 800eec2:	d030      	beq.n	800ef26 <__sflush_r+0x92>
 800eec4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eec6:	89a3      	ldrh	r3, [r4, #12]
 800eec8:	0759      	lsls	r1, r3, #29
 800eeca:	d505      	bpl.n	800eed8 <__sflush_r+0x44>
 800eecc:	6863      	ldr	r3, [r4, #4]
 800eece:	1ad2      	subs	r2, r2, r3
 800eed0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eed2:	b10b      	cbz	r3, 800eed8 <__sflush_r+0x44>
 800eed4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eed6:	1ad2      	subs	r2, r2, r3
 800eed8:	2300      	movs	r3, #0
 800eeda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eedc:	6a21      	ldr	r1, [r4, #32]
 800eede:	4628      	mov	r0, r5
 800eee0:	47b0      	blx	r6
 800eee2:	1c43      	adds	r3, r0, #1
 800eee4:	89a3      	ldrh	r3, [r4, #12]
 800eee6:	d106      	bne.n	800eef6 <__sflush_r+0x62>
 800eee8:	6829      	ldr	r1, [r5, #0]
 800eeea:	291d      	cmp	r1, #29
 800eeec:	d82b      	bhi.n	800ef46 <__sflush_r+0xb2>
 800eeee:	4a2a      	ldr	r2, [pc, #168]	@ (800ef98 <__sflush_r+0x104>)
 800eef0:	40ca      	lsrs	r2, r1
 800eef2:	07d6      	lsls	r6, r2, #31
 800eef4:	d527      	bpl.n	800ef46 <__sflush_r+0xb2>
 800eef6:	2200      	movs	r2, #0
 800eef8:	6062      	str	r2, [r4, #4]
 800eefa:	04d9      	lsls	r1, r3, #19
 800eefc:	6922      	ldr	r2, [r4, #16]
 800eefe:	6022      	str	r2, [r4, #0]
 800ef00:	d504      	bpl.n	800ef0c <__sflush_r+0x78>
 800ef02:	1c42      	adds	r2, r0, #1
 800ef04:	d101      	bne.n	800ef0a <__sflush_r+0x76>
 800ef06:	682b      	ldr	r3, [r5, #0]
 800ef08:	b903      	cbnz	r3, 800ef0c <__sflush_r+0x78>
 800ef0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef0e:	602f      	str	r7, [r5, #0]
 800ef10:	b1b9      	cbz	r1, 800ef42 <__sflush_r+0xae>
 800ef12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef16:	4299      	cmp	r1, r3
 800ef18:	d002      	beq.n	800ef20 <__sflush_r+0x8c>
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	f7ff f9fe 	bl	800e31c <_free_r>
 800ef20:	2300      	movs	r3, #0
 800ef22:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef24:	e00d      	b.n	800ef42 <__sflush_r+0xae>
 800ef26:	2301      	movs	r3, #1
 800ef28:	4628      	mov	r0, r5
 800ef2a:	47b0      	blx	r6
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	1c50      	adds	r0, r2, #1
 800ef30:	d1c9      	bne.n	800eec6 <__sflush_r+0x32>
 800ef32:	682b      	ldr	r3, [r5, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d0c6      	beq.n	800eec6 <__sflush_r+0x32>
 800ef38:	2b1d      	cmp	r3, #29
 800ef3a:	d001      	beq.n	800ef40 <__sflush_r+0xac>
 800ef3c:	2b16      	cmp	r3, #22
 800ef3e:	d11e      	bne.n	800ef7e <__sflush_r+0xea>
 800ef40:	602f      	str	r7, [r5, #0]
 800ef42:	2000      	movs	r0, #0
 800ef44:	e022      	b.n	800ef8c <__sflush_r+0xf8>
 800ef46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef4a:	b21b      	sxth	r3, r3
 800ef4c:	e01b      	b.n	800ef86 <__sflush_r+0xf2>
 800ef4e:	690f      	ldr	r7, [r1, #16]
 800ef50:	2f00      	cmp	r7, #0
 800ef52:	d0f6      	beq.n	800ef42 <__sflush_r+0xae>
 800ef54:	0793      	lsls	r3, r2, #30
 800ef56:	680e      	ldr	r6, [r1, #0]
 800ef58:	bf08      	it	eq
 800ef5a:	694b      	ldreq	r3, [r1, #20]
 800ef5c:	600f      	str	r7, [r1, #0]
 800ef5e:	bf18      	it	ne
 800ef60:	2300      	movne	r3, #0
 800ef62:	eba6 0807 	sub.w	r8, r6, r7
 800ef66:	608b      	str	r3, [r1, #8]
 800ef68:	f1b8 0f00 	cmp.w	r8, #0
 800ef6c:	dde9      	ble.n	800ef42 <__sflush_r+0xae>
 800ef6e:	6a21      	ldr	r1, [r4, #32]
 800ef70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ef72:	4643      	mov	r3, r8
 800ef74:	463a      	mov	r2, r7
 800ef76:	4628      	mov	r0, r5
 800ef78:	47b0      	blx	r6
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	dc08      	bgt.n	800ef90 <__sflush_r+0xfc>
 800ef7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef86:	81a3      	strh	r3, [r4, #12]
 800ef88:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef90:	4407      	add	r7, r0
 800ef92:	eba8 0800 	sub.w	r8, r8, r0
 800ef96:	e7e7      	b.n	800ef68 <__sflush_r+0xd4>
 800ef98:	20400001 	.word	0x20400001

0800ef9c <_fflush_r>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	690b      	ldr	r3, [r1, #16]
 800efa0:	4605      	mov	r5, r0
 800efa2:	460c      	mov	r4, r1
 800efa4:	b913      	cbnz	r3, 800efac <_fflush_r+0x10>
 800efa6:	2500      	movs	r5, #0
 800efa8:	4628      	mov	r0, r5
 800efaa:	bd38      	pop	{r3, r4, r5, pc}
 800efac:	b118      	cbz	r0, 800efb6 <_fflush_r+0x1a>
 800efae:	6a03      	ldr	r3, [r0, #32]
 800efb0:	b90b      	cbnz	r3, 800efb6 <_fflush_r+0x1a>
 800efb2:	f7fe fad3 	bl	800d55c <__sinit>
 800efb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d0f3      	beq.n	800efa6 <_fflush_r+0xa>
 800efbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800efc0:	07d0      	lsls	r0, r2, #31
 800efc2:	d404      	bmi.n	800efce <_fflush_r+0x32>
 800efc4:	0599      	lsls	r1, r3, #22
 800efc6:	d402      	bmi.n	800efce <_fflush_r+0x32>
 800efc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efca:	f7fe fbbe 	bl	800d74a <__retarget_lock_acquire_recursive>
 800efce:	4628      	mov	r0, r5
 800efd0:	4621      	mov	r1, r4
 800efd2:	f7ff ff5f 	bl	800ee94 <__sflush_r>
 800efd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efd8:	07da      	lsls	r2, r3, #31
 800efda:	4605      	mov	r5, r0
 800efdc:	d4e4      	bmi.n	800efa8 <_fflush_r+0xc>
 800efde:	89a3      	ldrh	r3, [r4, #12]
 800efe0:	059b      	lsls	r3, r3, #22
 800efe2:	d4e1      	bmi.n	800efa8 <_fflush_r+0xc>
 800efe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efe6:	f7fe fbb1 	bl	800d74c <__retarget_lock_release_recursive>
 800efea:	e7dd      	b.n	800efa8 <_fflush_r+0xc>

0800efec <__swbuf_r>:
 800efec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efee:	460e      	mov	r6, r1
 800eff0:	4614      	mov	r4, r2
 800eff2:	4605      	mov	r5, r0
 800eff4:	b118      	cbz	r0, 800effe <__swbuf_r+0x12>
 800eff6:	6a03      	ldr	r3, [r0, #32]
 800eff8:	b90b      	cbnz	r3, 800effe <__swbuf_r+0x12>
 800effa:	f7fe faaf 	bl	800d55c <__sinit>
 800effe:	69a3      	ldr	r3, [r4, #24]
 800f000:	60a3      	str	r3, [r4, #8]
 800f002:	89a3      	ldrh	r3, [r4, #12]
 800f004:	071a      	lsls	r2, r3, #28
 800f006:	d501      	bpl.n	800f00c <__swbuf_r+0x20>
 800f008:	6923      	ldr	r3, [r4, #16]
 800f00a:	b943      	cbnz	r3, 800f01e <__swbuf_r+0x32>
 800f00c:	4621      	mov	r1, r4
 800f00e:	4628      	mov	r0, r5
 800f010:	f000 f82a 	bl	800f068 <__swsetup_r>
 800f014:	b118      	cbz	r0, 800f01e <__swbuf_r+0x32>
 800f016:	f04f 37ff 	mov.w	r7, #4294967295
 800f01a:	4638      	mov	r0, r7
 800f01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	6922      	ldr	r2, [r4, #16]
 800f022:	1a98      	subs	r0, r3, r2
 800f024:	6963      	ldr	r3, [r4, #20]
 800f026:	b2f6      	uxtb	r6, r6
 800f028:	4283      	cmp	r3, r0
 800f02a:	4637      	mov	r7, r6
 800f02c:	dc05      	bgt.n	800f03a <__swbuf_r+0x4e>
 800f02e:	4621      	mov	r1, r4
 800f030:	4628      	mov	r0, r5
 800f032:	f7ff ffb3 	bl	800ef9c <_fflush_r>
 800f036:	2800      	cmp	r0, #0
 800f038:	d1ed      	bne.n	800f016 <__swbuf_r+0x2a>
 800f03a:	68a3      	ldr	r3, [r4, #8]
 800f03c:	3b01      	subs	r3, #1
 800f03e:	60a3      	str	r3, [r4, #8]
 800f040:	6823      	ldr	r3, [r4, #0]
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	6022      	str	r2, [r4, #0]
 800f046:	701e      	strb	r6, [r3, #0]
 800f048:	6962      	ldr	r2, [r4, #20]
 800f04a:	1c43      	adds	r3, r0, #1
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d004      	beq.n	800f05a <__swbuf_r+0x6e>
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	07db      	lsls	r3, r3, #31
 800f054:	d5e1      	bpl.n	800f01a <__swbuf_r+0x2e>
 800f056:	2e0a      	cmp	r6, #10
 800f058:	d1df      	bne.n	800f01a <__swbuf_r+0x2e>
 800f05a:	4621      	mov	r1, r4
 800f05c:	4628      	mov	r0, r5
 800f05e:	f7ff ff9d 	bl	800ef9c <_fflush_r>
 800f062:	2800      	cmp	r0, #0
 800f064:	d0d9      	beq.n	800f01a <__swbuf_r+0x2e>
 800f066:	e7d6      	b.n	800f016 <__swbuf_r+0x2a>

0800f068 <__swsetup_r>:
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	4b29      	ldr	r3, [pc, #164]	@ (800f110 <__swsetup_r+0xa8>)
 800f06c:	4605      	mov	r5, r0
 800f06e:	6818      	ldr	r0, [r3, #0]
 800f070:	460c      	mov	r4, r1
 800f072:	b118      	cbz	r0, 800f07c <__swsetup_r+0x14>
 800f074:	6a03      	ldr	r3, [r0, #32]
 800f076:	b90b      	cbnz	r3, 800f07c <__swsetup_r+0x14>
 800f078:	f7fe fa70 	bl	800d55c <__sinit>
 800f07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f080:	0719      	lsls	r1, r3, #28
 800f082:	d422      	bmi.n	800f0ca <__swsetup_r+0x62>
 800f084:	06da      	lsls	r2, r3, #27
 800f086:	d407      	bmi.n	800f098 <__swsetup_r+0x30>
 800f088:	2209      	movs	r2, #9
 800f08a:	602a      	str	r2, [r5, #0]
 800f08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f090:	81a3      	strh	r3, [r4, #12]
 800f092:	f04f 30ff 	mov.w	r0, #4294967295
 800f096:	e033      	b.n	800f100 <__swsetup_r+0x98>
 800f098:	0758      	lsls	r0, r3, #29
 800f09a:	d512      	bpl.n	800f0c2 <__swsetup_r+0x5a>
 800f09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f09e:	b141      	cbz	r1, 800f0b2 <__swsetup_r+0x4a>
 800f0a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0a4:	4299      	cmp	r1, r3
 800f0a6:	d002      	beq.n	800f0ae <__swsetup_r+0x46>
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	f7ff f937 	bl	800e31c <_free_r>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0b2:	89a3      	ldrh	r3, [r4, #12]
 800f0b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f0b8:	81a3      	strh	r3, [r4, #12]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	6063      	str	r3, [r4, #4]
 800f0be:	6923      	ldr	r3, [r4, #16]
 800f0c0:	6023      	str	r3, [r4, #0]
 800f0c2:	89a3      	ldrh	r3, [r4, #12]
 800f0c4:	f043 0308 	orr.w	r3, r3, #8
 800f0c8:	81a3      	strh	r3, [r4, #12]
 800f0ca:	6923      	ldr	r3, [r4, #16]
 800f0cc:	b94b      	cbnz	r3, 800f0e2 <__swsetup_r+0x7a>
 800f0ce:	89a3      	ldrh	r3, [r4, #12]
 800f0d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f0d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0d8:	d003      	beq.n	800f0e2 <__swsetup_r+0x7a>
 800f0da:	4621      	mov	r1, r4
 800f0dc:	4628      	mov	r0, r5
 800f0de:	f000 f8c1 	bl	800f264 <__smakebuf_r>
 800f0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0e6:	f013 0201 	ands.w	r2, r3, #1
 800f0ea:	d00a      	beq.n	800f102 <__swsetup_r+0x9a>
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	60a2      	str	r2, [r4, #8]
 800f0f0:	6962      	ldr	r2, [r4, #20]
 800f0f2:	4252      	negs	r2, r2
 800f0f4:	61a2      	str	r2, [r4, #24]
 800f0f6:	6922      	ldr	r2, [r4, #16]
 800f0f8:	b942      	cbnz	r2, 800f10c <__swsetup_r+0xa4>
 800f0fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0fe:	d1c5      	bne.n	800f08c <__swsetup_r+0x24>
 800f100:	bd38      	pop	{r3, r4, r5, pc}
 800f102:	0799      	lsls	r1, r3, #30
 800f104:	bf58      	it	pl
 800f106:	6962      	ldrpl	r2, [r4, #20]
 800f108:	60a2      	str	r2, [r4, #8]
 800f10a:	e7f4      	b.n	800f0f6 <__swsetup_r+0x8e>
 800f10c:	2000      	movs	r0, #0
 800f10e:	e7f7      	b.n	800f100 <__swsetup_r+0x98>
 800f110:	2400001c 	.word	0x2400001c

0800f114 <_sbrk_r>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	4d06      	ldr	r5, [pc, #24]	@ (800f130 <_sbrk_r+0x1c>)
 800f118:	2300      	movs	r3, #0
 800f11a:	4604      	mov	r4, r0
 800f11c:	4608      	mov	r0, r1
 800f11e:	602b      	str	r3, [r5, #0]
 800f120:	f7f2 fd22 	bl	8001b68 <_sbrk>
 800f124:	1c43      	adds	r3, r0, #1
 800f126:	d102      	bne.n	800f12e <_sbrk_r+0x1a>
 800f128:	682b      	ldr	r3, [r5, #0]
 800f12a:	b103      	cbz	r3, 800f12e <_sbrk_r+0x1a>
 800f12c:	6023      	str	r3, [r4, #0]
 800f12e:	bd38      	pop	{r3, r4, r5, pc}
 800f130:	2400126c 	.word	0x2400126c

0800f134 <memcpy>:
 800f134:	440a      	add	r2, r1
 800f136:	4291      	cmp	r1, r2
 800f138:	f100 33ff 	add.w	r3, r0, #4294967295
 800f13c:	d100      	bne.n	800f140 <memcpy+0xc>
 800f13e:	4770      	bx	lr
 800f140:	b510      	push	{r4, lr}
 800f142:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f14a:	4291      	cmp	r1, r2
 800f14c:	d1f9      	bne.n	800f142 <memcpy+0xe>
 800f14e:	bd10      	pop	{r4, pc}

0800f150 <__assert_func>:
 800f150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f152:	4614      	mov	r4, r2
 800f154:	461a      	mov	r2, r3
 800f156:	4b09      	ldr	r3, [pc, #36]	@ (800f17c <__assert_func+0x2c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4605      	mov	r5, r0
 800f15c:	68d8      	ldr	r0, [r3, #12]
 800f15e:	b14c      	cbz	r4, 800f174 <__assert_func+0x24>
 800f160:	4b07      	ldr	r3, [pc, #28]	@ (800f180 <__assert_func+0x30>)
 800f162:	9100      	str	r1, [sp, #0]
 800f164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f168:	4906      	ldr	r1, [pc, #24]	@ (800f184 <__assert_func+0x34>)
 800f16a:	462b      	mov	r3, r5
 800f16c:	f000 f842 	bl	800f1f4 <fiprintf>
 800f170:	f000 f8d6 	bl	800f320 <abort>
 800f174:	4b04      	ldr	r3, [pc, #16]	@ (800f188 <__assert_func+0x38>)
 800f176:	461c      	mov	r4, r3
 800f178:	e7f3      	b.n	800f162 <__assert_func+0x12>
 800f17a:	bf00      	nop
 800f17c:	2400001c 	.word	0x2400001c
 800f180:	0800f551 	.word	0x0800f551
 800f184:	0800f55e 	.word	0x0800f55e
 800f188:	0800f58c 	.word	0x0800f58c

0800f18c <_calloc_r>:
 800f18c:	b570      	push	{r4, r5, r6, lr}
 800f18e:	fba1 5402 	umull	r5, r4, r1, r2
 800f192:	b934      	cbnz	r4, 800f1a2 <_calloc_r+0x16>
 800f194:	4629      	mov	r1, r5
 800f196:	f7ff f935 	bl	800e404 <_malloc_r>
 800f19a:	4606      	mov	r6, r0
 800f19c:	b928      	cbnz	r0, 800f1aa <_calloc_r+0x1e>
 800f19e:	4630      	mov	r0, r6
 800f1a0:	bd70      	pop	{r4, r5, r6, pc}
 800f1a2:	220c      	movs	r2, #12
 800f1a4:	6002      	str	r2, [r0, #0]
 800f1a6:	2600      	movs	r6, #0
 800f1a8:	e7f9      	b.n	800f19e <_calloc_r+0x12>
 800f1aa:	462a      	mov	r2, r5
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	f7fe fa4e 	bl	800d64e <memset>
 800f1b2:	e7f4      	b.n	800f19e <_calloc_r+0x12>

0800f1b4 <__ascii_mbtowc>:
 800f1b4:	b082      	sub	sp, #8
 800f1b6:	b901      	cbnz	r1, 800f1ba <__ascii_mbtowc+0x6>
 800f1b8:	a901      	add	r1, sp, #4
 800f1ba:	b142      	cbz	r2, 800f1ce <__ascii_mbtowc+0x1a>
 800f1bc:	b14b      	cbz	r3, 800f1d2 <__ascii_mbtowc+0x1e>
 800f1be:	7813      	ldrb	r3, [r2, #0]
 800f1c0:	600b      	str	r3, [r1, #0]
 800f1c2:	7812      	ldrb	r2, [r2, #0]
 800f1c4:	1e10      	subs	r0, r2, #0
 800f1c6:	bf18      	it	ne
 800f1c8:	2001      	movne	r0, #1
 800f1ca:	b002      	add	sp, #8
 800f1cc:	4770      	bx	lr
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	e7fb      	b.n	800f1ca <__ascii_mbtowc+0x16>
 800f1d2:	f06f 0001 	mvn.w	r0, #1
 800f1d6:	e7f8      	b.n	800f1ca <__ascii_mbtowc+0x16>

0800f1d8 <__ascii_wctomb>:
 800f1d8:	4603      	mov	r3, r0
 800f1da:	4608      	mov	r0, r1
 800f1dc:	b141      	cbz	r1, 800f1f0 <__ascii_wctomb+0x18>
 800f1de:	2aff      	cmp	r2, #255	@ 0xff
 800f1e0:	d904      	bls.n	800f1ec <__ascii_wctomb+0x14>
 800f1e2:	228a      	movs	r2, #138	@ 0x8a
 800f1e4:	601a      	str	r2, [r3, #0]
 800f1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ea:	4770      	bx	lr
 800f1ec:	700a      	strb	r2, [r1, #0]
 800f1ee:	2001      	movs	r0, #1
 800f1f0:	4770      	bx	lr
	...

0800f1f4 <fiprintf>:
 800f1f4:	b40e      	push	{r1, r2, r3}
 800f1f6:	b503      	push	{r0, r1, lr}
 800f1f8:	4601      	mov	r1, r0
 800f1fa:	ab03      	add	r3, sp, #12
 800f1fc:	4805      	ldr	r0, [pc, #20]	@ (800f214 <fiprintf+0x20>)
 800f1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800f202:	6800      	ldr	r0, [r0, #0]
 800f204:	9301      	str	r3, [sp, #4]
 800f206:	f7ff fd2d 	bl	800ec64 <_vfiprintf_r>
 800f20a:	b002      	add	sp, #8
 800f20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f210:	b003      	add	sp, #12
 800f212:	4770      	bx	lr
 800f214:	2400001c 	.word	0x2400001c

0800f218 <__swhatbuf_r>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	460c      	mov	r4, r1
 800f21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f220:	2900      	cmp	r1, #0
 800f222:	b096      	sub	sp, #88	@ 0x58
 800f224:	4615      	mov	r5, r2
 800f226:	461e      	mov	r6, r3
 800f228:	da0d      	bge.n	800f246 <__swhatbuf_r+0x2e>
 800f22a:	89a3      	ldrh	r3, [r4, #12]
 800f22c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f230:	f04f 0100 	mov.w	r1, #0
 800f234:	bf14      	ite	ne
 800f236:	2340      	movne	r3, #64	@ 0x40
 800f238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f23c:	2000      	movs	r0, #0
 800f23e:	6031      	str	r1, [r6, #0]
 800f240:	602b      	str	r3, [r5, #0]
 800f242:	b016      	add	sp, #88	@ 0x58
 800f244:	bd70      	pop	{r4, r5, r6, pc}
 800f246:	466a      	mov	r2, sp
 800f248:	f000 f848 	bl	800f2dc <_fstat_r>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	dbec      	blt.n	800f22a <__swhatbuf_r+0x12>
 800f250:	9901      	ldr	r1, [sp, #4]
 800f252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f25a:	4259      	negs	r1, r3
 800f25c:	4159      	adcs	r1, r3
 800f25e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f262:	e7eb      	b.n	800f23c <__swhatbuf_r+0x24>

0800f264 <__smakebuf_r>:
 800f264:	898b      	ldrh	r3, [r1, #12]
 800f266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f268:	079d      	lsls	r5, r3, #30
 800f26a:	4606      	mov	r6, r0
 800f26c:	460c      	mov	r4, r1
 800f26e:	d507      	bpl.n	800f280 <__smakebuf_r+0x1c>
 800f270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	6123      	str	r3, [r4, #16]
 800f278:	2301      	movs	r3, #1
 800f27a:	6163      	str	r3, [r4, #20]
 800f27c:	b003      	add	sp, #12
 800f27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f280:	ab01      	add	r3, sp, #4
 800f282:	466a      	mov	r2, sp
 800f284:	f7ff ffc8 	bl	800f218 <__swhatbuf_r>
 800f288:	9f00      	ldr	r7, [sp, #0]
 800f28a:	4605      	mov	r5, r0
 800f28c:	4639      	mov	r1, r7
 800f28e:	4630      	mov	r0, r6
 800f290:	f7ff f8b8 	bl	800e404 <_malloc_r>
 800f294:	b948      	cbnz	r0, 800f2aa <__smakebuf_r+0x46>
 800f296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f29a:	059a      	lsls	r2, r3, #22
 800f29c:	d4ee      	bmi.n	800f27c <__smakebuf_r+0x18>
 800f29e:	f023 0303 	bic.w	r3, r3, #3
 800f2a2:	f043 0302 	orr.w	r3, r3, #2
 800f2a6:	81a3      	strh	r3, [r4, #12]
 800f2a8:	e7e2      	b.n	800f270 <__smakebuf_r+0xc>
 800f2aa:	89a3      	ldrh	r3, [r4, #12]
 800f2ac:	6020      	str	r0, [r4, #0]
 800f2ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2b2:	81a3      	strh	r3, [r4, #12]
 800f2b4:	9b01      	ldr	r3, [sp, #4]
 800f2b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f2ba:	b15b      	cbz	r3, 800f2d4 <__smakebuf_r+0x70>
 800f2bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f000 f81d 	bl	800f300 <_isatty_r>
 800f2c6:	b128      	cbz	r0, 800f2d4 <__smakebuf_r+0x70>
 800f2c8:	89a3      	ldrh	r3, [r4, #12]
 800f2ca:	f023 0303 	bic.w	r3, r3, #3
 800f2ce:	f043 0301 	orr.w	r3, r3, #1
 800f2d2:	81a3      	strh	r3, [r4, #12]
 800f2d4:	89a3      	ldrh	r3, [r4, #12]
 800f2d6:	431d      	orrs	r5, r3
 800f2d8:	81a5      	strh	r5, [r4, #12]
 800f2da:	e7cf      	b.n	800f27c <__smakebuf_r+0x18>

0800f2dc <_fstat_r>:
 800f2dc:	b538      	push	{r3, r4, r5, lr}
 800f2de:	4d07      	ldr	r5, [pc, #28]	@ (800f2fc <_fstat_r+0x20>)
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	4608      	mov	r0, r1
 800f2e6:	4611      	mov	r1, r2
 800f2e8:	602b      	str	r3, [r5, #0]
 800f2ea:	f7f2 fc14 	bl	8001b16 <_fstat>
 800f2ee:	1c43      	adds	r3, r0, #1
 800f2f0:	d102      	bne.n	800f2f8 <_fstat_r+0x1c>
 800f2f2:	682b      	ldr	r3, [r5, #0]
 800f2f4:	b103      	cbz	r3, 800f2f8 <_fstat_r+0x1c>
 800f2f6:	6023      	str	r3, [r4, #0]
 800f2f8:	bd38      	pop	{r3, r4, r5, pc}
 800f2fa:	bf00      	nop
 800f2fc:	2400126c 	.word	0x2400126c

0800f300 <_isatty_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4d06      	ldr	r5, [pc, #24]	@ (800f31c <_isatty_r+0x1c>)
 800f304:	2300      	movs	r3, #0
 800f306:	4604      	mov	r4, r0
 800f308:	4608      	mov	r0, r1
 800f30a:	602b      	str	r3, [r5, #0]
 800f30c:	f7f2 fc13 	bl	8001b36 <_isatty>
 800f310:	1c43      	adds	r3, r0, #1
 800f312:	d102      	bne.n	800f31a <_isatty_r+0x1a>
 800f314:	682b      	ldr	r3, [r5, #0]
 800f316:	b103      	cbz	r3, 800f31a <_isatty_r+0x1a>
 800f318:	6023      	str	r3, [r4, #0]
 800f31a:	bd38      	pop	{r3, r4, r5, pc}
 800f31c:	2400126c 	.word	0x2400126c

0800f320 <abort>:
 800f320:	b508      	push	{r3, lr}
 800f322:	2006      	movs	r0, #6
 800f324:	f000 f82c 	bl	800f380 <raise>
 800f328:	2001      	movs	r0, #1
 800f32a:	f7f2 fbc0 	bl	8001aae <_exit>

0800f32e <_raise_r>:
 800f32e:	291f      	cmp	r1, #31
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	4605      	mov	r5, r0
 800f334:	460c      	mov	r4, r1
 800f336:	d904      	bls.n	800f342 <_raise_r+0x14>
 800f338:	2316      	movs	r3, #22
 800f33a:	6003      	str	r3, [r0, #0]
 800f33c:	f04f 30ff 	mov.w	r0, #4294967295
 800f340:	bd38      	pop	{r3, r4, r5, pc}
 800f342:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f344:	b112      	cbz	r2, 800f34c <_raise_r+0x1e>
 800f346:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f34a:	b94b      	cbnz	r3, 800f360 <_raise_r+0x32>
 800f34c:	4628      	mov	r0, r5
 800f34e:	f000 f831 	bl	800f3b4 <_getpid_r>
 800f352:	4622      	mov	r2, r4
 800f354:	4601      	mov	r1, r0
 800f356:	4628      	mov	r0, r5
 800f358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f35c:	f000 b818 	b.w	800f390 <_kill_r>
 800f360:	2b01      	cmp	r3, #1
 800f362:	d00a      	beq.n	800f37a <_raise_r+0x4c>
 800f364:	1c59      	adds	r1, r3, #1
 800f366:	d103      	bne.n	800f370 <_raise_r+0x42>
 800f368:	2316      	movs	r3, #22
 800f36a:	6003      	str	r3, [r0, #0]
 800f36c:	2001      	movs	r0, #1
 800f36e:	e7e7      	b.n	800f340 <_raise_r+0x12>
 800f370:	2100      	movs	r1, #0
 800f372:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f376:	4620      	mov	r0, r4
 800f378:	4798      	blx	r3
 800f37a:	2000      	movs	r0, #0
 800f37c:	e7e0      	b.n	800f340 <_raise_r+0x12>
	...

0800f380 <raise>:
 800f380:	4b02      	ldr	r3, [pc, #8]	@ (800f38c <raise+0xc>)
 800f382:	4601      	mov	r1, r0
 800f384:	6818      	ldr	r0, [r3, #0]
 800f386:	f7ff bfd2 	b.w	800f32e <_raise_r>
 800f38a:	bf00      	nop
 800f38c:	2400001c 	.word	0x2400001c

0800f390 <_kill_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4d07      	ldr	r5, [pc, #28]	@ (800f3b0 <_kill_r+0x20>)
 800f394:	2300      	movs	r3, #0
 800f396:	4604      	mov	r4, r0
 800f398:	4608      	mov	r0, r1
 800f39a:	4611      	mov	r1, r2
 800f39c:	602b      	str	r3, [r5, #0]
 800f39e:	f7f2 fb76 	bl	8001a8e <_kill>
 800f3a2:	1c43      	adds	r3, r0, #1
 800f3a4:	d102      	bne.n	800f3ac <_kill_r+0x1c>
 800f3a6:	682b      	ldr	r3, [r5, #0]
 800f3a8:	b103      	cbz	r3, 800f3ac <_kill_r+0x1c>
 800f3aa:	6023      	str	r3, [r4, #0]
 800f3ac:	bd38      	pop	{r3, r4, r5, pc}
 800f3ae:	bf00      	nop
 800f3b0:	2400126c 	.word	0x2400126c

0800f3b4 <_getpid_r>:
 800f3b4:	f7f2 bb63 	b.w	8001a7e <_getpid>

0800f3b8 <_init>:
 800f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ba:	bf00      	nop
 800f3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3be:	bc08      	pop	{r3}
 800f3c0:	469e      	mov	lr, r3
 800f3c2:	4770      	bx	lr

0800f3c4 <_fini>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	bf00      	nop
 800f3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ca:	bc08      	pop	{r3}
 800f3cc:	469e      	mov	lr, r3
 800f3ce:	4770      	bx	lr
