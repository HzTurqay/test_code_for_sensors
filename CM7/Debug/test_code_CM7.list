
test_code_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c65c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800c8f4  0800c8f4  0000d8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c940  0800c940  0000e010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c940  0800c940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c948  0800c948  0000e010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c948  0800c948  0000d948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c94c  0800c94c  0000d94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800c950  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f54  24000010  0800c960  0000e010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000f64  0800c960  0000ef64  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025bb0  00000000  00000000  0000e03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d1d  00000000  00000000  00033bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  00038910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017c8  00000000  00000000  0003a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004617c  00000000  00000000  0003bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ce4f  00000000  00000000  000820f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b3602  00000000  00000000  000aef43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00262545  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008184  00000000  00000000  00262588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0026a70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c8dc 	.word	0x0800c8dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800c8dc 	.word	0x0800c8dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <ExitRun0Mode+0x30>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f023 0306 	bic.w	r3, r3, #6
 800076c:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <ExitRun0Mode+0x30>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000774:	bf00      	nop
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <ExitRun0Mode+0x30>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f9      	beq.n	8000776 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	58024800 	.word	0x58024800

08000794 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	4bb6      	ldr	r3, [pc, #728]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	4ab4      	ldr	r2, [pc, #720]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ba:	4bb2      	ldr	r3, [pc, #712]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c0:	f003 0310 	and.w	r3, r3, #16
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c8:	4bae      	ldr	r3, [pc, #696]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ce:	4aad      	ldr	r2, [pc, #692]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d8:	4baa      	ldr	r3, [pc, #680]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	4ba7      	ldr	r3, [pc, #668]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ec:	4aa5      	ldr	r2, [pc, #660]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 80007ee:	f043 0320 	orr.w	r3, r3, #32
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f6:	4ba3      	ldr	r3, [pc, #652]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b9f      	ldr	r3, [pc, #636]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080a:	4a9e      	ldr	r2, [pc, #632]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000814:	4b9b      	ldr	r3, [pc, #620]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b98      	ldr	r3, [pc, #608]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000828:	4a96      	ldr	r2, [pc, #600]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000832:	4b94      	ldr	r3, [pc, #592]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000840:	4b90      	ldr	r3, [pc, #576]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000846:	4a8f      	ldr	r2, [pc, #572]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800084c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000850:	4b8c      	ldr	r3, [pc, #560]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b89      	ldr	r3, [pc, #548]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000864:	4a87      	ldr	r2, [pc, #540]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800086e:	4b85      	ldr	r3, [pc, #532]	@ (8000a84 <MX_GPIO_Init+0x2f0>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000874:	f003 0308 	and.w	r3, r3, #8
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU3_CS_GPIO_Port, IMU3_CS_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	4881      	ldr	r0, [pc, #516]	@ (8000a88 <MX_GPIO_Init+0x2f4>)
 8000882:	f002 ff47 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAR1_CS_Pin|MCU_ARM_1_Pin|WD_EN_Pin|OUT_LS_2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f242 012a 	movw	r1, #8234	@ 0x202a
 800088c:	487f      	ldr	r0, [pc, #508]	@ (8000a8c <MX_GPIO_Init+0x2f8>)
 800088e:	f002 ff41 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DET_0_Pin|ARM_0_Pin|IMU1_CS_Pin|OUT_LS_5_Pin
 8000892:	2200      	movs	r2, #0
 8000894:	f645 410c 	movw	r1, #23564	@ 0x5c0c
 8000898:	487d      	ldr	r0, [pc, #500]	@ (8000a90 <MX_GPIO_Init+0x2fc>)
 800089a:	f002 ff3b 	bl	8003714 <HAL_GPIO_WritePin>
                          |OUT_LS_4_Pin|OUT_LS_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_LS_1_Pin|BAR2_CS_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f248 0110 	movw	r1, #32784	@ 0x8010
 80008a4:	487b      	ldr	r0, [pc, #492]	@ (8000a94 <MX_GPIO_Init+0x300>)
 80008a6:	f002 ff35 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LS_3_GPIO_Port, OUT_LS_3_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2104      	movs	r1, #4
 80008ae:	487a      	ldr	r0, [pc, #488]	@ (8000a98 <MX_GPIO_Init+0x304>)
 80008b0:	f002 ff30 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2180      	movs	r1, #128	@ 0x80
 80008b8:	4878      	ldr	r0, [pc, #480]	@ (8000a9c <MX_GPIO_Init+0x308>)
 80008ba:	f002 ff2b 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SPI_LS_CS_Pin|IMU3_RESET_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80008c4:	4875      	ldr	r0, [pc, #468]	@ (8000a9c <MX_GPIO_Init+0x308>)
 80008c6:	f002 ff25 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU2_CS_GPIO_Port, IMU2_CS_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2102      	movs	r1, #2
 80008ce:	4874      	ldr	r0, [pc, #464]	@ (8000aa0 <MX_GPIO_Init+0x30c>)
 80008d0:	f002 ff20 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU3_INT_Pin */
  GPIO_InitStruct.Pin = IMU3_INT_Pin;
 80008d4:	2308      	movs	r3, #8
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IMU3_INT_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4867      	ldr	r0, [pc, #412]	@ (8000a88 <MX_GPIO_Init+0x2f4>)
 80008ea:	f002 fd4b 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU3_CS_Pin */
  GPIO_InitStruct.Pin = IMU3_CS_Pin;
 80008ee:	2310      	movs	r3, #16
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IMU3_CS_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4860      	ldr	r0, [pc, #384]	@ (8000a88 <MX_GPIO_Init+0x2f4>)
 8000906:	f002 fd3d 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR1_CS_Pin MCU_ARM_1_Pin WD_EN_Pin OUT_LS_2_Pin */
  GPIO_InitStruct.Pin = BAR1_CS_Pin|MCU_ARM_1_Pin|WD_EN_Pin|OUT_LS_2_Pin;
 800090a:	f242 032a 	movw	r3, #8234	@ 0x202a
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	485a      	ldr	r0, [pc, #360]	@ (8000a8c <MX_GPIO_Init+0x2f8>)
 8000924:	f002 fd2e 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : DET_0_Pin ARM_0_Pin IMU1_CS_Pin OUT_LS_5_Pin
                           OUT_LS_4_Pin OUT_LS_6_Pin */
  GPIO_InitStruct.Pin = DET_0_Pin|ARM_0_Pin|IMU1_CS_Pin|OUT_LS_5_Pin
 8000928:	f645 430c 	movw	r3, #23564	@ 0x5c0c
 800092c:	61fb      	str	r3, [r7, #28]
                          |OUT_LS_4_Pin|OUT_LS_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4853      	ldr	r0, [pc, #332]	@ (8000a90 <MX_GPIO_Init+0x2fc>)
 8000942:	f002 fd1f 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_STAT_Pin BATT_SENSE_Pin IN_LS_1_Pin */
  GPIO_InitStruct.Pin = MUX_STAT_Pin|BATT_SENSE_Pin|IN_LS_1_Pin;
 8000946:	f24a 0310 	movw	r3, #40976	@ 0xa010
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	484d      	ldr	r0, [pc, #308]	@ (8000a90 <MX_GPIO_Init+0x2fc>)
 800095c:	f002 fd12 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_WDI_Pin WD_IN_Pin */
  GPIO_InitStruct.Pin = MCU_WDI_Pin|WD_IN_Pin;
 8000960:	2305      	movs	r3, #5
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4846      	ldr	r0, [pc, #280]	@ (8000a8c <MX_GPIO_Init+0x2f8>)
 8000974:	f002 fd06 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LS_1_Pin BAR2_CS_Pin */
  GPIO_InitStruct.Pin = OUT_LS_1_Pin|BAR2_CS_Pin;
 8000978:	f248 0310 	movw	r3, #32784	@ 0x8010
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4840      	ldr	r0, [pc, #256]	@ (8000a94 <MX_GPIO_Init+0x300>)
 8000992:	f002 fcf7 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LS_3_Pin */
  GPIO_InitStruct.Pin = OUT_LS_3_Pin;
 8000996:	2304      	movs	r3, #4
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OUT_LS_3_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	483a      	ldr	r0, [pc, #232]	@ (8000a98 <MX_GPIO_Init+0x304>)
 80009ae:	f002 fce9 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_LS_2_Pin IN_LS_3_Pin VDD_12_PG_Pin VDD_5_PG_Pin
                           VDD_3V3_SNS_PG_Pin VDD_3V3_SYS_PG_Pin VDD_3V3_SEC_PG_Pin */
  GPIO_InitStruct.Pin = IN_LS_2_Pin|IN_LS_3_Pin|VDD_12_PG_Pin|VDD_5_PG_Pin
 80009b2:	237f      	movs	r3, #127	@ 0x7f
 80009b4:	61fb      	str	r3, [r7, #28]
                          |VDD_3V3_SNS_PG_Pin|VDD_3V3_SYS_PG_Pin|VDD_3V3_SEC_PG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4835      	ldr	r0, [pc, #212]	@ (8000a9c <MX_GPIO_Init+0x308>)
 80009c6:	f002 fcdd 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_LS_4_Pin IN_LS_5_Pin IN_LS_6_Pin */
  GPIO_InitStruct.Pin = IN_LS_4_Pin|IN_LS_5_Pin|IN_LS_6_Pin;
 80009ca:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	482a      	ldr	r0, [pc, #168]	@ (8000a88 <MX_GPIO_Init+0x2f4>)
 80009e0:	f002 fcd0 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_DET_Pin MAG1_INT_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin|MAG1_INT_Pin;
 80009e4:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4829      	ldr	r0, [pc, #164]	@ (8000aa0 <MX_GPIO_Init+0x30c>)
 80009fa:	f002 fcc3 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a02:	2311      	movs	r3, #17
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4821      	ldr	r0, [pc, #132]	@ (8000a9c <MX_GPIO_Init+0x308>)
 8000a16:	f002 fcb5 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_LS_CS_Pin IMU3_RESET_Pin */
  GPIO_InitStruct.Pin = SPI_LS_CS_Pin|IMU3_RESET_Pin;
 8000a1a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481a      	ldr	r0, [pc, #104]	@ (8000a9c <MX_GPIO_Init+0x308>)
 8000a34:	f002 fca6 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU2_CS_Pin */
  GPIO_InitStruct.Pin = IMU2_CS_Pin;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4814      	ldr	r0, [pc, #80]	@ (8000aa0 <MX_GPIO_Init+0x30c>)
 8000a50:	f002 fc98 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU2_INT1_Pin IMU2_INT2_Pin IMU1_INT_Pin */
  GPIO_InitStruct.Pin = IMU2_INT1_Pin|IMU2_INT2_Pin|IMU1_INT_Pin;
 8000a54:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_GPIO_Init+0x308>)
 8000a6c:	f002 fc8a 	bl	8003384 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_CLOSE);
 8000a70:	2100      	movs	r1, #0
 8000a72:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000a76:	f002 fb13 	bl	80030a0 <HAL_SYSCFG_AnalogSwitchConfig>

}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	@ 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58021000 	.word	0x58021000
 8000a8c:	58020800 	.word	0x58020800
 8000a90:	58021400 	.word	0x58021400
 8000a94:	58020000 	.word	0x58020000
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	58021800 	.word	0x58021800
 8000aa0:	58020c00 	.word	0x58020c00

08000aa4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b1c <MX_I2C1_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b20 <MX_I2C1_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000ae0:	f002 fe60 	bl	80037a4 <HAL_I2C_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f000 fac7 	bl	800107c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000af2:	f002 fef3 	bl	80038dc <HAL_I2CEx_ConfigAnalogFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 fabe 	bl	800107c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_I2C1_Init+0x74>)
 8000b04:	f002 ff35 	bl	8003972 <HAL_I2CEx_ConfigDigitalFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 fab5 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2400002c 	.word	0x2400002c
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	307075b1 	.word	0x307075b1

08000b24 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <MX_I2C2_Init+0x78>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <MX_I2C2_Init+0x7c>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b34:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b5e:	480e      	ldr	r0, [pc, #56]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b60:	f002 fe20 	bl	80037a4 <HAL_I2C_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b6a:	f000 fa87 	bl	800107c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4809      	ldr	r0, [pc, #36]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b72:	f002 feb3 	bl	80038dc <HAL_I2CEx_ConfigAnalogFilter>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b7c:	f000 fa7e 	bl	800107c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_I2C2_Init+0x74>)
 8000b84:	f002 fef5 	bl	8003972 <HAL_I2CEx_ConfigDigitalFilter>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 fa75 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	24000080 	.word	0x24000080
 8000b9c:	40005800 	.word	0x40005800
 8000ba0:	307075b1 	.word	0x307075b1

08000ba4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c1c <MX_I2C4_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c20 <MX_I2C4_Init+0x7c>)
 8000bb2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000bde:	480e      	ldr	r0, [pc, #56]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000be0:	f002 fde0 	bl	80037a4 <HAL_I2C_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bea:	f000 fa47 	bl	800107c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bf2:	f002 fe73 	bl	80038dc <HAL_I2CEx_ConfigAnalogFilter>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000bfc:	f000 fa3e 	bl	800107c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000c04:	f002 feb5 	bl	8003972 <HAL_I2CEx_ConfigDigitalFilter>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c0e:	f000 fa35 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	240000d4 	.word	0x240000d4
 8000c1c:	58001c00 	.word	0x58001c00
 8000c20:	307075b1 	.word	0x307075b1

08000c24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0c0      	sub	sp, #256	@ 0x100
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	22c8      	movs	r2, #200	@ 0xc8
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00b fe1c 	bl	800c882 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a73      	ldr	r2, [pc, #460]	@ (8000e1c <HAL_I2C_MspInit+0x1f8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d147      	bne.n	8000ce4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c54:	f04f 0208 	mov.w	r2, #8
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c66:	f107 0320 	add.w	r3, r7, #32
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 f84e 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c76:	f000 fa01 	bl	800107c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b69      	ldr	r3, [pc, #420]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c80:	4a67      	ldr	r2, [pc, #412]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8a:	4b65      	ldr	r3, [pc, #404]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	61fb      	str	r3, [r7, #28]
 8000c96:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = PITOT_SCL_Pin|PITOT_SDA_Pin;
 8000c98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	2312      	movs	r3, #18
 8000ca2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4859      	ldr	r0, [pc, #356]	@ (8000e24 <HAL_I2C_MspInit+0x200>)
 8000cc0:	f002 fb60 	bl	8003384 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc4:	4b56      	ldr	r3, [pc, #344]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cca:	4a55      	ldr	r2, [pc, #340]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cd4:	4b52      	ldr	r3, [pc, #328]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000ce2:	e096      	b.n	8000e12 <HAL_I2C_MspInit+0x1ee>
  else if(i2cHandle->Instance==I2C2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a4f      	ldr	r2, [pc, #316]	@ (8000e28 <HAL_I2C_MspInit+0x204>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d146      	bne.n	8000d7c <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cee:	f04f 0208 	mov.w	r2, #8
 8000cf2:	f04f 0300 	mov.w	r3, #0
 8000cf6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 f801 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000d10:	f000 f9b4 	bl	800107c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d14:	4b42      	ldr	r3, [pc, #264]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	4a41      	ldr	r2, [pc, #260]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000d1c:	f043 0320 	orr.w	r3, r3, #32
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d24:	4b3e      	ldr	r3, [pc, #248]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2a:	f003 0320 	and.w	r3, r3, #32
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d32:	2303      	movs	r3, #3
 8000d34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d50:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d54:	4619      	mov	r1, r3
 8000d56:	4835      	ldr	r0, [pc, #212]	@ (8000e2c <HAL_I2C_MspInit+0x208>)
 8000d58:	f002 fb14 	bl	8003384 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d5c:	4b30      	ldr	r3, [pc, #192]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d62:	4a2f      	ldr	r2, [pc, #188]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000d64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
}
 8000d7a:	e04a      	b.n	8000e12 <HAL_I2C_MspInit+0x1ee>
  else if(i2cHandle->Instance==I2C4)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a2b      	ldr	r2, [pc, #172]	@ (8000e30 <HAL_I2C_MspInit+0x20c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d145      	bne.n	8000e12 <HAL_I2C_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d86:	f04f 0210 	mov.w	r2, #16
 8000d8a:	f04f 0300 	mov.w	r3, #0
 8000d8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 ffb5 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000da8:	f000 f968 	bl	800107c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG1_SCL_Pin|MAG1_SDA_Pin;
 8000dca:	23c0      	movs	r3, #192	@ 0xc0
 8000dcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8000de2:	2306      	movs	r3, #6
 8000de4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <HAL_I2C_MspInit+0x200>)
 8000df0:	f002 fac8 	bl	8003384 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000df4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dfa:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_I2C_MspInit+0x1fc>)
 8000e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
}
 8000e12:	bf00      	nop
 8000e14:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020400 	.word	0x58020400
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	58021400 	.word	0x58021400
 8000e30:	58001c00 	.word	0x58001c00

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e3a:	f000 f8f3 	bl	8001024 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e42:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e44:	bf00      	nop
 8000e46:	4b39      	ldr	r3, [pc, #228]	@ (8000f2c <main+0xf8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <main+0x28>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	dcf4      	bgt.n	8000e46 <main+0x12>
  if ( timeout < 0 )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	da01      	bge.n	8000e66 <main+0x32>
  {
  Error_Handler();
 8000e62:	f000 f90b 	bl	800107c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f002 f859 	bl	8002f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6a:	f000 f861 	bl	8000f30 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f2c <main+0xf8>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	4a2d      	ldr	r2, [pc, #180]	@ (8000f2c <main+0xf8>)
 8000e76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f2c <main+0xf8>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f002 fc5b 	bl	8003748 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e92:	2100      	movs	r1, #0
 8000e94:	2000      	movs	r0, #0
 8000e96:	f002 fc71 	bl	800377c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e9e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ea0:	bf00      	nop
 8000ea2:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <main+0xf8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <main+0x84>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dcf4      	bgt.n	8000ea2 <main+0x6e>
if ( timeout < 0 )
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	da01      	bge.n	8000ec2 <main+0x8e>
{
Error_Handler();
 8000ebe:	f000 f8dd 	bl	800107c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f7ff fc67 	bl	8000794 <MX_GPIO_Init>
  MX_SPI6_Init();
 8000ec6:	f000 fae9 	bl	800149c <MX_SPI6_Init>
  MX_I2C2_Init();
 8000eca:	f7ff fe2b 	bl	8000b24 <MX_I2C2_Init>
  MX_SPI5_Init();
 8000ece:	f000 fa8f 	bl	80013f0 <MX_SPI5_Init>
  MX_TIM16_Init();
 8000ed2:	f000 ffd9 	bl	8001e88 <MX_TIM16_Init>
  MX_SDMMC1_SD_Init();
 8000ed6:	f000 f8d7 	bl	8001088 <MX_SDMMC1_SD_Init>
  MX_SPI4_Init();
 8000eda:	f000 fa33 	bl	8001344 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000ede:	f000 fd5b 	bl	8001998 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ee2:	f000 ff43 	bl	8001d6c <MX_TIM4_Init>
  MX_UART7_Init();
 8000ee6:	f001 fa7b 	bl	80023e0 <MX_UART7_Init>
  MX_UART8_Init();
 8000eea:	f001 fac5 	bl	8002478 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8000eee:	f001 fb5b 	bl	80025a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ef2:	f001 fba7 	bl	8002644 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000ef6:	f7ff fdd5 	bl	8000aa4 <MX_I2C1_Init>
  MX_I2C4_Init();
 8000efa:	f7ff fe53 	bl	8000ba4 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000efe:	f000 f975 	bl	80011ec <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f02:	f000 f9c9 	bl	8001298 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f06:	f000 fe17 	bl	8001b38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f0a:	f000 fe97 	bl	8001c3c <MX_TIM3_Init>
  MX_UART4_Init();
 8000f0e:	f001 f9cf 	bl	80022b0 <MX_UART4_Init>
  MX_UART5_Init();
 8000f12:	f001 fa19 	bl	8002348 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000f16:	f001 fafb 	bl	8002510 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f1a:	f001 ff35 	bl	8002d88 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000f1e:	f001 fbdf 	bl	80026e0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000f22:	f00b fab5 	bl	800c490 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f26:	bf00      	nop
 8000f28:	e7fd      	b.n	8000f26 <main+0xf2>
 8000f2a:	bf00      	nop
 8000f2c:	58024400 	.word	0x58024400

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b09c      	sub	sp, #112	@ 0x70
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	224c      	movs	r2, #76	@ 0x4c
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00b fc9f 	bl	800c882 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2220      	movs	r2, #32
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00b fc99 	bl	800c882 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f002 fe8b 	bl	8003c6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b30      	ldr	r3, [pc, #192]	@ (800101c <SystemClock_Config+0xec>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800101c <SystemClock_Config+0xec>)
 8000f60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f64:	6193      	str	r3, [r2, #24]
 8000f66:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <SystemClock_Config+0xec>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <SystemClock_Config+0xf0>)
 8000f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f74:	4a2a      	ldr	r2, [pc, #168]	@ (8001020 <SystemClock_Config+0xf0>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f7c:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <SystemClock_Config+0xf0>)
 8000f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f88:	bf00      	nop
 8000f8a:	4b24      	ldr	r3, [pc, #144]	@ (800101c <SystemClock_Config+0xec>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f96:	d1f8      	bne.n	8000f8a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000fae:	233c      	movs	r3, #60	@ 0x3c
 8000fb0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 feb6 	bl	8003d40 <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fda:	f000 f84f 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	233f      	movs	r3, #63	@ 0x3f
 8000fe0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fea:	2308      	movs	r3, #8
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fee:	2340      	movs	r3, #64	@ 0x40
 8000ff0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ff2:	2340      	movs	r3, #64	@ 0x40
 8000ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ffa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ffc:	2340      	movs	r3, #64	@ 0x40
 8000ffe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2104      	movs	r1, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f003 faf5 	bl	80045f4 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001010:	f000 f834 	bl	800107c <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3770      	adds	r7, #112	@ 0x70
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	58024800 	.word	0x58024800
 8001020:	58000400 	.word	0x58000400

08001024 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001036:	f002 f92d 	bl	8003294 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800103a:	2301      	movs	r3, #1
 800103c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800103e:	2300      	movs	r3, #0
 8001040:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001046:	231f      	movs	r3, #31
 8001048:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800104a:	2387      	movs	r3, #135	@ 0x87
 800104c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800104e:	2300      	movs	r3, #0
 8001050:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001052:	2300      	movs	r3, #0
 8001054:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001056:	2301      	movs	r3, #1
 8001058:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800105a:	2301      	movs	r3, #1
 800105c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001066:	463b      	mov	r3, r7
 8001068:	4618      	mov	r0, r3
 800106a:	f002 f94b 	bl	8003304 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800106e:	2004      	movs	r0, #4
 8001070:	f002 f928 	bl	80032c4 <HAL_MPU_Enable>

}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <Error_Handler+0x8>

08001088 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800108c:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_SDMMC1_SD_Init+0x40>)
 800108e:	4a0f      	ldr	r2, [pc, #60]	@ (80010cc <MX_SDMMC1_SD_Init+0x44>)
 8001090:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001092:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <MX_SDMMC1_SD_Init+0x40>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_SDMMC1_SD_Init+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <MX_SDMMC1_SD_Init+0x40>)
 80010a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010a4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_SDMMC1_SD_Init+0x40>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_SDMMC1_SD_Init+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_SDMMC1_SD_Init+0x40>)
 80010b4:	f006 fb68 	bl	8007788 <HAL_SD_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80010be:	f7ff ffdd 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	24000128 	.word	0x24000128
 80010cc:	52007000 	.word	0x52007000

080010d0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0be      	sub	sp, #248	@ 0xf8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	22c8      	movs	r2, #200	@ 0xc8
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00b fbc6 	bl	800c882 <memset>
  if(sdHandle->Instance==SDMMC1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a38      	ldr	r2, [pc, #224]	@ (80011dc <HAL_SD_MspInit+0x10c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d169      	bne.n	80011d4 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001100:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800110c:	2300      	movs	r3, #0
 800110e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fdf9 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001120:	f7ff ffac 	bl	800107c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001124:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <HAL_SD_MspInit+0x110>)
 8001126:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800112a:	4a2d      	ldr	r2, [pc, #180]	@ (80011e0 <HAL_SD_MspInit+0x110>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001134:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <HAL_SD_MspInit+0x110>)
 8001136:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800113a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b27      	ldr	r3, [pc, #156]	@ (80011e0 <HAL_SD_MspInit+0x110>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	4a25      	ldr	r2, [pc, #148]	@ (80011e0 <HAL_SD_MspInit+0x110>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001152:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <HAL_SD_MspInit+0x110>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HAL_SD_MspInit+0x110>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HAL_SD_MspInit+0x110>)
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_SD_MspInit+0x110>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800117e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001198:	230c      	movs	r3, #12
 800119a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011a2:	4619      	mov	r1, r3
 80011a4:	480f      	ldr	r0, [pc, #60]	@ (80011e4 <HAL_SD_MspInit+0x114>)
 80011a6:	f002 f8ed 	bl	8003384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011aa:	2304      	movs	r3, #4
 80011ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011c2:	230c      	movs	r3, #12
 80011c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	@ (80011e8 <HAL_SD_MspInit+0x118>)
 80011d0:	f002 f8d8 	bl	8003384 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80011d4:	bf00      	nop
 80011d6:	37f8      	adds	r7, #248	@ 0xf8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	52007000 	.word	0x52007000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58020800 	.word	0x58020800
 80011e8:	58020c00 	.word	0x58020c00

080011ec <MX_SPI1_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <MX_SPI1_Init+0xa4>)
 80011f2:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <MX_SPI1_Init+0xa8>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <MX_SPI1_Init+0xa4>)
 80011f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001204:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001206:	2203      	movs	r2, #3
 8001208:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_SPI1_Init+0xa4>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001218:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800121c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_SPI1_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_SPI1_Init+0xa4>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001242:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_SPI1_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_SPI1_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_SPI1_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_SPI1_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_SPI1_Init+0xa4>)
 800127c:	f007 fe36 	bl	8008eec <HAL_SPI_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001286:	f7ff fef9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	240001a4 	.word	0x240001a4
 8001294:	40013000 	.word	0x40013000

08001298 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800129c:	4b27      	ldr	r3, [pc, #156]	@ (800133c <MX_SPI2_Init+0xa4>)
 800129e:	4a28      	ldr	r2, [pc, #160]	@ (8001340 <MX_SPI2_Init+0xa8>)
 80012a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012aa:	4b24      	ldr	r3, [pc, #144]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012b2:	2207      	movs	r2, #7
 80012b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b6:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012de:	4b17      	ldr	r3, [pc, #92]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012e4:	4b15      	ldr	r3, [pc, #84]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ea:	4b14      	ldr	r3, [pc, #80]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012f8:	4b10      	ldr	r3, [pc, #64]	@ (800133c <MX_SPI2_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_SPI2_Init+0xa4>)
 8001300:	2200      	movs	r2, #0
 8001302:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <MX_SPI2_Init+0xa4>)
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_SPI2_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <MX_SPI2_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_SPI2_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <MX_SPI2_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_SPI2_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_SPI2_Init+0xa4>)
 800132a:	f007 fddf 	bl	8008eec <HAL_SPI_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001334:	f7ff fea2 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2400022c 	.word	0x2400022c
 8001340:	40003800 	.word	0x40003800

08001344 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001348:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 800134a:	4a28      	ldr	r2, [pc, #160]	@ (80013ec <MX_SPI4_Init+0xa8>)
 800134c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 8001350:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001354:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001356:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 800135e:	2203      	movs	r2, #3
 8001360:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001362:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001368:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800136e:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 8001370:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001374:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 800138a:	2200      	movs	r2, #0
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 8001396:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800139a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_SPI4_Init+0xa4>)
 80013d4:	f007 fd8a 	bl	8008eec <HAL_SPI_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80013de:	f7ff fe4d 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	240002b4 	.word	0x240002b4
 80013ec:	40013400 	.word	0x40013400

080013f0 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80013f4:	4b27      	ldr	r3, [pc, #156]	@ (8001494 <MX_SPI5_Init+0xa4>)
 80013f6:	4a28      	ldr	r2, [pc, #160]	@ (8001498 <MX_SPI5_Init+0xa8>)
 80013f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <MX_SPI5_Init+0xa4>)
 80013fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001400:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001402:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <MX_SPI5_Init+0xa4>)
 800140a:	2203      	movs	r2, #3
 800140c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800141a:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <MX_SPI5_Init+0xa4>)
 800141c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001420:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001428:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_SPI5_Init+0xa4>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800142e:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001434:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800143a:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <MX_SPI5_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001442:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001446:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_SPI5_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001456:	2200      	movs	r2, #0
 8001458:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_SPI5_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_SPI5_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_SPI5_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_SPI5_Init+0xa4>)
 8001480:	f007 fd34 	bl	8008eec <HAL_SPI_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 800148a:	f7ff fdf7 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2400033c 	.word	0x2400033c
 8001498:	40015000 	.word	0x40015000

0800149c <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 80014a0:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014a2:	4a28      	ldr	r2, [pc, #160]	@ (8001544 <MX_SPI6_Init+0xa8>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014ac:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 80014b4:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014b6:	2203      	movs	r2, #3
 80014b8:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ba:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014cc:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e0:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_SPI6_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_SPI6_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_SPI6_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_SPI6_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_SPI6_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_SPI6_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MX_SPI6_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_SPI6_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_SPI6_Init+0xa4>)
 800152c:	f007 fcde 	bl	8008eec <HAL_SPI_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8001536:	f7ff fda1 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	240003c4 	.word	0x240003c4
 8001544:	58001400 	.word	0x58001400

08001548 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b0c4      	sub	sp, #272	@ 0x110
 800154c:	af00      	add	r7, sp, #0
 800154e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001552:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001556:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800156c:	22c8      	movs	r2, #200	@ 0xc8
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00b f986 	bl	800c882 <memset>
  if(spiHandle->Instance==SPI1)
 8001576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800157a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4aa2      	ldr	r2, [pc, #648]	@ (800180c <HAL_SPI_MspInit+0x2c4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d146      	bne.n	8001616 <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001588:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fbb4 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 80015aa:	f7ff fd67 	bl	800107c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ae:	4b98      	ldr	r3, [pc, #608]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80015b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015b4:	4a96      	ldr	r2, [pc, #600]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80015b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015be:	4b94      	ldr	r3, [pc, #592]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80015c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b90      	ldr	r3, [pc, #576]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d2:	4a8f      	ldr	r2, [pc, #572]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015dc:	4b8c      	ldr	r3, [pc, #560]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015ea:	2338      	movs	r3, #56	@ 0x38
 80015ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001602:	2305      	movs	r3, #5
 8001604:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800160c:	4619      	mov	r1, r3
 800160e:	4881      	ldr	r0, [pc, #516]	@ (8001814 <HAL_SPI_MspInit+0x2cc>)
 8001610:	f001 feb8 	bl	8003384 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001614:	e16a      	b.n	80018ec <HAL_SPI_MspInit+0x3a4>
  else if(spiHandle->Instance==SPI2)
 8001616:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800161a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7d      	ldr	r2, [pc, #500]	@ (8001818 <HAL_SPI_MspInit+0x2d0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d147      	bne.n	80016b8 <HAL_SPI_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001628:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800163e:	4618      	mov	r0, r3
 8001640:	f003 fb64 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_SPI_MspInit+0x106>
      Error_Handler();
 800164a:	f7ff fd17 	bl	800107c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800164e:	4b70      	ldr	r3, [pc, #448]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001654:	4a6e      	ldr	r2, [pc, #440]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800165e:	4b6c      	ldr	r3, [pc, #432]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b68      	ldr	r3, [pc, #416]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	4a67      	ldr	r2, [pc, #412]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167c:	4b64      	ldr	r3, [pc, #400]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 800168a:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 800168e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a4:	2305      	movs	r3, #5
 80016a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016ae:	4619      	mov	r1, r3
 80016b0:	4858      	ldr	r0, [pc, #352]	@ (8001814 <HAL_SPI_MspInit+0x2cc>)
 80016b2:	f001 fe67 	bl	8003384 <HAL_GPIO_Init>
}
 80016b6:	e119      	b.n	80018ec <HAL_SPI_MspInit+0x3a4>
  else if(spiHandle->Instance==SPI4)
 80016b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a55      	ldr	r2, [pc, #340]	@ (800181c <HAL_SPI_MspInit+0x2d4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d146      	bne.n	8001758 <HAL_SPI_MspInit+0x210>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80016ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fb13 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_SPI_MspInit+0x1a8>
      Error_Handler();
 80016ec:	f7ff fcc6 	bl	800107c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016f0:	4b47      	ldr	r3, [pc, #284]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80016f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016f6:	4a46      	ldr	r2, [pc, #280]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80016f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001700:	4b43      	ldr	r3, [pc, #268]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	4b40      	ldr	r3, [pc, #256]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	4a3e      	ldr	r2, [pc, #248]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171e:	4b3c      	ldr	r3, [pc, #240]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IMU3_SCK_Pin|IMU3_MISO_Pin|IMU3_MOSI_Pin;
 800172c:	2364      	movs	r3, #100	@ 0x64
 800172e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001744:	2305      	movs	r3, #5
 8001746:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800174e:	4619      	mov	r1, r3
 8001750:	4833      	ldr	r0, [pc, #204]	@ (8001820 <HAL_SPI_MspInit+0x2d8>)
 8001752:	f001 fe17 	bl	8003384 <HAL_GPIO_Init>
}
 8001756:	e0c9      	b.n	80018ec <HAL_SPI_MspInit+0x3a4>
  else if(spiHandle->Instance==SPI5)
 8001758:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800175c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a2f      	ldr	r2, [pc, #188]	@ (8001824 <HAL_SPI_MspInit+0x2dc>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d160      	bne.n	800182c <HAL_SPI_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800176a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001780:	4618      	mov	r0, r3
 8001782:	f003 fac3 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_SPI_MspInit+0x248>
      Error_Handler();
 800178c:	f7ff fc76 	bl	800107c <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001790:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001796:	4a1e      	ldr	r2, [pc, #120]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 8001798:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800179c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80017a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ae:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b4:	4a16      	ldr	r2, [pc, #88]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <HAL_SPI_MspInit+0x2c8>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c4:	f003 0220 	and.w	r2, r3, #32
 80017c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017da:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = IMU1_SCK_Pin|IMU1_MISO_Pin|IMU1_MOSI_Pin;
 80017dc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80017e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017f6:	2305      	movs	r3, #5
 80017f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017fc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001800:	4619      	mov	r1, r3
 8001802:	4809      	ldr	r0, [pc, #36]	@ (8001828 <HAL_SPI_MspInit+0x2e0>)
 8001804:	f001 fdbe 	bl	8003384 <HAL_GPIO_Init>
}
 8001808:	e070      	b.n	80018ec <HAL_SPI_MspInit+0x3a4>
 800180a:	bf00      	nop
 800180c:	40013000 	.word	0x40013000
 8001810:	58024400 	.word	0x58024400
 8001814:	58020400 	.word	0x58020400
 8001818:	40003800 	.word	0x40003800
 800181c:	40013400 	.word	0x40013400
 8001820:	58021000 	.word	0x58021000
 8001824:	40015000 	.word	0x40015000
 8001828:	58021400 	.word	0x58021400
  else if(spiHandle->Instance==SPI6)
 800182c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001830:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a2f      	ldr	r2, [pc, #188]	@ (80018f8 <HAL_SPI_MspInit+0x3b0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d156      	bne.n	80018ec <HAL_SPI_MspInit+0x3a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800183e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001850:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001854:	4618      	mov	r0, r3
 8001856:	f003 fa59 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_SPI_MspInit+0x31c>
      Error_Handler();
 8001860:	f7ff fc0c 	bl	800107c <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001864:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <HAL_SPI_MspInit+0x3b4>)
 8001866:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800186a:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <HAL_SPI_MspInit+0x3b4>)
 800186c:	f043 0320 	orr.w	r3, r3, #32
 8001870:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001874:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <HAL_SPI_MspInit+0x3b4>)
 8001876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800187a:	f003 0220 	and.w	r2, r3, #32
 800187e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800188c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001890:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001892:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <HAL_SPI_MspInit+0x3b4>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001898:	4a18      	ldr	r2, [pc, #96]	@ (80018fc <HAL_SPI_MspInit+0x3b4>)
 800189a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800189e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <HAL_SPI_MspInit+0x3b4>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a8:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80018ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018be:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80018c0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80018c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80018da:	2305      	movs	r3, #5
 80018dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018e0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	@ (8001900 <HAL_SPI_MspInit+0x3b8>)
 80018e8:	f001 fd4c 	bl	8003384 <HAL_GPIO_Init>
}
 80018ec:	bf00      	nop
 80018ee:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	58001400 	.word	0x58001400
 80018fc:	58024400 	.word	0x58024400
 8001900:	58021800 	.word	0x58021800

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_MspInit+0x30>)
 800190c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001910:	4a08      	ldr	r2, [pc, #32]	@ (8001934 <HAL_MspInit+0x30>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_MspInit+0x30>)
 800191c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	58024400 	.word	0x58024400

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <NMI_Handler+0x4>

08001940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <MemManage_Handler+0x4>

08001950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <UsageFault_Handler+0x4>

08001960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198e:	f001 fb37 	bl	8003000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b09a      	sub	sp, #104	@ 0x68
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	615a      	str	r2, [r3, #20]
 80019ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	222c      	movs	r2, #44	@ 0x2c
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00a ff55 	bl	800c882 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019d8:	4b55      	ldr	r3, [pc, #340]	@ (8001b30 <MX_TIM1_Init+0x198>)
 80019da:	4a56      	ldr	r2, [pc, #344]	@ (8001b34 <MX_TIM1_Init+0x19c>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019de:	4b54      	ldr	r3, [pc, #336]	@ (8001b30 <MX_TIM1_Init+0x198>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e4:	4b52      	ldr	r3, [pc, #328]	@ (8001b30 <MX_TIM1_Init+0x198>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019ea:	4b51      	ldr	r3, [pc, #324]	@ (8001b30 <MX_TIM1_Init+0x198>)
 80019ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001b30 <MX_TIM1_Init+0x198>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001b30 <MX_TIM1_Init+0x198>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a04:	484a      	ldr	r0, [pc, #296]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001a06:	f007 fbb0 	bl	800916a <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a10:	f7ff fb34 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a18:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a1a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4843      	ldr	r0, [pc, #268]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001a22:	f007 fd6f 	bl	8009504 <HAL_TIM_ConfigClockSource>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a2c:	f7ff fb26 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a30:	483f      	ldr	r0, [pc, #252]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001a32:	f007 fbf1 	bl	8009218 <HAL_TIM_PWM_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a3c:	f7ff fb1e 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a50:	4619      	mov	r1, r3
 8001a52:	4837      	ldr	r0, [pc, #220]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001a54:	f008 fa62 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a5e:	f7ff fb0d 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a62:	2360      	movs	r3, #96	@ 0x60
 8001a64:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a82:	2200      	movs	r2, #0
 8001a84:	4619      	mov	r1, r3
 8001a86:	482a      	ldr	r0, [pc, #168]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001a88:	f007 fc28 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a92:	f7ff faf3 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4824      	ldr	r0, [pc, #144]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001aa0:	f007 fc1c 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001aaa:	f7ff fae7 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481e      	ldr	r0, [pc, #120]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001ab8:	f007 fc10 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001ac2:	f7ff fadb 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ac6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aca:	220c      	movs	r2, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4818      	ldr	r0, [pc, #96]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001ad0:	f007 fc04 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001ada:	f7ff facf 	bl	800107c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001af2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4807      	ldr	r0, [pc, #28]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001b14:	f008 fa90 	bl	800a038 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001b1e:	f7ff faad 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b22:	4803      	ldr	r0, [pc, #12]	@ (8001b30 <MX_TIM1_Init+0x198>)
 8001b24:	f000 faa6 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001b28:	bf00      	nop
 8001b2a:	3768      	adds	r7, #104	@ 0x68
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2400044c 	.word	0x2400044c
 8001b34:	40010000 	.word	0x40010000

08001b38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08e      	sub	sp, #56	@ 0x38
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b58:	463b      	mov	r3, r7
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b6a:	4b33      	ldr	r3, [pc, #204]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001b6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b72:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b2f      	ldr	r3, [pc, #188]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b2c      	ldr	r3, [pc, #176]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b92:	4829      	ldr	r0, [pc, #164]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001b94:	f007 fae9 	bl	800916a <HAL_TIM_Base_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b9e:	f7ff fa6d 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bac:	4619      	mov	r1, r3
 8001bae:	4822      	ldr	r0, [pc, #136]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001bb0:	f007 fca8 	bl	8009504 <HAL_TIM_ConfigClockSource>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001bba:	f7ff fa5f 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bbe:	481e      	ldr	r0, [pc, #120]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001bc0:	f007 fb2a 	bl	8009218 <HAL_TIM_PWM_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001bca:	f7ff fa57 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4816      	ldr	r0, [pc, #88]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001bde:	f008 f99d 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001be8:	f7ff fa48 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bec:	2360      	movs	r3, #96	@ 0x60
 8001bee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4619      	mov	r1, r3
 8001c02:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001c04:	f007 fb6a 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001c0e:	f7ff fa35 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c12:	463b      	mov	r3, r7
 8001c14:	220c      	movs	r2, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001c1a:	f007 fb5f 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001c24:	f7ff fa2a 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c28:	4803      	ldr	r0, [pc, #12]	@ (8001c38 <MX_TIM2_Init+0x100>)
 8001c2a:	f000 fa23 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001c2e:	bf00      	nop
 8001c30:	3738      	adds	r7, #56	@ 0x38
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	24000498 	.word	0x24000498

08001c3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08e      	sub	sp, #56	@ 0x38
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001c70:	4a3d      	ldr	r2, [pc, #244]	@ (8001d68 <MX_TIM3_Init+0x12c>)
 8001c72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c74:	4b3b      	ldr	r3, [pc, #236]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c80:	4b38      	ldr	r3, [pc, #224]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8e:	4b35      	ldr	r3, [pc, #212]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c94:	4833      	ldr	r0, [pc, #204]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001c96:	f007 fa68 	bl	800916a <HAL_TIM_Base_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ca0:	f7ff f9ec 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001caa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	482c      	ldr	r0, [pc, #176]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001cb2:	f007 fc27 	bl	8009504 <HAL_TIM_ConfigClockSource>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001cbc:	f7ff f9de 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cc0:	4828      	ldr	r0, [pc, #160]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001cc2:	f007 faa9 	bl	8009218 <HAL_TIM_PWM_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ccc:	f7ff f9d6 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4821      	ldr	r0, [pc, #132]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001ce0:	f008 f91c 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cea:	f7ff f9c7 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cee:	2360      	movs	r3, #96	@ 0x60
 8001cf0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	4619      	mov	r1, r3
 8001d04:	4817      	ldr	r0, [pc, #92]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001d06:	f007 fae9 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d10:	f7ff f9b4 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d14:	463b      	mov	r3, r7
 8001d16:	2204      	movs	r2, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4812      	ldr	r0, [pc, #72]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001d1c:	f007 fade 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001d26:	f7ff f9a9 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480c      	ldr	r0, [pc, #48]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001d32:	f007 fad3 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001d3c:	f7ff f99e 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	220c      	movs	r2, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	4807      	ldr	r0, [pc, #28]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001d48:	f007 fac8 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001d52:	f7ff f993 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d56:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <MX_TIM3_Init+0x128>)
 8001d58:	f000 f98c 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001d5c:	bf00      	nop
 8001d5e:	3738      	adds	r7, #56	@ 0x38
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	240004e4 	.word	0x240004e4
 8001d68:	40000400 	.word	0x40000400

08001d6c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	@ 0x38
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	615a      	str	r2, [r3, #20]
 8001d9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d9e:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001da0:	4a38      	ldr	r2, [pc, #224]	@ (8001e84 <MX_TIM4_Init+0x118>)
 8001da2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001da4:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001daa:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001db0:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001db2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001db6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	4b31      	ldr	r3, [pc, #196]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b30      	ldr	r3, [pc, #192]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dc4:	482e      	ldr	r0, [pc, #184]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001dc6:	f007 f9d0 	bl	800916a <HAL_TIM_Base_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001dd0:	f7ff f954 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dde:	4619      	mov	r1, r3
 8001de0:	4827      	ldr	r0, [pc, #156]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001de2:	f007 fb8f 	bl	8009504 <HAL_TIM_ConfigClockSource>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001dec:	f7ff f946 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001df0:	4823      	ldr	r0, [pc, #140]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001df2:	f007 fa11 	bl	8009218 <HAL_TIM_PWM_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001dfc:	f7ff f93e 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481c      	ldr	r0, [pc, #112]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001e10:	f008 f884 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001e1a:	f7ff f92f 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1e:	2360      	movs	r3, #96	@ 0x60
 8001e20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e2e:	463b      	mov	r3, r7
 8001e30:	2204      	movs	r2, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4812      	ldr	r0, [pc, #72]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001e36:	f007 fa51 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001e40:	f7ff f91c 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e44:	463b      	mov	r3, r7
 8001e46:	2208      	movs	r2, #8
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480d      	ldr	r0, [pc, #52]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001e4c:	f007 fa46 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001e56:	f7ff f911 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	220c      	movs	r2, #12
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4807      	ldr	r0, [pc, #28]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001e62:	f007 fa3b 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001e6c:	f7ff f906 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e70:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <MX_TIM4_Init+0x114>)
 8001e72:	f000 f8ff 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001e76:	bf00      	nop
 8001e78:	3738      	adds	r7, #56	@ 0x38
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	24000530 	.word	0x24000530
 8001e84:	40000800 	.word	0x40000800

08001e88 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b092      	sub	sp, #72	@ 0x48
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	615a      	str	r2, [r3, #20]
 8001ea0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	222c      	movs	r2, #44	@ 0x2c
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f00a fcea 	bl	800c882 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001eae:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001eb0:	4a31      	ldr	r2, [pc, #196]	@ (8001f78 <MX_TIM16_Init+0xf0>)
 8001eb2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b2e      	ldr	r3, [pc, #184]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001ec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ece:	4b29      	ldr	r3, [pc, #164]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed4:	4b27      	ldr	r3, [pc, #156]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001eda:	4826      	ldr	r0, [pc, #152]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001edc:	f007 f945 	bl	800916a <HAL_TIM_Base_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001ee6:	f7ff f8c9 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001eea:	4822      	ldr	r0, [pc, #136]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001eec:	f007 f994 	bl	8009218 <HAL_TIM_PWM_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001ef6:	f7ff f8c1 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efa:	2360      	movs	r3, #96	@ 0x60
 8001efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f02:	2300      	movs	r3, #0
 8001f04:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f06:	2300      	movs	r3, #0
 8001f08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4815      	ldr	r0, [pc, #84]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001f20:	f007 f9dc 	bl	80092dc <HAL_TIM_PWM_ConfigChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001f2a:	f7ff f8a7 	bl	800107c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001f50:	463b      	mov	r3, r7
 8001f52:	4619      	mov	r1, r3
 8001f54:	4807      	ldr	r0, [pc, #28]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001f56:	f008 f86f 	bl	800a038 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001f60:	f7ff f88c 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001f64:	4803      	ldr	r0, [pc, #12]	@ (8001f74 <MX_TIM16_Init+0xec>)
 8001f66:	f000 f885 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001f6a:	bf00      	nop
 8001f6c:	3748      	adds	r7, #72	@ 0x48
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2400057c 	.word	0x2400057c
 8001f78:	40014400 	.word	0x40014400

08001f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a35      	ldr	r2, [pc, #212]	@ (8002060 <HAL_TIM_Base_MspInit+0xe4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10f      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f8e:	4b35      	ldr	r3, [pc, #212]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8001f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f94:	4a33      	ldr	r2, [pc, #204]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f9e:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8001fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001fac:	e052      	b.n	8002054 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8001fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fbe:	4a29      	ldr	r2, [pc, #164]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fc8:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8001fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
}
 8001fd6:	e03d      	b.n	8002054 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM3)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_TIM_Base_MspInit+0xec>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10f      	bne.n	8002002 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe2:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8001fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8001ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697b      	ldr	r3, [r7, #20]
}
 8002000:	e028      	b.n	8002054 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_TIM_Base_MspInit+0xf0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d10f      	bne.n	800202c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800200c:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 800200e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002012:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 800201e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
}
 800202a:	e013      	b.n	8002054 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM16)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0f      	ldr	r2, [pc, #60]	@ (8002070 <HAL_TIM_Base_MspInit+0xf4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8002038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800203c:	4a09      	ldr	r2, [pc, #36]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 800203e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002042:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002046:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <HAL_TIM_Base_MspInit+0xe8>)
 8002048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	bf00      	nop
 8002056:	3724      	adds	r7, #36	@ 0x24
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40010000 	.word	0x40010000
 8002064:	58024400 	.word	0x58024400
 8002068:	40000400 	.word	0x40000400
 800206c:	40000800 	.word	0x40000800
 8002070:	40014400 	.word	0x40014400

08002074 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	@ 0x38
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a7d      	ldr	r2, [pc, #500]	@ (8002288 <HAL_TIM_MspPostInit+0x214>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d120      	bne.n	80020d8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002096:	4b7d      	ldr	r3, [pc, #500]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209c:	4a7b      	ldr	r2, [pc, #492]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a6:	4b79      	ldr	r3, [pc, #484]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80020b4:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	486f      	ldr	r0, [pc, #444]	@ (8002290 <HAL_TIM_MspPostInit+0x21c>)
 80020d2:	f001 f957 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80020d6:	e0d2      	b.n	800227e <HAL_TIM_MspPostInit+0x20a>
  else if(timHandle->Instance==TIM2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e0:	d13f      	bne.n	8002162 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	4b6a      	ldr	r3, [pc, #424]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e8:	4a68      	ldr	r2, [pc, #416]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f2:	4b66      	ldr	r3, [pc, #408]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	4b62      	ldr	r3, [pc, #392]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002106:	4a61      	ldr	r2, [pc, #388]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002110:	4b5e      	ldr	r3, [pc, #376]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800211e:	2320      	movs	r3, #32
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800212e:	2301      	movs	r3, #1
 8002130:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002136:	4619      	mov	r1, r3
 8002138:	4856      	ldr	r0, [pc, #344]	@ (8002294 <HAL_TIM_MspPostInit+0x220>)
 800213a:	f001 f923 	bl	8003384 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_LS_10_Pin;
 800213e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002150:	2301      	movs	r3, #1
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PWM_LS_10_GPIO_Port, &GPIO_InitStruct);
 8002154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002158:	4619      	mov	r1, r3
 800215a:	484f      	ldr	r0, [pc, #316]	@ (8002298 <HAL_TIM_MspPostInit+0x224>)
 800215c:	f001 f912 	bl	8003384 <HAL_GPIO_Init>
}
 8002160:	e08d      	b.n	800227e <HAL_TIM_MspPostInit+0x20a>
  else if(timHandle->Instance==TIM3)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a4d      	ldr	r2, [pc, #308]	@ (800229c <HAL_TIM_MspPostInit+0x228>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d13e      	bne.n	80021ea <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	4b47      	ldr	r3, [pc, #284]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 800216e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002172:	4a46      	ldr	r2, [pc, #280]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800217c:	4b43      	ldr	r3, [pc, #268]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	4b40      	ldr	r3, [pc, #256]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 800218c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002190:	4a3e      	ldr	r2, [pc, #248]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800219a:	4b3c      	ldr	r3, [pc, #240]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021a8:	23c0      	movs	r3, #192	@ 0xc0
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b8:	2302      	movs	r3, #2
 80021ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c0:	4619      	mov	r1, r3
 80021c2:	4834      	ldr	r0, [pc, #208]	@ (8002294 <HAL_TIM_MspPostInit+0x220>)
 80021c4:	f001 f8de 	bl	8003384 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021c8:	2303      	movs	r3, #3
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d8:	2302      	movs	r3, #2
 80021da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e0:	4619      	mov	r1, r3
 80021e2:	482d      	ldr	r0, [pc, #180]	@ (8002298 <HAL_TIM_MspPostInit+0x224>)
 80021e4:	f001 f8ce 	bl	8003384 <HAL_GPIO_Init>
}
 80021e8:	e049      	b.n	800227e <HAL_TIM_MspPostInit+0x20a>
  else if(timHandle->Instance==TIM4)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a2c      	ldr	r2, [pc, #176]	@ (80022a0 <HAL_TIM_MspPostInit+0x22c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d120      	bne.n	8002236 <HAL_TIM_MspPostInit+0x1c2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f4:	4b25      	ldr	r3, [pc, #148]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fa:	4a24      	ldr	r2, [pc, #144]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002204:	4b21      	ldr	r3, [pc, #132]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002212:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002224:	2302      	movs	r3, #2
 8002226:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800222c:	4619      	mov	r1, r3
 800222e:	481d      	ldr	r0, [pc, #116]	@ (80022a4 <HAL_TIM_MspPostInit+0x230>)
 8002230:	f001 f8a8 	bl	8003384 <HAL_GPIO_Init>
}
 8002234:	e023      	b.n	800227e <HAL_TIM_MspPostInit+0x20a>
  else if(timHandle->Instance==TIM16)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1b      	ldr	r2, [pc, #108]	@ (80022a8 <HAL_TIM_MspPostInit+0x234>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d11e      	bne.n	800227e <HAL_TIM_MspPostInit+0x20a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002246:	4a11      	ldr	r2, [pc, #68]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002248:	f043 0320 	orr.w	r3, r3, #32
 800224c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002250:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <HAL_TIM_MspPostInit+0x218>)
 8002252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_LS_16_Pin;
 800225e:	2340      	movs	r3, #64	@ 0x40
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800226e:	2301      	movs	r3, #1
 8002270:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PWM_LS_16_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002276:	4619      	mov	r1, r3
 8002278:	480c      	ldr	r0, [pc, #48]	@ (80022ac <HAL_TIM_MspPostInit+0x238>)
 800227a:	f001 f883 	bl	8003384 <HAL_GPIO_Init>
}
 800227e:	bf00      	nop
 8002280:	3738      	adds	r7, #56	@ 0x38
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40010000 	.word	0x40010000
 800228c:	58024400 	.word	0x58024400
 8002290:	58021000 	.word	0x58021000
 8002294:	58020000 	.word	0x58020000
 8002298:	58020400 	.word	0x58020400
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	58020c00 	.word	0x58020c00
 80022a8:	40014400 	.word	0x40014400
 80022ac:	58021400 	.word	0x58021400

080022b0 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <MX_UART4_Init+0x90>)
 80022b6:	4a23      	ldr	r2, [pc, #140]	@ (8002344 <MX_UART4_Init+0x94>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <MX_UART4_Init+0x90>)
 80022bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <MX_UART4_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <MX_UART4_Init+0x90>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <MX_UART4_Init+0x90>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <MX_UART4_Init+0x90>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <MX_UART4_Init+0x90>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <MX_UART4_Init+0x90>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <MX_UART4_Init+0x90>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <MX_UART4_Init+0x90>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <MX_UART4_Init+0x90>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022f8:	4811      	ldr	r0, [pc, #68]	@ (8002340 <MX_UART4_Init+0x90>)
 80022fa:	f007 ff1b 	bl	800a134 <HAL_UART_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002304:	f7fe feba 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002308:	2100      	movs	r1, #0
 800230a:	480d      	ldr	r0, [pc, #52]	@ (8002340 <MX_UART4_Init+0x90>)
 800230c:	f008 ff23 	bl	800b156 <HAL_UARTEx_SetTxFifoThreshold>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002316:	f7fe feb1 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231a:	2100      	movs	r1, #0
 800231c:	4808      	ldr	r0, [pc, #32]	@ (8002340 <MX_UART4_Init+0x90>)
 800231e:	f008 ff58 	bl	800b1d2 <HAL_UARTEx_SetRxFifoThreshold>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002328:	f7fe fea8 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800232c:	4804      	ldr	r0, [pc, #16]	@ (8002340 <MX_UART4_Init+0x90>)
 800232e:	f008 fed9 	bl	800b0e4 <HAL_UARTEx_DisableFifoMode>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002338:	f7fe fea0 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	240005c8 	.word	0x240005c8
 8002344:	40004c00 	.word	0x40004c00

08002348 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800234c:	4b22      	ldr	r3, [pc, #136]	@ (80023d8 <MX_UART5_Init+0x90>)
 800234e:	4a23      	ldr	r2, [pc, #140]	@ (80023dc <MX_UART5_Init+0x94>)
 8002350:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002352:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <MX_UART5_Init+0x90>)
 8002354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002358:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800235a:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <MX_UART5_Init+0x90>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002360:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <MX_UART5_Init+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002366:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <MX_UART5_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <MX_UART5_Init+0x90>)
 800236e:	220c      	movs	r2, #12
 8002370:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <MX_UART5_Init+0x90>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002378:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <MX_UART5_Init+0x90>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <MX_UART5_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <MX_UART5_Init+0x90>)
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <MX_UART5_Init+0x90>)
 800238c:	2200      	movs	r2, #0
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002390:	4811      	ldr	r0, [pc, #68]	@ (80023d8 <MX_UART5_Init+0x90>)
 8002392:	f007 fecf 	bl	800a134 <HAL_UART_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800239c:	f7fe fe6e 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a0:	2100      	movs	r1, #0
 80023a2:	480d      	ldr	r0, [pc, #52]	@ (80023d8 <MX_UART5_Init+0x90>)
 80023a4:	f008 fed7 	bl	800b156 <HAL_UARTEx_SetTxFifoThreshold>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80023ae:	f7fe fe65 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b2:	2100      	movs	r1, #0
 80023b4:	4808      	ldr	r0, [pc, #32]	@ (80023d8 <MX_UART5_Init+0x90>)
 80023b6:	f008 ff0c 	bl	800b1d2 <HAL_UARTEx_SetRxFifoThreshold>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80023c0:	f7fe fe5c 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80023c4:	4804      	ldr	r0, [pc, #16]	@ (80023d8 <MX_UART5_Init+0x90>)
 80023c6:	f008 fe8d 	bl	800b0e4 <HAL_UARTEx_DisableFifoMode>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80023d0:	f7fe fe54 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	2400065c 	.word	0x2400065c
 80023dc:	40005000 	.word	0x40005000

080023e0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <MX_UART7_Init+0x90>)
 80023e6:	4a23      	ldr	r2, [pc, #140]	@ (8002474 <MX_UART7_Init+0x94>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80023ea:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <MX_UART7_Init+0x90>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <MX_UART7_Init+0x90>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <MX_UART7_Init+0x90>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <MX_UART7_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <MX_UART7_Init+0x90>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <MX_UART7_Init+0x90>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <MX_UART7_Init+0x90>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <MX_UART7_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <MX_UART7_Init+0x90>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <MX_UART7_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002428:	4811      	ldr	r0, [pc, #68]	@ (8002470 <MX_UART7_Init+0x90>)
 800242a:	f007 fe83 	bl	800a134 <HAL_UART_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002434:	f7fe fe22 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002438:	2100      	movs	r1, #0
 800243a:	480d      	ldr	r0, [pc, #52]	@ (8002470 <MX_UART7_Init+0x90>)
 800243c:	f008 fe8b 	bl	800b156 <HAL_UARTEx_SetTxFifoThreshold>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002446:	f7fe fe19 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800244a:	2100      	movs	r1, #0
 800244c:	4808      	ldr	r0, [pc, #32]	@ (8002470 <MX_UART7_Init+0x90>)
 800244e:	f008 fec0 	bl	800b1d2 <HAL_UARTEx_SetRxFifoThreshold>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002458:	f7fe fe10 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800245c:	4804      	ldr	r0, [pc, #16]	@ (8002470 <MX_UART7_Init+0x90>)
 800245e:	f008 fe41 	bl	800b0e4 <HAL_UARTEx_DisableFifoMode>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002468:	f7fe fe08 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	240006f0 	.word	0x240006f0
 8002474:	40007800 	.word	0x40007800

08002478 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800247c:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <MX_UART8_Init+0x90>)
 800247e:	4a23      	ldr	r2, [pc, #140]	@ (800250c <MX_UART8_Init+0x94>)
 8002480:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002482:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <MX_UART8_Init+0x90>)
 8002484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002488:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <MX_UART8_Init+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <MX_UART8_Init+0x90>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <MX_UART8_Init+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <MX_UART8_Init+0x90>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <MX_UART8_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <MX_UART8_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <MX_UART8_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <MX_UART8_Init+0x90>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <MX_UART8_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80024c0:	4811      	ldr	r0, [pc, #68]	@ (8002508 <MX_UART8_Init+0x90>)
 80024c2:	f007 fe37 	bl	800a134 <HAL_UART_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80024cc:	f7fe fdd6 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d0:	2100      	movs	r1, #0
 80024d2:	480d      	ldr	r0, [pc, #52]	@ (8002508 <MX_UART8_Init+0x90>)
 80024d4:	f008 fe3f 	bl	800b156 <HAL_UARTEx_SetTxFifoThreshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80024de:	f7fe fdcd 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4808      	ldr	r0, [pc, #32]	@ (8002508 <MX_UART8_Init+0x90>)
 80024e6:	f008 fe74 	bl	800b1d2 <HAL_UARTEx_SetRxFifoThreshold>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80024f0:	f7fe fdc4 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	@ (8002508 <MX_UART8_Init+0x90>)
 80024f6:	f008 fdf5 	bl	800b0e4 <HAL_UARTEx_DisableFifoMode>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002500:	f7fe fdbc 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	24000784 	.word	0x24000784
 800250c:	40007c00 	.word	0x40007c00

08002510 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 8002516:	4a23      	ldr	r2, [pc, #140]	@ (80025a4 <MX_USART1_UART_Init+0x94>)
 8002518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800251a:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800252e:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002546:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800254c:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 800254e:	2200      	movs	r2, #0
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002552:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002558:	4811      	ldr	r0, [pc, #68]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 800255a:	f007 fdeb 	bl	800a134 <HAL_UART_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002564:	f7fe fd8a 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002568:	2100      	movs	r1, #0
 800256a:	480d      	ldr	r0, [pc, #52]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 800256c:	f008 fdf3 	bl	800b156 <HAL_UARTEx_SetTxFifoThreshold>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002576:	f7fe fd81 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800257a:	2100      	movs	r1, #0
 800257c:	4808      	ldr	r0, [pc, #32]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 800257e:	f008 fe28 	bl	800b1d2 <HAL_UARTEx_SetRxFifoThreshold>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002588:	f7fe fd78 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800258c:	4804      	ldr	r0, [pc, #16]	@ (80025a0 <MX_USART1_UART_Init+0x90>)
 800258e:	f008 fda9 	bl	800b0e4 <HAL_UARTEx_DisableFifoMode>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002598:	f7fe fd70 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	24000818 	.word	0x24000818
 80025a4:	40011000 	.word	0x40011000

080025a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025ae:	4a24      	ldr	r2, [pc, #144]	@ (8002640 <MX_USART2_UART_Init+0x98>)
 80025b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025b2:	4b22      	ldr	r3, [pc, #136]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ba:	4b20      	ldr	r3, [pc, #128]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c0:	4b1e      	ldr	r3, [pc, #120]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025c6:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025ce:	220c      	movs	r2, #12
 80025d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025d4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80025d8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025da:	4b18      	ldr	r3, [pc, #96]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025dc:	2200      	movs	r2, #0
 80025de:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e0:	4b16      	ldr	r3, [pc, #88]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025e6:	4b15      	ldr	r3, [pc, #84]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ec:	4b13      	ldr	r3, [pc, #76]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025f2:	4812      	ldr	r0, [pc, #72]	@ (800263c <MX_USART2_UART_Init+0x94>)
 80025f4:	f007 fd9e 	bl	800a134 <HAL_UART_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80025fe:	f7fe fd3d 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002602:	2100      	movs	r1, #0
 8002604:	480d      	ldr	r0, [pc, #52]	@ (800263c <MX_USART2_UART_Init+0x94>)
 8002606:	f008 fda6 	bl	800b156 <HAL_UARTEx_SetTxFifoThreshold>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002610:	f7fe fd34 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002614:	2100      	movs	r1, #0
 8002616:	4809      	ldr	r0, [pc, #36]	@ (800263c <MX_USART2_UART_Init+0x94>)
 8002618:	f008 fddb 	bl	800b1d2 <HAL_UARTEx_SetRxFifoThreshold>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002622:	f7fe fd2b 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	@ (800263c <MX_USART2_UART_Init+0x94>)
 8002628:	f008 fd5c 	bl	800b0e4 <HAL_UARTEx_DisableFifoMode>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002632:	f7fe fd23 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	240008ac 	.word	0x240008ac
 8002640:	40004400 	.word	0x40004400

08002644 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002648:	4b23      	ldr	r3, [pc, #140]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 800264a:	4a24      	ldr	r2, [pc, #144]	@ (80026dc <MX_USART3_UART_Init+0x98>)
 800264c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800264e:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 8002650:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002662:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 8002670:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002674:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002676:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 8002678:	2200      	movs	r2, #0
 800267a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267c:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002682:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 8002684:	2200      	movs	r2, #0
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002688:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 800268a:	2200      	movs	r2, #0
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800268e:	4812      	ldr	r0, [pc, #72]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 8002690:	f007 fd50 	bl	800a134 <HAL_UART_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 800269a:	f7fe fcef 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800269e:	2100      	movs	r1, #0
 80026a0:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 80026a2:	f008 fd58 	bl	800b156 <HAL_UARTEx_SetTxFifoThreshold>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80026ac:	f7fe fce6 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026b0:	2100      	movs	r1, #0
 80026b2:	4809      	ldr	r0, [pc, #36]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 80026b4:	f008 fd8d 	bl	800b1d2 <HAL_UARTEx_SetRxFifoThreshold>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 80026be:	f7fe fcdd 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026c2:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <MX_USART3_UART_Init+0x94>)
 80026c4:	f008 fd0e 	bl	800b0e4 <HAL_UARTEx_DisableFifoMode>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 80026ce:	f7fe fcd5 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	24000940 	.word	0x24000940
 80026dc:	40004800 	.word	0x40004800

080026e0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026e4:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 80026e6:	4a23      	ldr	r2, [pc, #140]	@ (8002774 <MX_USART6_UART_Init+0x94>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026ea:	4b21      	ldr	r3, [pc, #132]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 80026ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002716:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 8002724:	2200      	movs	r2, #0
 8002726:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002728:	4811      	ldr	r0, [pc, #68]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 800272a:	f007 fd03 	bl	800a134 <HAL_UART_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002734:	f7fe fca2 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002738:	2100      	movs	r1, #0
 800273a:	480d      	ldr	r0, [pc, #52]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 800273c:	f008 fd0b 	bl	800b156 <HAL_UARTEx_SetTxFifoThreshold>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002746:	f7fe fc99 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800274a:	2100      	movs	r1, #0
 800274c:	4808      	ldr	r0, [pc, #32]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 800274e:	f008 fd40 	bl	800b1d2 <HAL_UARTEx_SetRxFifoThreshold>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002758:	f7fe fc90 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800275c:	4804      	ldr	r0, [pc, #16]	@ (8002770 <MX_USART6_UART_Init+0x90>)
 800275e:	f008 fcc1 	bl	800b0e4 <HAL_UARTEx_DisableFifoMode>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002768:	f7fe fc88 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	240009d4 	.word	0x240009d4
 8002774:	40011400 	.word	0x40011400

08002778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0ca      	sub	sp, #296	@ 0x128
 800277c:	af00      	add	r7, sp, #0
 800277e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002782:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002786:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002798:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800279c:	22c8      	movs	r2, #200	@ 0xc8
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00a f86e 	bl	800c882 <memset>
  if(uartHandle->Instance==UART4)
 80027a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80027aa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4aa2      	ldr	r2, [pc, #648]	@ (8002a3c <HAL_UART_MspInit+0x2c4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d146      	bne.n	8002846 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027b8:	f04f 0202 	mov.w	r2, #2
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fa9c 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80027da:	f7fe fc4f 	bl	800107c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027de:	4b98      	ldr	r3, [pc, #608]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80027e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027e4:	4a96      	ldr	r2, [pc, #600]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80027e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80027ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027ee:	4b94      	ldr	r3, [pc, #592]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80027f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80027fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fc:	4b90      	ldr	r3, [pc, #576]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80027fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002802:	4a8f      	ldr	r2, [pc, #572]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800280c:	4b8c      	ldr	r3, [pc, #560]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 800280e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	643b      	str	r3, [r7, #64]	@ 0x40
 8002818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800281a:	2303      	movs	r3, #3
 800281c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002832:	2308      	movs	r3, #8
 8002834:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800283c:	4619      	mov	r1, r3
 800283e:	4881      	ldr	r0, [pc, #516]	@ (8002a44 <HAL_UART_MspInit+0x2cc>)
 8002840:	f000 fda0 	bl	8003384 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002844:	e28b      	b.n	8002d5e <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==UART5)
 8002846:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800284a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7d      	ldr	r2, [pc, #500]	@ (8002a48 <HAL_UART_MspInit+0x2d0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d147      	bne.n	80028e8 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002858:	f04f 0202 	mov.w	r2, #2
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800286a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fa4c 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_UART_MspInit+0x106>
      Error_Handler();
 800287a:	f7fe fbff 	bl	800107c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800287e:	4b70      	ldr	r3, [pc, #448]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002884:	4a6e      	ldr	r2, [pc, #440]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800288a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800288e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002894:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800289a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289c:	4b68      	ldr	r3, [pc, #416]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a2:	4a67      	ldr	r2, [pc, #412]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ac:	4b64      	ldr	r3, [pc, #400]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80028ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80028ba:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80028be:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80028d4:	230e      	movs	r3, #14
 80028d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80028de:	4619      	mov	r1, r3
 80028e0:	485a      	ldr	r0, [pc, #360]	@ (8002a4c <HAL_UART_MspInit+0x2d4>)
 80028e2:	f000 fd4f 	bl	8003384 <HAL_GPIO_Init>
}
 80028e6:	e23a      	b.n	8002d5e <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==UART7)
 80028e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80028ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a56      	ldr	r2, [pc, #344]	@ (8002a50 <HAL_UART_MspInit+0x2d8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d147      	bne.n	800298a <HAL_UART_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80028fa:	f04f 0202 	mov.w	r2, #2
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800290c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002910:	4618      	mov	r0, r3
 8002912:	f002 f9fb 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 800291c:	f7fe fbae 	bl	800107c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002920:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002926:	4a46      	ldr	r2, [pc, #280]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002928:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800292c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002930:	4b43      	ldr	r3, [pc, #268]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002936:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800293a:	637b      	str	r3, [r7, #52]	@ 0x34
 800293c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800293e:	4b40      	ldr	r3, [pc, #256]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002944:	4a3e      	ldr	r2, [pc, #248]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002946:	f043 0310 	orr.w	r3, r3, #16
 800294a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800294e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 8002950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	633b      	str	r3, [r7, #48]	@ 0x30
 800295a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800295c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002960:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002976:	2307      	movs	r3, #7
 8002978:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800297c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002980:	4619      	mov	r1, r3
 8002982:	4834      	ldr	r0, [pc, #208]	@ (8002a54 <HAL_UART_MspInit+0x2dc>)
 8002984:	f000 fcfe 	bl	8003384 <HAL_GPIO_Init>
}
 8002988:	e1e9      	b.n	8002d5e <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==UART8)
 800298a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800298e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a30      	ldr	r2, [pc, #192]	@ (8002a58 <HAL_UART_MspInit+0x2e0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d15f      	bne.n	8002a5c <HAL_UART_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800299c:	f04f 0202 	mov.w	r2, #2
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 f9aa 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 80029be:	f7fe fb5d 	bl	800107c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80029c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80029c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80029ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80029d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e0:	4b17      	ldr	r3, [pc, #92]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80029e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e6:	4a16      	ldr	r2, [pc, #88]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80029e8:	f043 0310 	orr.w	r3, r3, #16
 80029ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <HAL_UART_MspInit+0x2c8>)
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f6:	f003 0210 	and.w	r2, r3, #16
 80029fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029fe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a0c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002a26:	2308      	movs	r3, #8
 8002a28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a2c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002a30:	4619      	mov	r1, r3
 8002a32:	4808      	ldr	r0, [pc, #32]	@ (8002a54 <HAL_UART_MspInit+0x2dc>)
 8002a34:	f000 fca6 	bl	8003384 <HAL_GPIO_Init>
}
 8002a38:	e191      	b.n	8002d5e <HAL_UART_MspInit+0x5e6>
 8002a3a:	bf00      	nop
 8002a3c:	40004c00 	.word	0x40004c00
 8002a40:	58024400 	.word	0x58024400
 8002a44:	58020000 	.word	0x58020000
 8002a48:	40005000 	.word	0x40005000
 8002a4c:	58020400 	.word	0x58020400
 8002a50:	40007800 	.word	0x40007800
 8002a54:	58021000 	.word	0x58021000
 8002a58:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==USART1)
 8002a5c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a60:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4abf      	ldr	r2, [pc, #764]	@ (8002d68 <HAL_UART_MspInit+0x5f0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d157      	bne.n	8002b1e <HAL_UART_MspInit+0x3a6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a6e:	f04f 0201 	mov.w	r2, #1
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a80:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 f941 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_MspInit+0x31c>
      Error_Handler();
 8002a90:	f7fe faf4 	bl	800107c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a94:	4bb5      	ldr	r3, [pc, #724]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a9a:	4ab4      	ldr	r2, [pc, #720]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002a9c:	f043 0310 	orr.w	r3, r3, #16
 8002aa0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002aa4:	4bb1      	ldr	r3, [pc, #708]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aaa:	f003 0210 	and.w	r2, r3, #16
 8002aae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ac0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	4baa      	ldr	r3, [pc, #680]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ac8:	4aa8      	ldr	r2, [pc, #672]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ad2:	4ba6      	ldr	r3, [pc, #664]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad8:	f003 0201 	and.w	r2, r3, #1
 8002adc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002aee:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002af0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002af4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b10:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002b14:	4619      	mov	r1, r3
 8002b16:	4896      	ldr	r0, [pc, #600]	@ (8002d70 <HAL_UART_MspInit+0x5f8>)
 8002b18:	f000 fc34 	bl	8003384 <HAL_GPIO_Init>
}
 8002b1c:	e11f      	b.n	8002d5e <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==USART2)
 8002b1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b22:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a92      	ldr	r2, [pc, #584]	@ (8002d74 <HAL_UART_MspInit+0x5fc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d156      	bne.n	8002bde <HAL_UART_MspInit+0x466>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b30:	f04f 0202 	mov.w	r2, #2
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 f8e0 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_UART_MspInit+0x3de>
      Error_Handler();
 8002b52:	f7fe fa93 	bl	800107c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b56:	4b85      	ldr	r3, [pc, #532]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b5c:	4a83      	ldr	r2, [pc, #524]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b66:	4b81      	ldr	r3, [pc, #516]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b6c:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8002b70:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002b7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b82:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b84:	4b79      	ldr	r3, [pc, #484]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b8a:	4a78      	ldr	r2, [pc, #480]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b94:	4b75      	ldr	r3, [pc, #468]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b9a:	f003 0208 	and.w	r2, r3, #8
 8002b9e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002ba2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002bac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bb0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002bb2:	2378      	movs	r3, #120	@ 0x78
 8002bb4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bca:	2307      	movs	r3, #7
 8002bcc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bd0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4868      	ldr	r0, [pc, #416]	@ (8002d78 <HAL_UART_MspInit+0x600>)
 8002bd8:	f000 fbd4 	bl	8003384 <HAL_GPIO_Init>
}
 8002bdc:	e0bf      	b.n	8002d5e <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==USART3)
 8002bde:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002be2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a64      	ldr	r2, [pc, #400]	@ (8002d7c <HAL_UART_MspInit+0x604>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d157      	bne.n	8002ca0 <HAL_UART_MspInit+0x528>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bf0:	f04f 0202 	mov.w	r2, #2
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 f880 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_UART_MspInit+0x49e>
      Error_Handler();
 8002c12:	f7fe fa33 	bl	800107c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c16:	4b55      	ldr	r3, [pc, #340]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c1c:	4a53      	ldr	r2, [pc, #332]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002c1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c26:	4b51      	ldr	r3, [pc, #324]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c2c:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002c30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c42:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c44:	4b49      	ldr	r3, [pc, #292]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c4a:	4a48      	ldr	r2, [pc, #288]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002c4c:	f043 0308 	orr.w	r3, r3, #8
 8002c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c54:	4b45      	ldr	r3, [pc, #276]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c5a:	f003 0208 	and.w	r2, r3, #8
 8002c5e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c70:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8002c72:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8002c76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c8c:	2307      	movs	r3, #7
 8002c8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c92:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002c96:	4619      	mov	r1, r3
 8002c98:	4837      	ldr	r0, [pc, #220]	@ (8002d78 <HAL_UART_MspInit+0x600>)
 8002c9a:	f000 fb73 	bl	8003384 <HAL_GPIO_Init>
}
 8002c9e:	e05e      	b.n	8002d5e <HAL_UART_MspInit+0x5e6>
  else if(uartHandle->Instance==USART6)
 8002ca0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002ca4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a34      	ldr	r2, [pc, #208]	@ (8002d80 <HAL_UART_MspInit+0x608>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d155      	bne.n	8002d5e <HAL_UART_MspInit+0x5e6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002cb2:	f04f 0201 	mov.w	r2, #1
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cc4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 f81f 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_UART_MspInit+0x560>
      Error_Handler();
 8002cd4:	f7fe f9d2 	bl	800107c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cd8:	4b24      	ldr	r3, [pc, #144]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cde:	4a23      	ldr	r2, [pc, #140]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002ce0:	f043 0320 	orr.w	r3, r3, #32
 8002ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ce8:	4b20      	ldr	r3, [pc, #128]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cee:	f003 0220 	and.w	r2, r3, #32
 8002cf2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002cf6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d00:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d04:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	4b19      	ldr	r3, [pc, #100]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d0c:	4a17      	ldr	r2, [pc, #92]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <HAL_UART_MspInit+0x5f4>)
 8002d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d1c:	f003 0204 	and.w	r2, r3, #4
 8002d20:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d24:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d32:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d34:	23c0      	movs	r3, #192	@ 0xc0
 8002d36:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d52:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002d56:	4619      	mov	r1, r3
 8002d58:	480a      	ldr	r0, [pc, #40]	@ (8002d84 <HAL_UART_MspInit+0x60c>)
 8002d5a:	f000 fb13 	bl	8003384 <HAL_GPIO_Init>
}
 8002d5e:	bf00      	nop
 8002d60:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40011000 	.word	0x40011000
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	58020000 	.word	0x58020000
 8002d74:	40004400 	.word	0x40004400
 8002d78:	58020c00 	.word	0x58020c00
 8002d7c:	40004800 	.word	0x40004800
 8002d80:	40011400 	.word	0x40011400
 8002d84:	58020800 	.word	0x58020800

08002d88 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002d8c:	4b15      	ldr	r3, [pc, #84]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d8e:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002d90:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002d92:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d94:	2209      	movs	r2, #9
 8002d96:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002d98:	4b12      	ldr	r3, [pc, #72]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002da4:	4b0f      	ldr	r3, [pc, #60]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002da6:	2202      	movs	r2, #2
 8002da8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002dbc:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002dce:	4805      	ldr	r0, [pc, #20]	@ (8002de4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002dd0:	f000 fe1b 	bl	8003a0a <HAL_PCD_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002dda:	f7fe f94f 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	24000a68 	.word	0x24000a68
 8002de8:	40080000 	.word	0x40080000

08002dec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b0bc      	sub	sp, #240	@ 0xf0
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	22c8      	movs	r2, #200	@ 0xc8
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f009 fd38 	bl	800c882 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a28      	ldr	r2, [pc, #160]	@ (8002eb8 <HAL_PCD_MspInit+0xcc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d149      	bne.n	8002eb0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002e1c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002e28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 ff69 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002e40:	f7fe f91c 	bl	800107c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002e44:	f000 ff6c 	bl	8003d20 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e48:	4b1c      	ldr	r3, [pc, #112]	@ (8002ebc <HAL_PCD_MspInit+0xd0>)
 8002e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ebc <HAL_PCD_MspInit+0xd0>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e58:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <HAL_PCD_MspInit+0xd0>)
 8002e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002e80:	230a      	movs	r3, #10
 8002e82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	480c      	ldr	r0, [pc, #48]	@ (8002ec0 <HAL_PCD_MspInit+0xd4>)
 8002e8e:	f000 fa79 	bl	8003384 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_PCD_MspInit+0xd0>)
 8002e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e98:	4a08      	ldr	r2, [pc, #32]	@ (8002ebc <HAL_PCD_MspInit+0xd0>)
 8002e9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_PCD_MspInit+0xd0>)
 8002ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	37f0      	adds	r7, #240	@ 0xf0
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40080000 	.word	0x40080000
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	58020000 	.word	0x58020000

08002ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ec4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002f00 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002ec8:	f7fd fc4a 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ecc:	f7fd fb9a 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ed0:	480c      	ldr	r0, [pc, #48]	@ (8002f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ed2:	490d      	ldr	r1, [pc, #52]	@ (8002f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed8:	e002      	b.n	8002ee0 <LoopCopyDataInit>

08002eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ede:	3304      	adds	r3, #4

08002ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee4:	d3f9      	bcc.n	8002eda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8002f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eec:	e001      	b.n	8002ef2 <LoopFillZerobss>

08002eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef0:	3204      	adds	r2, #4

08002ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef4:	d3fb      	bcc.n	8002eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f009 fccd 	bl	800c894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efa:	f7fd ff9b 	bl	8000e34 <main>
  bx  lr
 8002efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002f04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f08:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002f0c:	0800c950 	.word	0x0800c950
  ldr r2, =_sbss
 8002f10:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002f14:	24000f64 	.word	0x24000f64

08002f18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC3_IRQHandler>
	...

08002f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f22:	2003      	movs	r0, #3
 8002f24:	f000 f984 	bl	8003230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f28:	f001 fd1a 	bl	8004960 <HAL_RCC_GetSysClockFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <HAL_Init+0x68>)
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	4913      	ldr	r1, [pc, #76]	@ (8002f88 <HAL_Init+0x6c>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f46:	4b0f      	ldr	r3, [pc, #60]	@ (8002f84 <HAL_Init+0x68>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f88 <HAL_Init+0x6c>)
 8002f50:	5cd3      	ldrb	r3, [r2, r3]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f8c <HAL_Init+0x70>)
 8002f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f60:	4a0b      	ldr	r2, [pc, #44]	@ (8002f90 <HAL_Init+0x74>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f66:	200f      	movs	r0, #15
 8002f68:	f000 f814 	bl	8002f94 <HAL_InitTick>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e002      	b.n	8002f7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f76:	f7fe fcc5 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	58024400 	.word	0x58024400
 8002f88:	0800c8f4 	.word	0x0800c8f4
 8002f8c:	24000004 	.word	0x24000004
 8002f90:	24000000 	.word	0x24000000

08002f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f9c:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_InitTick+0x60>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e021      	b.n	8002fec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fa8:	4b13      	ldr	r3, [pc, #76]	@ (8002ff8 <HAL_InitTick+0x64>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_InitTick+0x60>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f95b 	bl	800327a <HAL_SYSTICK_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00e      	b.n	8002fec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	d80a      	bhi.n	8002fea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f000 f933 	bl	8003246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe0:	4a06      	ldr	r2, [pc, #24]	@ (8002ffc <HAL_InitTick+0x68>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2400000c 	.word	0x2400000c
 8002ff8:	24000000 	.word	0x24000000
 8002ffc:	24000008 	.word	0x24000008

08003000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_IncTick+0x20>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <HAL_IncTick+0x24>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4413      	add	r3, r2
 8003010:	4a04      	ldr	r2, [pc, #16]	@ (8003024 <HAL_IncTick+0x24>)
 8003012:	6013      	str	r3, [r2, #0]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	2400000c 	.word	0x2400000c
 8003024:	24000f4c 	.word	0x24000f4c

08003028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return uwTick;
 800302c:	4b03      	ldr	r3, [pc, #12]	@ (800303c <HAL_GetTick+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	24000f4c 	.word	0x24000f4c

08003040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7ff ffee 	bl	8003028 <HAL_GetTick>
 800304c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d005      	beq.n	8003066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_Delay+0x44>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003066:	bf00      	nop
 8003068:	f7ff ffde 	bl	8003028 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	429a      	cmp	r2, r3
 8003076:	d8f7      	bhi.n	8003068 <HAL_Delay+0x28>
  {
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2400000c 	.word	0x2400000c

08003088 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800308c:	4b03      	ldr	r3, [pc, #12]	@ (800309c <HAL_GetREVID+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0c1b      	lsrs	r3, r3, #16
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	5c001000 	.word	0x5c001000

080030a0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80030aa:	4b07      	ldr	r3, [pc, #28]	@ (80030c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	401a      	ands	r2, r3
 80030b4:	4904      	ldr	r1, [pc, #16]	@ (80030c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	58000400 	.word	0x58000400

080030cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030dc:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <__NVIC_SetPriorityGrouping+0x40>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030e8:	4013      	ands	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fa:	4a04      	ldr	r2, [pc, #16]	@ (800310c <__NVIC_SetPriorityGrouping+0x40>)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	60d3      	str	r3, [r2, #12]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00
 8003110:	05fa0000 	.word	0x05fa0000

08003114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003118:	4b04      	ldr	r3, [pc, #16]	@ (800312c <__NVIC_GetPriorityGrouping+0x18>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 0307 	and.w	r3, r3, #7
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800313c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003140:	2b00      	cmp	r3, #0
 8003142:	db0a      	blt.n	800315a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	490c      	ldr	r1, [pc, #48]	@ (800317c <__NVIC_SetPriority+0x4c>)
 800314a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800314e:	0112      	lsls	r2, r2, #4
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	440b      	add	r3, r1
 8003154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003158:	e00a      	b.n	8003170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4908      	ldr	r1, [pc, #32]	@ (8003180 <__NVIC_SetPriority+0x50>)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	3b04      	subs	r3, #4
 8003168:	0112      	lsls	r2, r2, #4
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	440b      	add	r3, r1
 800316e:	761a      	strb	r2, [r3, #24]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000e100 	.word	0xe000e100
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	@ 0x24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f1c3 0307 	rsb	r3, r3, #7
 800319e:	2b04      	cmp	r3, #4
 80031a0:	bf28      	it	cs
 80031a2:	2304      	movcs	r3, #4
 80031a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2b06      	cmp	r3, #6
 80031ac:	d902      	bls.n	80031b4 <NVIC_EncodePriority+0x30>
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3b03      	subs	r3, #3
 80031b2:	e000      	b.n	80031b6 <NVIC_EncodePriority+0x32>
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	401a      	ands	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031cc:	f04f 31ff 	mov.w	r1, #4294967295
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	43d9      	mvns	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	4313      	orrs	r3, r2
         );
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	@ 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031fc:	d301      	bcc.n	8003202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fe:	2301      	movs	r3, #1
 8003200:	e00f      	b.n	8003222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003202:	4a0a      	ldr	r2, [pc, #40]	@ (800322c <SysTick_Config+0x40>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320a:	210f      	movs	r1, #15
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f7ff ff8e 	bl	8003130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003214:	4b05      	ldr	r3, [pc, #20]	@ (800322c <SysTick_Config+0x40>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321a:	4b04      	ldr	r3, [pc, #16]	@ (800322c <SysTick_Config+0x40>)
 800321c:	2207      	movs	r2, #7
 800321e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	e000e010 	.word	0xe000e010

08003230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff47 	bl	80030cc <__NVIC_SetPriorityGrouping>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003254:	f7ff ff5e 	bl	8003114 <__NVIC_GetPriorityGrouping>
 8003258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff ff90 	bl	8003184 <NVIC_EncodePriority>
 8003264:	4602      	mov	r2, r0
 8003266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff5f 	bl	8003130 <__NVIC_SetPriority>
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffb2 	bl	80031ec <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003298:	f3bf 8f5f 	dmb	sy
}
 800329c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800329e:	4b07      	ldr	r3, [pc, #28]	@ (80032bc <HAL_MPU_Disable+0x28>)
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	4a06      	ldr	r2, [pc, #24]	@ (80032bc <HAL_MPU_Disable+0x28>)
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80032aa:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_MPU_Disable+0x2c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	605a      	str	r2, [r3, #4]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000ed00 	.word	0xe000ed00
 80032c0:	e000ed90 	.word	0xe000ed90

080032c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80032cc:	4a0b      	ldr	r2, [pc, #44]	@ (80032fc <HAL_MPU_Enable+0x38>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HAL_MPU_Enable+0x3c>)
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	4a09      	ldr	r2, [pc, #36]	@ (8003300 <HAL_MPU_Enable+0x3c>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80032e2:	f3bf 8f4f 	dsb	sy
}
 80032e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032e8:	f3bf 8f6f 	isb	sy
}
 80032ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000ed90 	.word	0xe000ed90
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	785a      	ldrb	r2, [r3, #1]
 8003310:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <HAL_MPU_ConfigRegion+0x7c>)
 8003312:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003314:	4b1a      	ldr	r3, [pc, #104]	@ (8003380 <HAL_MPU_ConfigRegion+0x7c>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	4a19      	ldr	r2, [pc, #100]	@ (8003380 <HAL_MPU_ConfigRegion+0x7c>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003320:	4a17      	ldr	r2, [pc, #92]	@ (8003380 <HAL_MPU_ConfigRegion+0x7c>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7b1b      	ldrb	r3, [r3, #12]
 800332c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	7adb      	ldrb	r3, [r3, #11]
 8003332:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003334:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7a9b      	ldrb	r3, [r3, #10]
 800333a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800333c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	7b5b      	ldrb	r3, [r3, #13]
 8003342:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003344:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7b9b      	ldrb	r3, [r3, #14]
 800334a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800334c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7bdb      	ldrb	r3, [r3, #15]
 8003352:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003354:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7a5b      	ldrb	r3, [r3, #9]
 800335a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800335c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7a1b      	ldrb	r3, [r3, #8]
 8003362:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003364:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800336c:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800336e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003370:	6113      	str	r3, [r2, #16]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000ed90 	.word	0xe000ed90

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	@ 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003392:	4b89      	ldr	r3, [pc, #548]	@ (80035b8 <HAL_GPIO_Init+0x234>)
 8003394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003396:	e194      	b.n	80036c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa01 f303 	lsl.w	r3, r1, r3
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8186 	beq.w	80036bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d005      	beq.n	80033c8 <HAL_GPIO_Init+0x44>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d130      	bne.n	800342a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033fe:	2201      	movs	r2, #1
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 0201 	and.w	r2, r3, #1
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b03      	cmp	r3, #3
 8003434:	d017      	beq.n	8003466 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	2203      	movs	r2, #3
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d123      	bne.n	80034ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	08da      	lsrs	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3208      	adds	r2, #8
 800347a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	220f      	movs	r2, #15
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	08da      	lsrs	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3208      	adds	r2, #8
 80034b4:	69b9      	ldr	r1, [r7, #24]
 80034b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0203 	and.w	r2, r3, #3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80e0 	beq.w	80036bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fc:	4b2f      	ldr	r3, [pc, #188]	@ (80035bc <HAL_GPIO_Init+0x238>)
 80034fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003502:	4a2e      	ldr	r2, [pc, #184]	@ (80035bc <HAL_GPIO_Init+0x238>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800350c:	4b2b      	ldr	r3, [pc, #172]	@ (80035bc <HAL_GPIO_Init+0x238>)
 800350e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351a:	4a29      	ldr	r2, [pc, #164]	@ (80035c0 <HAL_GPIO_Init+0x23c>)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a20      	ldr	r2, [pc, #128]	@ (80035c4 <HAL_GPIO_Init+0x240>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d052      	beq.n	80035ec <HAL_GPIO_Init+0x268>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1f      	ldr	r2, [pc, #124]	@ (80035c8 <HAL_GPIO_Init+0x244>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d031      	beq.n	80035b2 <HAL_GPIO_Init+0x22e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <HAL_GPIO_Init+0x248>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <HAL_GPIO_Init+0x22a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1d      	ldr	r2, [pc, #116]	@ (80035d0 <HAL_GPIO_Init+0x24c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d025      	beq.n	80035aa <HAL_GPIO_Init+0x226>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1c      	ldr	r2, [pc, #112]	@ (80035d4 <HAL_GPIO_Init+0x250>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <HAL_GPIO_Init+0x222>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1b      	ldr	r2, [pc, #108]	@ (80035d8 <HAL_GPIO_Init+0x254>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d019      	beq.n	80035a2 <HAL_GPIO_Init+0x21e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1a      	ldr	r2, [pc, #104]	@ (80035dc <HAL_GPIO_Init+0x258>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_GPIO_Init+0x21a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a19      	ldr	r2, [pc, #100]	@ (80035e0 <HAL_GPIO_Init+0x25c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00d      	beq.n	800359a <HAL_GPIO_Init+0x216>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <HAL_GPIO_Init+0x260>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <HAL_GPIO_Init+0x212>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a17      	ldr	r2, [pc, #92]	@ (80035e8 <HAL_GPIO_Init+0x264>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_GPIO_Init+0x20e>
 800358e:	2309      	movs	r3, #9
 8003590:	e02d      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 8003592:	230a      	movs	r3, #10
 8003594:	e02b      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 8003596:	2308      	movs	r3, #8
 8003598:	e029      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 800359a:	2307      	movs	r3, #7
 800359c:	e027      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 800359e:	2306      	movs	r3, #6
 80035a0:	e025      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e023      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e021      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e01f      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e01d      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01b      	b.n	80035ee <HAL_GPIO_Init+0x26a>
 80035b6:	bf00      	nop
 80035b8:	58000080 	.word	0x58000080
 80035bc:	58024400 	.word	0x58024400
 80035c0:	58000400 	.word	0x58000400
 80035c4:	58020000 	.word	0x58020000
 80035c8:	58020400 	.word	0x58020400
 80035cc:	58020800 	.word	0x58020800
 80035d0:	58020c00 	.word	0x58020c00
 80035d4:	58021000 	.word	0x58021000
 80035d8:	58021400 	.word	0x58021400
 80035dc:	58021800 	.word	0x58021800
 80035e0:	58021c00 	.word	0x58021c00
 80035e4:	58022000 	.word	0x58022000
 80035e8:	58022400 	.word	0x58022400
 80035ec:	2300      	movs	r3, #0
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	f002 0203 	and.w	r2, r2, #3
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4093      	lsls	r3, r2
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035fe:	4938      	ldr	r1, [pc, #224]	@ (80036e0 <HAL_GPIO_Init+0x35c>)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003660:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	3301      	adds	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f ae63 	bne.w	8003398 <HAL_GPIO_Init+0x14>
  }
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	3724      	adds	r7, #36	@ 0x24
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	58000400 	.word	0x58000400

080036e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e001      	b.n	8003706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
 8003720:	4613      	mov	r3, r2
 8003722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003724:	787b      	ldrb	r3, [r7, #1]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003730:	e003      	b.n	800373a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	041a      	lsls	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	619a      	str	r2, [r3, #24]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003750:	4a08      	ldr	r2, [pc, #32]	@ (8003774 <HAL_HSEM_FastTake+0x2c>)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3320      	adds	r3, #32
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <HAL_HSEM_FastTake+0x30>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	58026400 	.word	0x58026400
 8003778:	80000300 	.word	0x80000300

0800377c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003786:	4906      	ldr	r1, [pc, #24]	@ (80037a0 <HAL_HSEM_Release+0x24>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	58026400 	.word	0x58026400

080037a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e08b      	b.n	80038ce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fa2a 	bl	8000c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	@ 0x24
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003804:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d107      	bne.n	800381e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	e006      	b.n	800382c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800382a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d108      	bne.n	8003846 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	e007      	b.n	8003856 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003854:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b1d      	ldr	r3, [pc, #116]	@ (80038d8 <HAL_I2C_Init+0x134>)
 8003862:	430b      	orrs	r3, r1
 8003864:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003874:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69d9      	ldr	r1, [r3, #28]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	02008000 	.word	0x02008000

080038dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d138      	bne.n	8003964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e032      	b.n	8003966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	@ 0x24
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800392e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6819      	ldr	r1, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b20      	cmp	r3, #32
 8003986:	d139      	bne.n	80039fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003992:	2302      	movs	r3, #2
 8003994:	e033      	b.n	80039fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2224      	movs	r2, #36	@ 0x24
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af02      	add	r7, sp, #8
 8003a10:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0fe      	b.n	8003c1a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff f9db 	bl	8002dec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f008 fa8e 	bl	800bf64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7c1a      	ldrb	r2, [r3, #16]
 8003a50:	f88d 2000 	strb.w	r2, [sp]
 8003a54:	3304      	adds	r3, #4
 8003a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a58:	f008 fa12 	bl	800be80 <USB_CoreInit>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0d5      	b.n	8003c1a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f008 fa86 	bl	800bf86 <USB_SetCurrentMode>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0c6      	b.n	8003c1a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e04a      	b.n	8003b28 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3315      	adds	r3, #21
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	b298      	uxth	r0, r3
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	332e      	adds	r3, #46	@ 0x2e
 8003ace:	4602      	mov	r2, r0
 8003ad0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3318      	adds	r3, #24
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	331c      	adds	r3, #28
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3320      	adds	r3, #32
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3324      	adds	r3, #36	@ 0x24
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	3301      	adds	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	791b      	ldrb	r3, [r3, #4]
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d3af      	bcc.n	8003a92 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
 8003b36:	e044      	b.n	8003bc2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ba6:	7bfa      	ldrb	r2, [r7, #15]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	791b      	ldrb	r3, [r3, #4]
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d3b5      	bcc.n	8003b38 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7c1a      	ldrb	r2, [r3, #16]
 8003bd4:	f88d 2000 	strb.w	r2, [sp]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bdc:	f008 fa20 	bl	800c020 <USB_DevInit>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e013      	b.n	8003c1a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7b1b      	ldrb	r3, [r3, #12]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d102      	bne.n	8003c0e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f80b 	bl	8003c24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f008 fbdb 	bl	800c3ce <USB_DevDisconnect>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c52:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_PCDEx_ActivateLPM+0x44>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	10000003 	.word	0x10000003

08003c6c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003c74:	4b29      	ldr	r3, [pc, #164]	@ (8003d1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d00a      	beq.n	8003c96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c80:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d001      	beq.n	8003c92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e040      	b.n	8003d14 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e03e      	b.n	8003d14 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c96:	4b21      	ldr	r3, [pc, #132]	@ (8003d1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003c9e:	491f      	ldr	r1, [pc, #124]	@ (8003d1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003ca6:	f7ff f9bf 	bl	8003028 <HAL_GetTick>
 8003caa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cac:	e009      	b.n	8003cc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cae:	f7ff f9bb 	bl	8003028 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cbc:	d901      	bls.n	8003cc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e028      	b.n	8003d14 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cc2:	4b16      	ldr	r3, [pc, #88]	@ (8003d1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cce:	d1ee      	bne.n	8003cae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b1e      	cmp	r3, #30
 8003cd4:	d008      	beq.n	8003ce8 <HAL_PWREx_ConfigSupply+0x7c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cda:	d005      	beq.n	8003ce8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b1d      	cmp	r3, #29
 8003ce0:	d002      	beq.n	8003ce8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b2d      	cmp	r3, #45	@ 0x2d
 8003ce6:	d114      	bne.n	8003d12 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003ce8:	f7ff f99e 	bl	8003028 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003cee:	e009      	b.n	8003d04 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cf0:	f7ff f99a 	bl	8003028 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cfe:	d901      	bls.n	8003d04 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e007      	b.n	8003d14 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_PWREx_ConfigSupply+0xb0>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d1ee      	bne.n	8003cf0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	58024800 	.word	0x58024800

08003d20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003d24:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	60d3      	str	r3, [r2, #12]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	58024800 	.word	0x58024800

08003d40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08c      	sub	sp, #48	@ 0x30
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f000 bc48 	b.w	80045e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8088 	beq.w	8003e72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d62:	4b99      	ldr	r3, [pc, #612]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d6c:	4b96      	ldr	r3, [pc, #600]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d007      	beq.n	8003d88 <HAL_RCC_OscConfig+0x48>
 8003d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7a:	2b18      	cmp	r3, #24
 8003d7c:	d111      	bne.n	8003da2 <HAL_RCC_OscConfig+0x62>
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	4b8f      	ldr	r3, [pc, #572]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d06d      	beq.n	8003e70 <HAL_RCC_OscConfig+0x130>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d169      	bne.n	8003e70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f000 bc21 	b.w	80045e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x7a>
 8003dac:	4b86      	ldr	r3, [pc, #536]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a85      	ldr	r2, [pc, #532]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e02e      	b.n	8003e18 <HAL_RCC_OscConfig+0xd8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x9c>
 8003dc2:	4b81      	ldr	r3, [pc, #516]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a80      	ldr	r2, [pc, #512]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b7e      	ldr	r3, [pc, #504]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7d      	ldr	r2, [pc, #500]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003dd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e01d      	b.n	8003e18 <HAL_RCC_OscConfig+0xd8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0xc0>
 8003de6:	4b78      	ldr	r3, [pc, #480]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a77      	ldr	r2, [pc, #476]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b75      	ldr	r3, [pc, #468]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a74      	ldr	r2, [pc, #464]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0xd8>
 8003e00:	4b71      	ldr	r3, [pc, #452]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a70      	ldr	r2, [pc, #448]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b6e      	ldr	r3, [pc, #440]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a6d      	ldr	r2, [pc, #436]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d013      	beq.n	8003e48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7ff f902 	bl	8003028 <HAL_GetTick>
 8003e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e28:	f7ff f8fe 	bl	8003028 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	@ 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e3d4      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e3a:	4b63      	ldr	r3, [pc, #396]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0xe8>
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7ff f8ee 	bl	8003028 <HAL_GetTick>
 8003e4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e50:	f7ff f8ea 	bl	8003028 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	@ 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e3c0      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e62:	4b59      	ldr	r3, [pc, #356]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x110>
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80ca 	beq.w	8004014 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e80:	4b51      	ldr	r3, [pc, #324]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e8a:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x166>
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2b18      	cmp	r3, #24
 8003e9a:	d156      	bne.n	8003f4a <HAL_RCC_OscConfig+0x20a>
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d151      	bne.n	8003f4a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea6:	4b48      	ldr	r3, [pc, #288]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x17e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e392      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ebe:	4b42      	ldr	r3, [pc, #264]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0219 	bic.w	r2, r3, #25
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	493f      	ldr	r1, [pc, #252]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7ff f8aa 	bl	8003028 <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7ff f8a6 	bl	8003028 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e37c      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eea:	4b37      	ldr	r3, [pc, #220]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef6:	f7ff f8c7 	bl	8003088 <HAL_GetREVID>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d817      	bhi.n	8003f34 <HAL_RCC_OscConfig+0x1f4>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b40      	cmp	r3, #64	@ 0x40
 8003f0a:	d108      	bne.n	8003f1e <HAL_RCC_OscConfig+0x1de>
 8003f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f14:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1c:	e07a      	b.n	8004014 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	031b      	lsls	r3, r3, #12
 8003f2c:	4926      	ldr	r1, [pc, #152]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f32:	e06f      	b.n	8004014 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f34:	4b24      	ldr	r3, [pc, #144]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	4921      	ldr	r1, [pc, #132]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	e064      	b.n	8004014 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d047      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f52:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 0219 	bic.w	r2, r3, #25
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	491a      	ldr	r1, [pc, #104]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7ff f860 	bl	8003028 <HAL_GetTick>
 8003f68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7ff f85c 	bl	8003028 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e332      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f7e:	4b12      	ldr	r3, [pc, #72]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8a:	f7ff f87d 	bl	8003088 <HAL_GetREVID>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d819      	bhi.n	8003fcc <HAL_RCC_OscConfig+0x28c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b40      	cmp	r3, #64	@ 0x40
 8003f9e:	d108      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x272>
 8003fa0:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003fa8:	4a07      	ldr	r2, [pc, #28]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fae:	6053      	str	r3, [r2, #4]
 8003fb0:	e030      	b.n	8004014 <HAL_RCC_OscConfig+0x2d4>
 8003fb2:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	031b      	lsls	r3, r3, #12
 8003fc0:	4901      	ldr	r1, [pc, #4]	@ (8003fc8 <HAL_RCC_OscConfig+0x288>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
 8003fc6:	e025      	b.n	8004014 <HAL_RCC_OscConfig+0x2d4>
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	4b9a      	ldr	r3, [pc, #616]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	4997      	ldr	r1, [pc, #604]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
 8003fe0:	e018      	b.n	8004014 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe2:	4b95      	ldr	r3, [pc, #596]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a94      	ldr	r2, [pc, #592]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7ff f81b 	bl	8003028 <HAL_GetTick>
 8003ff2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff6:	f7ff f817 	bl	8003028 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e2ed      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004008:	4b8b      	ldr	r3, [pc, #556]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a9 	beq.w	8004174 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004022:	4b85      	ldr	r3, [pc, #532]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800402a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800402c:	4b82      	ldr	r3, [pc, #520]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d007      	beq.n	8004048 <HAL_RCC_OscConfig+0x308>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b18      	cmp	r3, #24
 800403c:	d13a      	bne.n	80040b4 <HAL_RCC_OscConfig+0x374>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d135      	bne.n	80040b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004048:	4b7b      	ldr	r3, [pc, #492]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_OscConfig+0x320>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b80      	cmp	r3, #128	@ 0x80
 800405a:	d001      	beq.n	8004060 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e2c1      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004060:	f7ff f812 	bl	8003088 <HAL_GetREVID>
 8004064:	4603      	mov	r3, r0
 8004066:	f241 0203 	movw	r2, #4099	@ 0x1003
 800406a:	4293      	cmp	r3, r2
 800406c:	d817      	bhi.n	800409e <HAL_RCC_OscConfig+0x35e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	2b20      	cmp	r3, #32
 8004074:	d108      	bne.n	8004088 <HAL_RCC_OscConfig+0x348>
 8004076:	4b70      	ldr	r3, [pc, #448]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800407e:	4a6e      	ldr	r2, [pc, #440]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004080:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004084:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004086:	e075      	b.n	8004174 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004088:	4b6b      	ldr	r3, [pc, #428]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	069b      	lsls	r3, r3, #26
 8004096:	4968      	ldr	r1, [pc, #416]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800409c:	e06a      	b.n	8004174 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800409e:	4b66      	ldr	r3, [pc, #408]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	4962      	ldr	r1, [pc, #392]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040b2:	e05f      	b.n	8004174 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d042      	beq.n	8004142 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 80040c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fe ffae 	bl	8003028 <HAL_GetTick>
 80040cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040d0:	f7fe ffaa 	bl	8003028 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e280      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040e2:	4b55      	ldr	r3, [pc, #340]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ee:	f7fe ffcb 	bl	8003088 <HAL_GetREVID>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d817      	bhi.n	800412c <HAL_RCC_OscConfig+0x3ec>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	2b20      	cmp	r3, #32
 8004102:	d108      	bne.n	8004116 <HAL_RCC_OscConfig+0x3d6>
 8004104:	4b4c      	ldr	r3, [pc, #304]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800410c:	4a4a      	ldr	r2, [pc, #296]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800410e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004112:	6053      	str	r3, [r2, #4]
 8004114:	e02e      	b.n	8004174 <HAL_RCC_OscConfig+0x434>
 8004116:	4b48      	ldr	r3, [pc, #288]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	069b      	lsls	r3, r3, #26
 8004124:	4944      	ldr	r1, [pc, #272]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
 800412a:	e023      	b.n	8004174 <HAL_RCC_OscConfig+0x434>
 800412c:	4b42      	ldr	r3, [pc, #264]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	493f      	ldr	r1, [pc, #252]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800413c:	4313      	orrs	r3, r2
 800413e:	60cb      	str	r3, [r1, #12]
 8004140:	e018      	b.n	8004174 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004142:	4b3d      	ldr	r3, [pc, #244]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a3c      	ldr	r2, [pc, #240]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004148:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800414c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe ff6b 	bl	8003028 <HAL_GetTick>
 8004152:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004156:	f7fe ff67 	bl	8003028 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e23d      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004168:	4b33      	ldr	r3, [pc, #204]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d036      	beq.n	80041ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d019      	beq.n	80041bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004188:	4b2b      	ldr	r3, [pc, #172]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800418a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418c:	4a2a      	ldr	r2, [pc, #168]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fe ff48 	bl	8003028 <HAL_GetTick>
 8004198:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800419c:	f7fe ff44 	bl	8003028 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e21a      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041ae:	4b22      	ldr	r3, [pc, #136]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 80041b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x45c>
 80041ba:	e018      	b.n	80041ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 80041be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe ff2e 	bl	8003028 <HAL_GetTick>
 80041cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fe ff2a 	bl	8003028 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e200      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041e2:	4b15      	ldr	r3, [pc, #84]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d039      	beq.n	800426e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01c      	beq.n	800423c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a0c      	ldr	r2, [pc, #48]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004208:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800420c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800420e:	f7fe ff0b 	bl	8003028 <HAL_GetTick>
 8004212:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004216:	f7fe ff07 	bl	8003028 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e1dd      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004228:	4b03      	ldr	r3, [pc, #12]	@ (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x4d6>
 8004234:	e01b      	b.n	800426e <HAL_RCC_OscConfig+0x52e>
 8004236:	bf00      	nop
 8004238:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800423c:	4b9b      	ldr	r3, [pc, #620]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a9a      	ldr	r2, [pc, #616]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004246:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004248:	f7fe feee 	bl	8003028 <HAL_GetTick>
 800424c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004250:	f7fe feea 	bl	8003028 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1c0      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004262:	4b92      	ldr	r3, [pc, #584]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8081 	beq.w	800437e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800427c:	4b8c      	ldr	r3, [pc, #560]	@ (80044b0 <HAL_RCC_OscConfig+0x770>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a8b      	ldr	r2, [pc, #556]	@ (80044b0 <HAL_RCC_OscConfig+0x770>)
 8004282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004288:	f7fe fece 	bl	8003028 <HAL_GetTick>
 800428c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004290:	f7fe feca 	bl	8003028 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	@ 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e1a0      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a2:	4b83      	ldr	r3, [pc, #524]	@ (80044b0 <HAL_RCC_OscConfig+0x770>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d106      	bne.n	80042c4 <HAL_RCC_OscConfig+0x584>
 80042b6:	4b7d      	ldr	r3, [pc, #500]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ba:	4a7c      	ldr	r2, [pc, #496]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c2:	e02d      	b.n	8004320 <HAL_RCC_OscConfig+0x5e0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x5a6>
 80042cc:	4b77      	ldr	r3, [pc, #476]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d0:	4a76      	ldr	r2, [pc, #472]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d8:	4b74      	ldr	r3, [pc, #464]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042dc:	4a73      	ldr	r2, [pc, #460]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80042de:	f023 0304 	bic.w	r3, r3, #4
 80042e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e4:	e01c      	b.n	8004320 <HAL_RCC_OscConfig+0x5e0>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x5c8>
 80042ee:	4b6f      	ldr	r3, [pc, #444]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f2:	4a6e      	ldr	r2, [pc, #440]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80042f4:	f043 0304 	orr.w	r3, r3, #4
 80042f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fa:	4b6c      	ldr	r3, [pc, #432]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fe:	4a6b      	ldr	r2, [pc, #428]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6713      	str	r3, [r2, #112]	@ 0x70
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0x5e0>
 8004308:	4b68      	ldr	r3, [pc, #416]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430c:	4a67      	ldr	r2, [pc, #412]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	@ 0x70
 8004314:	4b65      	ldr	r3, [pc, #404]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004318:	4a64      	ldr	r2, [pc, #400]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800431a:	f023 0304 	bic.w	r3, r3, #4
 800431e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d015      	beq.n	8004354 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004328:	f7fe fe7e 	bl	8003028 <HAL_GetTick>
 800432c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432e:	e00a      	b.n	8004346 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fe fe7a 	bl	8003028 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e14e      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004346:	4b59      	ldr	r3, [pc, #356]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0ee      	beq.n	8004330 <HAL_RCC_OscConfig+0x5f0>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fe fe68 	bl	8003028 <HAL_GetTick>
 8004358:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800435a:	e00a      	b.n	8004372 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435c:	f7fe fe64 	bl	8003028 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e138      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004372:	4b4e      	ldr	r3, [pc, #312]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ee      	bne.n	800435c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 812d 	beq.w	80045e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004388:	4b48      	ldr	r3, [pc, #288]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004390:	2b18      	cmp	r3, #24
 8004392:	f000 80bd 	beq.w	8004510 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	2b02      	cmp	r3, #2
 800439c:	f040 809e 	bne.w	80044dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a0:	4b42      	ldr	r3, [pc, #264]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a41      	ldr	r2, [pc, #260]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80043a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fe fe3c 	bl	8003028 <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe fe38 	bl	8003028 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e10e      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043c6:	4b39      	ldr	r3, [pc, #228]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d2:	4b36      	ldr	r3, [pc, #216]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80043d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <HAL_RCC_OscConfig+0x774>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043e2:	0112      	lsls	r2, r2, #4
 80043e4:	430a      	orrs	r2, r1
 80043e6:	4931      	ldr	r1, [pc, #196]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	3b01      	subs	r3, #1
 80043f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fa:	3b01      	subs	r3, #1
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	b29b      	uxth	r3, r3
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004406:	3b01      	subs	r3, #1
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	3b01      	subs	r3, #1
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800441c:	4923      	ldr	r1, [pc, #140]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004422:	4b22      	ldr	r3, [pc, #136]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	4a21      	ldr	r2, [pc, #132]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800442e:	4b1f      	ldr	r3, [pc, #124]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004432:	4b21      	ldr	r3, [pc, #132]	@ (80044b8 <HAL_RCC_OscConfig+0x778>)
 8004434:	4013      	ands	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800443a:	00d2      	lsls	r2, r2, #3
 800443c:	491b      	ldr	r1, [pc, #108]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800443e:	4313      	orrs	r3, r2
 8004440:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004442:	4b1a      	ldr	r3, [pc, #104]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	f023 020c 	bic.w	r2, r3, #12
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	4917      	ldr	r1, [pc, #92]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004454:	4b15      	ldr	r3, [pc, #84]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	f023 0202 	bic.w	r2, r3, #2
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004460:	4912      	ldr	r1, [pc, #72]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004462:	4313      	orrs	r3, r2
 8004464:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004466:	4b11      	ldr	r3, [pc, #68]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	4a10      	ldr	r2, [pc, #64]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004470:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004472:	4b0e      	ldr	r3, [pc, #56]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	4a0d      	ldr	r2, [pc, #52]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800447c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800447e:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	4a0a      	ldr	r2, [pc, #40]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800448a:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800448c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448e:	4a07      	ldr	r2, [pc, #28]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004496:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a04      	ldr	r2, [pc, #16]	@ (80044ac <HAL_RCC_OscConfig+0x76c>)
 800449c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fe fdc1 	bl	8003028 <HAL_GetTick>
 80044a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044a8:	e011      	b.n	80044ce <HAL_RCC_OscConfig+0x78e>
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	58024800 	.word	0x58024800
 80044b4:	fffffc0c 	.word	0xfffffc0c
 80044b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fe fdb4 	bl	8003028 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e08a      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044ce:	4b47      	ldr	r3, [pc, #284]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x77c>
 80044da:	e082      	b.n	80045e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044dc:	4b43      	ldr	r3, [pc, #268]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a42      	ldr	r2, [pc, #264]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 80044e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fe fd9e 	bl	8003028 <HAL_GetTick>
 80044ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fe fd9a 	bl	8003028 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e070      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004502:	4b3a      	ldr	r3, [pc, #232]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x7b0>
 800450e:	e068      	b.n	80045e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004510:	4b36      	ldr	r3, [pc, #216]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004516:	4b35      	ldr	r3, [pc, #212]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	2b01      	cmp	r3, #1
 8004522:	d031      	beq.n	8004588 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f003 0203 	and.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d12a      	bne.n	8004588 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d122      	bne.n	8004588 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d11a      	bne.n	8004588 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	0a5b      	lsrs	r3, r3, #9
 8004556:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d111      	bne.n	8004588 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d108      	bne.n	8004588 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	0e1b      	lsrs	r3, r3, #24
 800457a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e02b      	b.n	80045e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800458c:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 800458e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004590:	08db      	lsrs	r3, r3, #3
 8004592:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004596:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d01f      	beq.n	80045e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80045a2:	4b12      	ldr	r3, [pc, #72]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	4a11      	ldr	r2, [pc, #68]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ae:	f7fe fd3b 	bl	8003028 <HAL_GetTick>
 80045b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80045b4:	bf00      	nop
 80045b6:	f7fe fd37 	bl	8003028 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	4293      	cmp	r3, r2
 80045c0:	d0f9      	beq.n	80045b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045c2:	4b0a      	ldr	r3, [pc, #40]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 80045c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045c6:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <HAL_RCC_OscConfig+0x8b0>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80045ce:	00d2      	lsls	r2, r2, #3
 80045d0:	4906      	ldr	r1, [pc, #24]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80045d6:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045da:	4a04      	ldr	r2, [pc, #16]	@ (80045ec <HAL_RCC_OscConfig+0x8ac>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3730      	adds	r7, #48	@ 0x30
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	58024400 	.word	0x58024400
 80045f0:	ffff0007 	.word	0xffff0007

080045f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e19c      	b.n	8004942 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b8a      	ldr	r3, [pc, #552]	@ (8004834 <HAL_RCC_ClockConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d910      	bls.n	8004638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b87      	ldr	r3, [pc, #540]	@ (8004834 <HAL_RCC_ClockConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 020f 	bic.w	r2, r3, #15
 800461e:	4985      	ldr	r1, [pc, #532]	@ (8004834 <HAL_RCC_ClockConfig+0x240>)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b83      	ldr	r3, [pc, #524]	@ (8004834 <HAL_RCC_ClockConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e184      	b.n	8004942 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	4b7b      	ldr	r3, [pc, #492]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004650:	429a      	cmp	r2, r3
 8004652:	d908      	bls.n	8004666 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004654:	4b78      	ldr	r3, [pc, #480]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	4975      	ldr	r1, [pc, #468]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004662:	4313      	orrs	r3, r2
 8004664:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d010      	beq.n	8004694 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	4b70      	ldr	r3, [pc, #448]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800467e:	429a      	cmp	r2, r3
 8004680:	d908      	bls.n	8004694 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004682:	4b6d      	ldr	r3, [pc, #436]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	496a      	ldr	r1, [pc, #424]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004690:	4313      	orrs	r3, r2
 8004692:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	d010      	beq.n	80046c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699a      	ldr	r2, [r3, #24]
 80046a4:	4b64      	ldr	r3, [pc, #400]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d908      	bls.n	80046c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046b0:	4b61      	ldr	r3, [pc, #388]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	495e      	ldr	r1, [pc, #376]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d010      	beq.n	80046f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	4b59      	ldr	r3, [pc, #356]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046da:	429a      	cmp	r2, r3
 80046dc:	d908      	bls.n	80046f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80046de:	4b56      	ldr	r3, [pc, #344]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4953      	ldr	r1, [pc, #332]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d010      	beq.n	800471e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	4b4d      	ldr	r3, [pc, #308]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	429a      	cmp	r2, r3
 800470a:	d908      	bls.n	800471e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800470c:	4b4a      	ldr	r3, [pc, #296]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f023 020f 	bic.w	r2, r3, #15
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4947      	ldr	r1, [pc, #284]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 800471a:	4313      	orrs	r3, r2
 800471c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d055      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800472a:	4b43      	ldr	r3, [pc, #268]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4940      	ldr	r1, [pc, #256]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004738:	4313      	orrs	r3, r2
 800473a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d107      	bne.n	8004754 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004744:	4b3c      	ldr	r3, [pc, #240]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d121      	bne.n	8004794 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0f6      	b.n	8004942 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d107      	bne.n	800476c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800475c:	4b36      	ldr	r3, [pc, #216]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d115      	bne.n	8004794 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0ea      	b.n	8004942 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004774:	4b30      	ldr	r3, [pc, #192]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0de      	b.n	8004942 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004784:	4b2c      	ldr	r3, [pc, #176]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0d6      	b.n	8004942 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004794:	4b28      	ldr	r3, [pc, #160]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	f023 0207 	bic.w	r2, r3, #7
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4925      	ldr	r1, [pc, #148]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a6:	f7fe fc3f 	bl	8003028 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ae:	f7fe fc3b 	bl	8003028 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e0be      	b.n	8004942 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d1eb      	bne.n	80047ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d010      	beq.n	8004804 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	4b14      	ldr	r3, [pc, #80]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d208      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f2:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f023 020f 	bic.w	r2, r3, #15
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	490e      	ldr	r1, [pc, #56]	@ (8004838 <HAL_RCC_ClockConfig+0x244>)
 8004800:	4313      	orrs	r3, r2
 8004802:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004804:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <HAL_RCC_ClockConfig+0x240>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d214      	bcs.n	800483c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b08      	ldr	r3, [pc, #32]	@ (8004834 <HAL_RCC_ClockConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 020f 	bic.w	r2, r3, #15
 800481a:	4906      	ldr	r1, [pc, #24]	@ (8004834 <HAL_RCC_ClockConfig+0x240>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b04      	ldr	r3, [pc, #16]	@ (8004834 <HAL_RCC_ClockConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d005      	beq.n	800483c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e086      	b.n	8004942 <HAL_RCC_ClockConfig+0x34e>
 8004834:	52002000 	.word	0x52002000
 8004838:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	4b3f      	ldr	r3, [pc, #252]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004854:	429a      	cmp	r2, r3
 8004856:	d208      	bcs.n	800486a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004858:	4b3c      	ldr	r3, [pc, #240]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	4939      	ldr	r1, [pc, #228]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 8004866:	4313      	orrs	r3, r2
 8004868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	4b34      	ldr	r3, [pc, #208]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004882:	429a      	cmp	r2, r3
 8004884:	d208      	bcs.n	8004898 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004886:	4b31      	ldr	r3, [pc, #196]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	492e      	ldr	r1, [pc, #184]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 8004894:	4313      	orrs	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d010      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	4b28      	ldr	r3, [pc, #160]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d208      	bcs.n	80048c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048b4:	4b25      	ldr	r3, [pc, #148]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	4922      	ldr	r1, [pc, #136]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d010      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048de:	429a      	cmp	r2, r3
 80048e0:	d208      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80048e2:	4b1a      	ldr	r3, [pc, #104]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	4917      	ldr	r1, [pc, #92]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048f4:	f000 f834 	bl	8004960 <HAL_RCC_GetSysClockFreq>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4b14      	ldr	r3, [pc, #80]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	4912      	ldr	r1, [pc, #72]	@ (8004950 <HAL_RCC_ClockConfig+0x35c>)
 8004906:	5ccb      	ldrb	r3, [r1, r3]
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
 8004910:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004912:	4b0e      	ldr	r3, [pc, #56]	@ (800494c <HAL_RCC_ClockConfig+0x358>)
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	4a0d      	ldr	r2, [pc, #52]	@ (8004950 <HAL_RCC_ClockConfig+0x35c>)
 800491c:	5cd3      	ldrb	r3, [r2, r3]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
 8004928:	4a0a      	ldr	r2, [pc, #40]	@ (8004954 <HAL_RCC_ClockConfig+0x360>)
 800492a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800492c:	4a0a      	ldr	r2, [pc, #40]	@ (8004958 <HAL_RCC_ClockConfig+0x364>)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <HAL_RCC_ClockConfig+0x368>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe fb2c 	bl	8002f94 <HAL_InitTick>
 800493c:	4603      	mov	r3, r0
 800493e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	58024400 	.word	0x58024400
 8004950:	0800c8f4 	.word	0x0800c8f4
 8004954:	24000004 	.word	0x24000004
 8004958:	24000000 	.word	0x24000000
 800495c:	24000008 	.word	0x24000008

08004960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	@ 0x24
 8004964:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004966:	4bb3      	ldr	r3, [pc, #716]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800496e:	2b18      	cmp	r3, #24
 8004970:	f200 8155 	bhi.w	8004c1e <HAL_RCC_GetSysClockFreq+0x2be>
 8004974:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049e1 	.word	0x080049e1
 8004980:	08004c1f 	.word	0x08004c1f
 8004984:	08004c1f 	.word	0x08004c1f
 8004988:	08004c1f 	.word	0x08004c1f
 800498c:	08004c1f 	.word	0x08004c1f
 8004990:	08004c1f 	.word	0x08004c1f
 8004994:	08004c1f 	.word	0x08004c1f
 8004998:	08004c1f 	.word	0x08004c1f
 800499c:	08004a07 	.word	0x08004a07
 80049a0:	08004c1f 	.word	0x08004c1f
 80049a4:	08004c1f 	.word	0x08004c1f
 80049a8:	08004c1f 	.word	0x08004c1f
 80049ac:	08004c1f 	.word	0x08004c1f
 80049b0:	08004c1f 	.word	0x08004c1f
 80049b4:	08004c1f 	.word	0x08004c1f
 80049b8:	08004c1f 	.word	0x08004c1f
 80049bc:	08004a0d 	.word	0x08004a0d
 80049c0:	08004c1f 	.word	0x08004c1f
 80049c4:	08004c1f 	.word	0x08004c1f
 80049c8:	08004c1f 	.word	0x08004c1f
 80049cc:	08004c1f 	.word	0x08004c1f
 80049d0:	08004c1f 	.word	0x08004c1f
 80049d4:	08004c1f 	.word	0x08004c1f
 80049d8:	08004c1f 	.word	0x08004c1f
 80049dc:	08004a13 	.word	0x08004a13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049e0:	4b94      	ldr	r3, [pc, #592]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049ec:	4b91      	ldr	r3, [pc, #580]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	08db      	lsrs	r3, r3, #3
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	4a90      	ldr	r2, [pc, #576]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
 80049fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80049fe:	e111      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a00:	4b8d      	ldr	r3, [pc, #564]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a02:	61bb      	str	r3, [r7, #24]
      break;
 8004a04:	e10e      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a06:	4b8d      	ldr	r3, [pc, #564]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a08:	61bb      	str	r3, [r7, #24]
      break;
 8004a0a:	e10b      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a0e:	61bb      	str	r3, [r7, #24]
      break;
 8004a10:	e108      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a12:	4b88      	ldr	r3, [pc, #544]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a1c:	4b85      	ldr	r3, [pc, #532]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a28:	4b82      	ldr	r3, [pc, #520]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a32:	4b80      	ldr	r3, [pc, #512]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a36:	08db      	lsrs	r3, r3, #3
 8004a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	fb02 f303 	mul.w	r3, r2, r3
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80e1 	beq.w	8004c18 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	f000 8083 	beq.w	8004b64 <HAL_RCC_GetSysClockFreq+0x204>
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	f200 80a1 	bhi.w	8004ba8 <HAL_RCC_GetSysClockFreq+0x248>
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0x114>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d056      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a72:	e099      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a74:	4b6f      	ldr	r3, [pc, #444]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d02d      	beq.n	8004adc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a80:	4b6c      	ldr	r3, [pc, #432]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	08db      	lsrs	r3, r3, #3
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	4a6b      	ldr	r2, [pc, #428]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aaa:	4b62      	ldr	r3, [pc, #392]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004abe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004ada:	e087      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004c48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aee:	4b51      	ldr	r3, [pc, #324]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b1e:	e065      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004c4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b32:	4b40      	ldr	r3, [pc, #256]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b62:	e043      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004c50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b2f      	ldr	r3, [pc, #188]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ba6:	e021      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004c4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b1e      	ldr	r3, [pc, #120]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004c44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004bec:	4b11      	ldr	r3, [pc, #68]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf0:	0a5b      	lsrs	r3, r3, #9
 8004bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c10:	ee17 3a90 	vmov	r3, s15
 8004c14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c16:	e005      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
      break;
 8004c1c:	e002      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c1e:	4b07      	ldr	r3, [pc, #28]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c20:	61bb      	str	r3, [r7, #24]
      break;
 8004c22:	bf00      	nop
  }

  return sysclockfreq;
 8004c24:	69bb      	ldr	r3, [r7, #24]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3724      	adds	r7, #36	@ 0x24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	58024400 	.word	0x58024400
 8004c38:	03d09000 	.word	0x03d09000
 8004c3c:	003d0900 	.word	0x003d0900
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	46000000 	.word	0x46000000
 8004c48:	4c742400 	.word	0x4c742400
 8004c4c:	4a742400 	.word	0x4a742400
 8004c50:	4b742400 	.word	0x4b742400

08004c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c5a:	f7ff fe81 	bl	8004960 <HAL_RCC_GetSysClockFreq>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	490f      	ldr	r1, [pc, #60]	@ (8004ca8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c6c:	5ccb      	ldrb	r3, [r1, r3]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	fa22 f303 	lsr.w	r3, r2, r3
 8004c76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	4a09      	ldr	r2, [pc, #36]	@ (8004ca8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c82:	5cd3      	ldrb	r3, [r2, r3]
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8e:	4a07      	ldr	r2, [pc, #28]	@ (8004cac <HAL_RCC_GetHCLKFreq+0x58>)
 8004c90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c92:	4a07      	ldr	r2, [pc, #28]	@ (8004cb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c98:	4b04      	ldr	r3, [pc, #16]	@ (8004cac <HAL_RCC_GetHCLKFreq+0x58>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	0800c8f4 	.word	0x0800c8f4
 8004cac:	24000004 	.word	0x24000004
 8004cb0:	24000000 	.word	0x24000000

08004cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004cb8:	f7ff ffcc 	bl	8004c54 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4904      	ldr	r1, [pc, #16]	@ (8004cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	58024400 	.word	0x58024400
 8004cdc:	0800c8f4 	.word	0x0800c8f4

08004ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ce4:	f7ff ffb6 	bl	8004c54 <HAL_RCC_GetHCLKFreq>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	4904      	ldr	r1, [pc, #16]	@ (8004d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cf6:	5ccb      	ldrb	r3, [r1, r3]
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	58024400 	.word	0x58024400
 8004d08:	0800c8f4 	.word	0x0800c8f4

08004d0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d10:	b0cc      	sub	sp, #304	@ 0x130
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d30:	2500      	movs	r5, #0
 8004d32:	ea54 0305 	orrs.w	r3, r4, r5
 8004d36:	d049      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d42:	d02f      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d48:	d828      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d4e:	d01a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d54:	d822      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d5e:	d007      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d60:	e01c      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d62:	4bb8      	ldr	r3, [pc, #736]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	4ab7      	ldr	r2, [pc, #732]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d6e:	e01a      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d74:	3308      	adds	r3, #8
 8004d76:	2102      	movs	r1, #2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f002 fba1 	bl	80074c0 <RCCEx_PLL2_Config>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d84:	e00f      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d8a:	3328      	adds	r3, #40	@ 0x28
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f002 fc48 	bl	8007624 <RCCEx_PLL3_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d9a:	e004      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004da2:	e000      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004dae:	4ba5      	ldr	r3, [pc, #660]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dbc:	4aa1      	ldr	r2, [pc, #644]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dc2:	e003      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004dc8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004dd8:	f04f 0900 	mov.w	r9, #0
 8004ddc:	ea58 0309 	orrs.w	r3, r8, r9
 8004de0:	d047      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d82a      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004dec:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e09 	.word	0x08004e09
 8004df8:	08004e17 	.word	0x08004e17
 8004dfc:	08004e2d 	.word	0x08004e2d
 8004e00:	08004e4b 	.word	0x08004e4b
 8004e04:	08004e4b 	.word	0x08004e4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e08:	4b8e      	ldr	r3, [pc, #568]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	4a8d      	ldr	r2, [pc, #564]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e14:	e01a      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f002 fb4e 	bl	80074c0 <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e2a:	e00f      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e30:	3328      	adds	r3, #40	@ 0x28
 8004e32:	2100      	movs	r1, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f002 fbf5 	bl	8007624 <RCCEx_PLL3_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e40:	e004      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e48:	e000      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e54:	4b7b      	ldr	r3, [pc, #492]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e58:	f023 0107 	bic.w	r1, r3, #7
 8004e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e62:	4a78      	ldr	r2, [pc, #480]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e68:	e003      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004e7e:	f04f 0b00 	mov.w	fp, #0
 8004e82:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e86:	d04c      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004e88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e92:	d030      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e98:	d829      	bhi.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e9c:	d02d      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ea0:	d825      	bhi.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ea2:	2b80      	cmp	r3, #128	@ 0x80
 8004ea4:	d018      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ea6:	2b80      	cmp	r3, #128	@ 0x80
 8004ea8:	d821      	bhi.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004eae:	2b40      	cmp	r3, #64	@ 0x40
 8004eb0:	d007      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004eb2:	e01c      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb4:	4b63      	ldr	r3, [pc, #396]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	4a62      	ldr	r2, [pc, #392]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ec0:	e01c      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f002 faf8 	bl	80074c0 <RCCEx_PLL2_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ed6:	e011      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004edc:	3328      	adds	r3, #40	@ 0x28
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f002 fb9f 	bl	8007624 <RCCEx_PLL3_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004eec:	e006      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004ef4:	e002      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004efc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f04:	4b4f      	ldr	r3, [pc, #316]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f08:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f12:	4a4c      	ldr	r2, [pc, #304]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f18:	e003      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004f32:	2300      	movs	r3, #0
 8004f34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004f38:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	d053      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f4e:	d035      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004f50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f54:	d82e      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f56:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f5a:	d031      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004f5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f60:	d828      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f66:	d01a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f6c:	d822      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004f72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f76:	d007      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004f78:	e01c      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f7a:	4b32      	ldr	r3, [pc, #200]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7e:	4a31      	ldr	r2, [pc, #196]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f86:	e01c      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f002 fa95 	bl	80074c0 <RCCEx_PLL2_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f9c:	e011      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fa2:	3328      	adds	r3, #40	@ 0x28
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f002 fb3c 	bl	8007624 <RCCEx_PLL3_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fb2:	e006      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004fba:	e002      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004fbc:	bf00      	nop
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10b      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fca:	4b1e      	ldr	r3, [pc, #120]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004fd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004fda:	4a1a      	ldr	r2, [pc, #104]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fe6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005000:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005004:	460b      	mov	r3, r1
 8005006:	4313      	orrs	r3, r2
 8005008:	d056      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800500a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800500e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005012:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005016:	d038      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005018:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800501c:	d831      	bhi.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800501e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005022:	d034      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005024:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005028:	d82b      	bhi.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800502a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800502e:	d01d      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005030:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005034:	d825      	bhi.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800503a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005040:	e01f      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005048:	4ba2      	ldr	r3, [pc, #648]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800504a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504c:	4aa1      	ldr	r2, [pc, #644]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800504e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005054:	e01c      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800505a:	3308      	adds	r3, #8
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f002 fa2e 	bl	80074c0 <RCCEx_PLL2_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800506a:	e011      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800506c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005070:	3328      	adds	r3, #40	@ 0x28
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f002 fad5 	bl	8007624 <RCCEx_PLL3_Config>
 800507a:	4603      	mov	r3, r0
 800507c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005080:	e006      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005088:	e002      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800508e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005090:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005098:	4b8e      	ldr	r3, [pc, #568]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800509a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80050a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050a8:	4a8a      	ldr	r2, [pc, #552]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050aa:	430b      	orrs	r3, r1
 80050ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ae:	e003      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050b4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80050c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050c8:	2300      	movs	r3, #0
 80050ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80050ce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80050d2:	460b      	mov	r3, r1
 80050d4:	4313      	orrs	r3, r2
 80050d6:	d03a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80050d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050de:	2b30      	cmp	r3, #48	@ 0x30
 80050e0:	d01f      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80050e2:	2b30      	cmp	r3, #48	@ 0x30
 80050e4:	d819      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d00c      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d815      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d019      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d111      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f6:	4b77      	ldr	r3, [pc, #476]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	4a76      	ldr	r2, [pc, #472]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005100:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005102:	e011      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005104:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005108:	3308      	adds	r3, #8
 800510a:	2102      	movs	r1, #2
 800510c:	4618      	mov	r0, r3
 800510e:	f002 f9d7 	bl	80074c0 <RCCEx_PLL2_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005118:	e006      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005120:	e002      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005122:	bf00      	nop
 8005124:	e000      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005128:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005130:	4b68      	ldr	r3, [pc, #416]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005134:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800513c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800513e:	4a65      	ldr	r2, [pc, #404]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005140:	430b      	orrs	r3, r1
 8005142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005144:	e003      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005146:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800514a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800514e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800515a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800515e:	2300      	movs	r3, #0
 8005160:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005164:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005168:	460b      	mov	r3, r1
 800516a:	4313      	orrs	r3, r2
 800516c:	d051      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800516e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005178:	d035      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800517a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800517e:	d82e      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005180:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005184:	d031      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005186:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800518a:	d828      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800518c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005190:	d01a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005196:	d822      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a0:	d007      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80051a2:	e01c      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a4:	4b4b      	ldr	r3, [pc, #300]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a8:	4a4a      	ldr	r2, [pc, #296]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051b0:	e01c      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051b6:	3308      	adds	r3, #8
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f002 f980 	bl	80074c0 <RCCEx_PLL2_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051c6:	e011      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051cc:	3328      	adds	r3, #40	@ 0x28
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f002 fa27 	bl	8007624 <RCCEx_PLL3_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051dc:	e006      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80051e4:	e002      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80051e6:	bf00      	nop
 80051e8:	e000      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80051ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80051f4:	4b37      	ldr	r3, [pc, #220]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80051fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005202:	4a34      	ldr	r2, [pc, #208]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005204:	430b      	orrs	r3, r1
 8005206:	6513      	str	r3, [r2, #80]	@ 0x50
 8005208:	e003      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800520e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005212:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800521e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005222:	2300      	movs	r3, #0
 8005224:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005228:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800522c:	460b      	mov	r3, r1
 800522e:	4313      	orrs	r3, r2
 8005230:	d056      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800523c:	d033      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800523e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005242:	d82c      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005244:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005248:	d02f      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800524a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800524e:	d826      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005250:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005254:	d02b      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005256:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800525a:	d820      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800525c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005260:	d012      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005266:	d81a      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d022      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005270:	d115      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005276:	3308      	adds	r3, #8
 8005278:	2101      	movs	r1, #1
 800527a:	4618      	mov	r0, r3
 800527c:	f002 f920 	bl	80074c0 <RCCEx_PLL2_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005286:	e015      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800528c:	3328      	adds	r3, #40	@ 0x28
 800528e:	2101      	movs	r1, #1
 8005290:	4618      	mov	r0, r3
 8005292:	f002 f9c7 	bl	8007624 <RCCEx_PLL3_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800529c:	e00a      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052a4:	e006      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052a6:	bf00      	nop
 80052a8:	e004      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052aa:	bf00      	nop
 80052ac:	e002      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052ae:	bf00      	nop
 80052b0:	e000      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10d      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052bc:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80052c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ca:	4a02      	ldr	r2, [pc, #8]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80052d0:	e006      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80052d2:	bf00      	nop
 80052d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80052ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052f0:	2300      	movs	r3, #0
 80052f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80052f6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80052fa:	460b      	mov	r3, r1
 80052fc:	4313      	orrs	r3, r2
 80052fe:	d055      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005304:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800530c:	d033      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800530e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005312:	d82c      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005318:	d02f      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531e:	d826      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005320:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005324:	d02b      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800532a:	d820      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800532c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005330:	d012      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005336:	d81a      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d022      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800533c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005340:	d115      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005346:	3308      	adds	r3, #8
 8005348:	2101      	movs	r1, #1
 800534a:	4618      	mov	r0, r3
 800534c:	f002 f8b8 	bl	80074c0 <RCCEx_PLL2_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005356:	e015      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800535c:	3328      	adds	r3, #40	@ 0x28
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f002 f95f 	bl	8007624 <RCCEx_PLL3_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800536c:	e00a      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005374:	e006      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005376:	bf00      	nop
 8005378:	e004      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800537a:	bf00      	nop
 800537c:	e002      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005384:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800538c:	4bb6      	ldr	r3, [pc, #728]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800538e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005390:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005398:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800539c:	4ab2      	ldr	r2, [pc, #712]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800539e:	430b      	orrs	r3, r1
 80053a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053a2:	e003      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80053ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80053b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053bc:	2300      	movs	r3, #0
 80053be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4313      	orrs	r3, r2
 80053ca:	d02a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80053cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d011      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80053d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053da:	d10a      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053e0:	3308      	adds	r3, #8
 80053e2:	2101      	movs	r1, #1
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 f86b 	bl	80074c0 <RCCEx_PLL2_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80053f0:	e004      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80053f8:	e000      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80053fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005404:	4b98      	ldr	r3, [pc, #608]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005408:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800540c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005412:	4a95      	ldr	r2, [pc, #596]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005414:	430b      	orrs	r3, r1
 8005416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005418:	e003      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800541e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800542e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005432:	2300      	movs	r3, #0
 8005434:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005438:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800543c:	460b      	mov	r3, r1
 800543e:	4313      	orrs	r3, r2
 8005440:	d037      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005442:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800544c:	d00e      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800544e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005452:	d816      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d018      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800545c:	d111      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545e:	4b82      	ldr	r3, [pc, #520]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	4a81      	ldr	r2, [pc, #516]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800546a:	e00f      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800546c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005470:	3308      	adds	r3, #8
 8005472:	2101      	movs	r1, #1
 8005474:	4618      	mov	r0, r3
 8005476:	f002 f823 	bl	80074c0 <RCCEx_PLL2_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005480:	e004      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005488:	e000      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800548a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005494:	4b74      	ldr	r3, [pc, #464]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005498:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800549c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a2:	4a71      	ldr	r2, [pc, #452]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80054a8:	e003      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80054be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054c2:	2300      	movs	r3, #0
 80054c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054c8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4313      	orrs	r3, r2
 80054d0:	d03a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80054d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d81d      	bhi.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80054dc:	a201      	add	r2, pc, #4	@ (adr r2, 80054e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	08005521 	.word	0x08005521
 80054e8:	080054f5 	.word	0x080054f5
 80054ec:	08005503 	.word	0x08005503
 80054f0:	08005521 	.word	0x08005521
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f8:	4a5b      	ldr	r2, [pc, #364]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005500:	e00f      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005506:	3308      	adds	r3, #8
 8005508:	2102      	movs	r1, #2
 800550a:	4618      	mov	r0, r3
 800550c:	f001 ffd8 	bl	80074c0 <RCCEx_PLL2_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005516:	e004      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800551e:	e000      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005522:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800552a:	4b4f      	ldr	r3, [pc, #316]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	f023 0103 	bic.w	r1, r3, #3
 8005532:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005538:	4a4b      	ldr	r2, [pc, #300]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800553a:	430b      	orrs	r3, r1
 800553c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800553e:	e003      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005540:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005544:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005554:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005558:	2300      	movs	r3, #0
 800555a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800555e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005562:	460b      	mov	r3, r1
 8005564:	4313      	orrs	r3, r2
 8005566:	f000 80a0 	beq.w	80056aa <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800556a:	4b40      	ldr	r3, [pc, #256]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a3f      	ldr	r2, [pc, #252]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005574:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005576:	f7fd fd57 	bl	8003028 <HAL_GetTick>
 800557a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800557e:	e00b      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005580:	f7fd fd52 	bl	8003028 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b64      	cmp	r3, #100	@ 0x64
 800558e:	d903      	bls.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005596:	e005      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005598:	4b34      	ldr	r3, [pc, #208]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0ed      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80055a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d17a      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055b8:	4053      	eors	r3, r2
 80055ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d015      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055c2:	4b29      	ldr	r3, [pc, #164]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ce:	4b26      	ldr	r3, [pc, #152]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d2:	4a25      	ldr	r2, [pc, #148]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055da:	4b23      	ldr	r3, [pc, #140]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055de:	4a22      	ldr	r2, [pc, #136]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055e6:	4a20      	ldr	r2, [pc, #128]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80055ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055fa:	d118      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fd fd14 	bl	8003028 <HAL_GetTick>
 8005600:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005604:	e00d      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7fd fd0f 	bl	8003028 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005610:	1ad2      	subs	r2, r2, r3
 8005612:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005616:	429a      	cmp	r2, r3
 8005618:	d903      	bls.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005620:	e005      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005622:	4b11      	ldr	r3, [pc, #68]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0eb      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800562e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005632:	2b00      	cmp	r3, #0
 8005634:	d130      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800563a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800563e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005642:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005646:	d115      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005648:	4b07      	ldr	r3, [pc, #28]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005650:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005654:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005658:	091a      	lsrs	r2, r3, #4
 800565a:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800565c:	4013      	ands	r3, r2
 800565e:	4a02      	ldr	r2, [pc, #8]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005660:	430b      	orrs	r3, r1
 8005662:	6113      	str	r3, [r2, #16]
 8005664:	e00c      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005666:	bf00      	nop
 8005668:	58024400 	.word	0x58024400
 800566c:	58024800 	.word	0x58024800
 8005670:	00ffffcf 	.word	0x00ffffcf
 8005674:	4bd4      	ldr	r3, [pc, #848]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	4ad3      	ldr	r2, [pc, #844]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800567a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800567e:	6113      	str	r3, [r2, #16]
 8005680:	4bd1      	ldr	r3, [pc, #836]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005682:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005688:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800568c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005690:	4acd      	ldr	r2, [pc, #820]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005692:	430b      	orrs	r3, r1
 8005694:	6713      	str	r3, [r2, #112]	@ 0x70
 8005696:	e008      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005698:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800569c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80056a0:	e003      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80056aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f002 0301 	and.w	r3, r2, #1
 80056b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056ba:	2300      	movs	r3, #0
 80056bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f000 808b 	beq.w	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80056cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056d4:	2b28      	cmp	r3, #40	@ 0x28
 80056d6:	d86b      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80056d8:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	080057b9 	.word	0x080057b9
 80056e4:	080057b1 	.word	0x080057b1
 80056e8:	080057b1 	.word	0x080057b1
 80056ec:	080057b1 	.word	0x080057b1
 80056f0:	080057b1 	.word	0x080057b1
 80056f4:	080057b1 	.word	0x080057b1
 80056f8:	080057b1 	.word	0x080057b1
 80056fc:	080057b1 	.word	0x080057b1
 8005700:	08005785 	.word	0x08005785
 8005704:	080057b1 	.word	0x080057b1
 8005708:	080057b1 	.word	0x080057b1
 800570c:	080057b1 	.word	0x080057b1
 8005710:	080057b1 	.word	0x080057b1
 8005714:	080057b1 	.word	0x080057b1
 8005718:	080057b1 	.word	0x080057b1
 800571c:	080057b1 	.word	0x080057b1
 8005720:	0800579b 	.word	0x0800579b
 8005724:	080057b1 	.word	0x080057b1
 8005728:	080057b1 	.word	0x080057b1
 800572c:	080057b1 	.word	0x080057b1
 8005730:	080057b1 	.word	0x080057b1
 8005734:	080057b1 	.word	0x080057b1
 8005738:	080057b1 	.word	0x080057b1
 800573c:	080057b1 	.word	0x080057b1
 8005740:	080057b9 	.word	0x080057b9
 8005744:	080057b1 	.word	0x080057b1
 8005748:	080057b1 	.word	0x080057b1
 800574c:	080057b1 	.word	0x080057b1
 8005750:	080057b1 	.word	0x080057b1
 8005754:	080057b1 	.word	0x080057b1
 8005758:	080057b1 	.word	0x080057b1
 800575c:	080057b1 	.word	0x080057b1
 8005760:	080057b9 	.word	0x080057b9
 8005764:	080057b1 	.word	0x080057b1
 8005768:	080057b1 	.word	0x080057b1
 800576c:	080057b1 	.word	0x080057b1
 8005770:	080057b1 	.word	0x080057b1
 8005774:	080057b1 	.word	0x080057b1
 8005778:	080057b1 	.word	0x080057b1
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080057b9 	.word	0x080057b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005784:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005788:	3308      	adds	r3, #8
 800578a:	2101      	movs	r1, #1
 800578c:	4618      	mov	r0, r3
 800578e:	f001 fe97 	bl	80074c0 <RCCEx_PLL2_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005798:	e00f      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800579a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800579e:	3328      	adds	r3, #40	@ 0x28
 80057a0:	2101      	movs	r1, #1
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 ff3e 	bl	8007624 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057ae:	e004      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80057b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80057c2:	4b81      	ldr	r3, [pc, #516]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80057ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057d2:	4a7d      	ldr	r2, [pc, #500]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f002 0302 	and.w	r3, r2, #2
 80057ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80057f8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80057fc:	460b      	mov	r3, r1
 80057fe:	4313      	orrs	r3, r2
 8005800:	d042      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005802:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005806:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005808:	2b05      	cmp	r3, #5
 800580a:	d825      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800580c:	a201      	add	r2, pc, #4	@ (adr r2, 8005814 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	08005861 	.word	0x08005861
 8005818:	0800582d 	.word	0x0800582d
 800581c:	08005843 	.word	0x08005843
 8005820:	08005861 	.word	0x08005861
 8005824:	08005861 	.word	0x08005861
 8005828:	08005861 	.word	0x08005861
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800582c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005830:	3308      	adds	r3, #8
 8005832:	2101      	movs	r1, #1
 8005834:	4618      	mov	r0, r3
 8005836:	f001 fe43 	bl	80074c0 <RCCEx_PLL2_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005840:	e00f      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005846:	3328      	adds	r3, #40	@ 0x28
 8005848:	2101      	movs	r1, #1
 800584a:	4618      	mov	r0, r3
 800584c:	f001 feea 	bl	8007624 <RCCEx_PLL3_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005856:	e004      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005862:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800586a:	4b57      	ldr	r3, [pc, #348]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	f023 0107 	bic.w	r1, r3, #7
 8005872:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005878:	4a53      	ldr	r2, [pc, #332]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800587a:	430b      	orrs	r3, r1
 800587c:	6553      	str	r3, [r2, #84]	@ 0x54
 800587e:	e003      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005884:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005888:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f002 0304 	and.w	r3, r2, #4
 8005894:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800589e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4313      	orrs	r3, r2
 80058a6:	d044      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80058a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	d825      	bhi.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80058b4:	a201      	add	r2, pc, #4	@ (adr r2, 80058bc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	08005909 	.word	0x08005909
 80058c0:	080058d5 	.word	0x080058d5
 80058c4:	080058eb 	.word	0x080058eb
 80058c8:	08005909 	.word	0x08005909
 80058cc:	08005909 	.word	0x08005909
 80058d0:	08005909 	.word	0x08005909
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058d8:	3308      	adds	r3, #8
 80058da:	2101      	movs	r1, #1
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 fdef 	bl	80074c0 <RCCEx_PLL2_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058e8:	e00f      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058ee:	3328      	adds	r3, #40	@ 0x28
 80058f0:	2101      	movs	r1, #1
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 fe96 	bl	8007624 <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058fe:	e004      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005906:	e000      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800590a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005912:	4b2d      	ldr	r3, [pc, #180]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005916:	f023 0107 	bic.w	r1, r3, #7
 800591a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800591e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005922:	4a29      	ldr	r2, [pc, #164]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005924:	430b      	orrs	r3, r1
 8005926:	6593      	str	r3, [r2, #88]	@ 0x58
 8005928:	e003      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800592e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f002 0320 	and.w	r3, r2, #32
 800593e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005942:	2300      	movs	r3, #0
 8005944:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005948:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800594c:	460b      	mov	r3, r1
 800594e:	4313      	orrs	r3, r2
 8005950:	d057      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005952:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800595a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800595e:	d035      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005964:	d82c      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596a:	d031      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800596c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005970:	d826      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005972:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005976:	d02d      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005978:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800597c:	d820      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800597e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005982:	d012      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005988:	d81a      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d024      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800598e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005992:	d115      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005998:	3308      	adds	r3, #8
 800599a:	2100      	movs	r1, #0
 800599c:	4618      	mov	r0, r3
 800599e:	f001 fd8f 	bl	80074c0 <RCCEx_PLL2_Config>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059a8:	e017      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ae:	3328      	adds	r3, #40	@ 0x28
 80059b0:	2102      	movs	r1, #2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 fe36 	bl	8007624 <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059be:	e00c      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059c6:	e008      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80059c8:	58024400 	.word	0x58024400
        break;
 80059cc:	bf00      	nop
 80059ce:	e004      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80059d0:	bf00      	nop
 80059d2:	e002      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80059d4:	bf00      	nop
 80059d6:	e000      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80059d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059e2:	4bc2      	ldr	r3, [pc, #776]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80059ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f2:	4abe      	ldr	r2, [pc, #760]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a12:	2300      	movs	r3, #0
 8005a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	d055      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a2a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a2e:	d033      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005a30:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a34:	d82c      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3a:	d02f      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a40:	d826      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005a42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a46:	d02b      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005a48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a4c:	d820      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005a4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a52:	d012      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a58:	d81a      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d022      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a62:	d115      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a68:	3308      	adds	r3, #8
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fd27 	bl	80074c0 <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a78:	e015      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a7e:	3328      	adds	r3, #40	@ 0x28
 8005a80:	2102      	movs	r1, #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fdce 	bl	8007624 <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a8e:	e00a      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a96:	e006      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005a98:	bf00      	nop
 8005a9a:	e004      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005a9c:	bf00      	nop
 8005a9e:	e002      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005aa0:	bf00      	nop
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005aae:	4b8f      	ldr	r3, [pc, #572]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005abe:	4a8b      	ldr	r2, [pc, #556]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac4:	e003      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ada:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ae4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d055      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005aee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005af6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005afa:	d033      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005afc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b00:	d82c      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b06:	d02f      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b0c:	d826      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005b0e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b12:	d02b      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005b14:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b18:	d820      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005b1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b1e:	d012      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005b20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b24:	d81a      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d022      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b2e:	d115      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b34:	3308      	adds	r3, #8
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fcc1 	bl	80074c0 <RCCEx_PLL2_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b44:	e015      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b4a:	3328      	adds	r3, #40	@ 0x28
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fd68 	bl	8007624 <RCCEx_PLL3_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b5a:	e00a      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b62:	e006      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005b64:	bf00      	nop
 8005b66:	e004      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10b      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b8a:	4a58      	ldr	r2, [pc, #352]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b90:	e003      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f002 0308 	and.w	r3, r2, #8
 8005ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005baa:	2300      	movs	r3, #0
 8005bac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bb0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	d01e      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bc6:	d10c      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bcc:	3328      	adds	r3, #40	@ 0x28
 8005bce:	2102      	movs	r1, #2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fd27 	bl	8007624 <RCCEx_PLL3_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005be2:	4b42      	ldr	r3, [pc, #264]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f002 0310 	and.w	r3, r2, #16
 8005c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c0e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c12:	460b      	mov	r3, r1
 8005c14:	4313      	orrs	r3, r2
 8005c16:	d01e      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c24:	d10c      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c2a:	3328      	adds	r3, #40	@ 0x28
 8005c2c:	2102      	movs	r1, #2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fcf8 	bl	8007624 <RCCEx_PLL3_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c40:	4b2a      	ldr	r3, [pc, #168]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c50:	4a26      	ldr	r2, [pc, #152]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c52:	430b      	orrs	r3, r1
 8005c54:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c66:	2300      	movs	r3, #0
 8005c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c6c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c70:	460b      	mov	r3, r1
 8005c72:	4313      	orrs	r3, r2
 8005c74:	d040      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c82:	d022      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c88:	d81b      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c92:	d00b      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005c94:	e015      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fc0e 	bl	80074c0 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005caa:	e00f      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cb0:	3328      	adds	r3, #40	@ 0x28
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 fcb5 	bl	8007624 <RCCEx_PLL3_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cc0:	e004      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cc8:	e000      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ccc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10d      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cd4:	4b05      	ldr	r3, [pc, #20]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ce0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ce4:	4a01      	ldr	r2, [pc, #4]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cea:	e005      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005cec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cf4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d06:	2300      	movs	r3, #0
 8005d08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d0a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	d03b      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d20:	d01f      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005d22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d26:	d818      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005d28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d32:	d007      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005d34:	e011      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d36:	4b64      	ldr	r3, [pc, #400]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3a:	4a63      	ldr	r2, [pc, #396]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d42:	e00f      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d48:	3328      	adds	r3, #40	@ 0x28
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fc69 	bl	8007624 <RCCEx_PLL3_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d58:	e004      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d60:	e000      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d6c:	4b56      	ldr	r3, [pc, #344]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d70:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d7c:	4a52      	ldr	r2, [pc, #328]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d82:	e003      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d88:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d9e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005da2:	460b      	mov	r3, r1
 8005da4:	4313      	orrs	r3, r2
 8005da6:	d031      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db6:	d007      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005db8:	e011      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dba:	4b43      	ldr	r3, [pc, #268]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	4a42      	ldr	r2, [pc, #264]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dc6:	e00e      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dcc:	3308      	adds	r3, #8
 8005dce:	2102      	movs	r1, #2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fb75 	bl	80074c0 <RCCEx_PLL2_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ddc:	e003      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005dee:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfc:	4a32      	ldr	r2, [pc, #200]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e02:	e003      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e08:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e22:	460b      	mov	r3, r1
 8005e24:	4313      	orrs	r3, r2
 8005e26:	d00c      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e2c:	3328      	adds	r3, #40	@ 0x28
 8005e2e:	2102      	movs	r1, #2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 fbf7 	bl	8007624 <RCCEx_PLL3_Config>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e50:	2300      	movs	r3, #0
 8005e52:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	d03a      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e6a:	d018      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005e6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e70:	d811      	bhi.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e76:	d014      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e7c:	d80b      	bhi.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d011      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8005e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e86:	d106      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e88:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e94:	e008      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e9c:	e004      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005e9e:	bf00      	nop
 8005ea0:	e002      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005ea2:	bf00      	nop
 8005ea4:	e000      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10d      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb0:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec0:	4a01      	ldr	r2, [pc, #4]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ec6:	e005      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ecc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ed0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ee6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005eea:	460b      	mov	r3, r1
 8005eec:	4313      	orrs	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ef0:	4baa      	ldr	r3, [pc, #680]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005efc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005efe:	4aa7      	ldr	r2, [pc, #668]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f10:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f12:	2300      	movs	r3, #0
 8005f14:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f20:	4b9e      	ldr	r3, [pc, #632]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f30:	4a9a      	ldr	r2, [pc, #616]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f32:	430b      	orrs	r3, r1
 8005f34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f44:	2300      	movs	r3, #0
 8005f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f52:	4b92      	ldr	r3, [pc, #584]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f56:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f60:	4a8e      	ldr	r2, [pc, #568]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f74:	2300      	movs	r3, #0
 8005f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f82:	4b86      	ldr	r3, [pc, #536]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	4a85      	ldr	r2, [pc, #532]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f8c:	6113      	str	r3, [r2, #16]
 8005f8e:	4b83      	ldr	r3, [pc, #524]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f90:	6919      	ldr	r1, [r3, #16]
 8005f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f9a:	4a80      	ldr	r2, [pc, #512]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fae:	2300      	movs	r3, #0
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fb2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fbc:	4b77      	ldr	r3, [pc, #476]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fc0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fca:	4a74      	ldr	r2, [pc, #464]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fde:	2300      	movs	r3, #0
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fec:	4b6b      	ldr	r3, [pc, #428]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ffc:	4a67      	ldr	r2, [pc, #412]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005ffe:	430b      	orrs	r3, r1
 8006000:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006002:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	2100      	movs	r1, #0
 800600c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006014:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006018:	460b      	mov	r3, r1
 800601a:	4313      	orrs	r3, r2
 800601c:	d011      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800601e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006022:	3308      	adds	r3, #8
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fa4a 	bl	80074c0 <RCCEx_PLL2_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006032:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800603e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	2100      	movs	r1, #0
 800604c:	6239      	str	r1, [r7, #32]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
 8006054:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006058:	460b      	mov	r3, r1
 800605a:	4313      	orrs	r3, r2
 800605c:	d011      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800605e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006062:	3308      	adds	r3, #8
 8006064:	2101      	movs	r1, #1
 8006066:	4618      	mov	r0, r3
 8006068:	f001 fa2a 	bl	80074c0 <RCCEx_PLL2_Config>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006072:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800607e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006082:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	2100      	movs	r1, #0
 800608c:	61b9      	str	r1, [r7, #24]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006098:	460b      	mov	r3, r1
 800609a:	4313      	orrs	r3, r2
 800609c:	d011      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800609e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a2:	3308      	adds	r3, #8
 80060a4:	2102      	movs	r1, #2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 fa0a 	bl	80074c0 <RCCEx_PLL2_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80060b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80060c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	2100      	movs	r1, #0
 80060cc:	6139      	str	r1, [r7, #16]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d011      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060e2:	3328      	adds	r3, #40	@ 0x28
 80060e4:	2100      	movs	r1, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 fa9c 	bl	8007624 <RCCEx_PLL3_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80060f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006102:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	2100      	movs	r1, #0
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006118:	460b      	mov	r3, r1
 800611a:	4313      	orrs	r3, r2
 800611c:	d011      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800611e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006122:	3328      	adds	r3, #40	@ 0x28
 8006124:	2101      	movs	r1, #1
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fa7c 	bl	8007624 <RCCEx_PLL3_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006132:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800613e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006142:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	2100      	movs	r1, #0
 800614c:	6039      	str	r1, [r7, #0]
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006158:	460b      	mov	r3, r1
 800615a:	4313      	orrs	r3, r2
 800615c:	d011      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800615e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006162:	3328      	adds	r3, #40	@ 0x28
 8006164:	2102      	movs	r1, #2
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fa5c 	bl	8007624 <RCCEx_PLL3_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006172:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800617e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006182:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e000      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
}
 8006190:	4618      	mov	r0, r3
 8006192:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006196:	46bd      	mov	sp, r7
 8006198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800619c:	58024400 	.word	0x58024400

080061a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b090      	sub	sp, #64	@ 0x40
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80061b2:	430b      	orrs	r3, r1
 80061b4:	f040 8094 	bne.w	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80061b8:	4b9e      	ldr	r3, [pc, #632]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	f200 8087 	bhi.w	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80061ca:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	080061e5 	.word	0x080061e5
 80061d4:	0800620d 	.word	0x0800620d
 80061d8:	08006235 	.word	0x08006235
 80061dc:	080062d1 	.word	0x080062d1
 80061e0:	0800625d 	.word	0x0800625d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061e4:	4b93      	ldr	r3, [pc, #588]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061f0:	d108      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 f810 	bl	800721c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006200:	f000 bd45 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006208:	f000 bd41 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800620c:	4b89      	ldr	r3, [pc, #548]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006218:	d108      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800621a:	f107 0318 	add.w	r3, r7, #24
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fd54 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006228:	f000 bd31 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006230:	f000 bd2d 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006234:	4b7f      	ldr	r3, [pc, #508]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800623c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006240:	d108      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006242:	f107 030c 	add.w	r3, r7, #12
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fe94 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006250:	f000 bd1d 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006258:	f000 bd19 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800625c:	4b75      	ldr	r3, [pc, #468]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800625e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006260:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006264:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006266:	4b73      	ldr	r3, [pc, #460]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b04      	cmp	r3, #4
 8006270:	d10c      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006278:	4b6e      	ldr	r3, [pc, #440]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	08db      	lsrs	r3, r3, #3
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	4a6d      	ldr	r2, [pc, #436]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
 8006288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800628a:	e01f      	b.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800628c:	4b69      	ldr	r3, [pc, #420]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006298:	d106      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800629a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062a0:	d102      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062a2:	4b66      	ldr	r3, [pc, #408]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a6:	e011      	b.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062a8:	4b62      	ldr	r3, [pc, #392]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062b4:	d106      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80062b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062bc:	d102      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062be:	4b60      	ldr	r3, [pc, #384]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c2:	e003      	b.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062c8:	f000 bce1 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062cc:	f000 bcdf 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062d0:	4b5c      	ldr	r3, [pc, #368]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80062d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d4:	f000 bcdb 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062dc:	f000 bcd7 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80062e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80062e8:	430b      	orrs	r3, r1
 80062ea:	f040 80ad 	bne.w	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80062ee:	4b51      	ldr	r3, [pc, #324]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80062f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80062f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062fe:	d056      	beq.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006306:	f200 8090 	bhi.w	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	2bc0      	cmp	r3, #192	@ 0xc0
 800630e:	f000 8088 	beq.w	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	2bc0      	cmp	r3, #192	@ 0xc0
 8006316:	f200 8088 	bhi.w	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631c:	2b80      	cmp	r3, #128	@ 0x80
 800631e:	d032      	beq.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006322:	2b80      	cmp	r3, #128	@ 0x80
 8006324:	f200 8081 	bhi.w	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	2b40      	cmp	r3, #64	@ 0x40
 8006332:	d014      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006334:	e079      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006336:	4b3f      	ldr	r3, [pc, #252]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800633e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006342:	d108      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006348:	4618      	mov	r0, r3
 800634a:	f000 ff67 	bl	800721c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006352:	f000 bc9c 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800635a:	f000 bc98 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800635e:	4b35      	ldr	r3, [pc, #212]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800636a:	d108      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800636c:	f107 0318 	add.w	r3, r7, #24
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fcab 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800637a:	f000 bc88 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006382:	f000 bc84 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006386:	4b2b      	ldr	r3, [pc, #172]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800638e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006392:	d108      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006394:	f107 030c 	add.w	r3, r7, #12
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fdeb 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063a2:	f000 bc74 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063aa:	f000 bc70 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063ae:	4b21      	ldr	r3, [pc, #132]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d10c      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80063c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	08db      	lsrs	r3, r3, #3
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	4a18      	ldr	r2, [pc, #96]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80063d6:	fa22 f303 	lsr.w	r3, r2, r3
 80063da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063dc:	e01f      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063de:	4b15      	ldr	r3, [pc, #84]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ea:	d106      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80063ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063f2:	d102      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063f4:	4b11      	ldr	r3, [pc, #68]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80063f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063f8:	e011      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006406:	d106      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800640e:	d102      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006410:	4b0b      	ldr	r3, [pc, #44]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006414:	e003      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800641a:	f000 bc38 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800641e:	f000 bc36 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006426:	f000 bc32 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642e:	f000 bc2e 	b.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006432:	bf00      	nop
 8006434:	58024400 	.word	0x58024400
 8006438:	03d09000 	.word	0x03d09000
 800643c:	003d0900 	.word	0x003d0900
 8006440:	00f42400 	.word	0x00f42400
 8006444:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006450:	430b      	orrs	r3, r1
 8006452:	f040 809c 	bne.w	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006456:	4b9e      	ldr	r3, [pc, #632]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800645e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006466:	d054      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800646e:	f200 808b 	bhi.w	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006478:	f000 8083 	beq.w	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006482:	f200 8081 	bhi.w	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800648c:	d02f      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006494:	d878      	bhi.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064a2:	d012      	beq.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80064a4:	e070      	b.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064a6:	4b8a      	ldr	r3, [pc, #552]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064b2:	d107      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 feaf 	bl	800721c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064c2:	e3e4      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c8:	e3e1      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064ca:	4b81      	ldr	r3, [pc, #516]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064d6:	d107      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d8:	f107 0318 	add.w	r3, r7, #24
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fbf5 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064e6:	e3d2      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ec:	e3cf      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064ee:	4b78      	ldr	r3, [pc, #480]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064fa:	d107      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064fc:	f107 030c 	add.w	r3, r7, #12
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fd37 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800650a:	e3c0      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006510:	e3bd      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006512:	4b6f      	ldr	r3, [pc, #444]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006516:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800651a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800651c:	4b6c      	ldr	r3, [pc, #432]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d10c      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800652e:	4b68      	ldr	r3, [pc, #416]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	4a66      	ldr	r2, [pc, #408]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800653a:	fa22 f303 	lsr.w	r3, r2, r3
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006540:	e01e      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006542:	4b63      	ldr	r3, [pc, #396]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654e:	d106      	bne.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006556:	d102      	bne.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006558:	4b5f      	ldr	r3, [pc, #380]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800655c:	e010      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800655e:	4b5c      	ldr	r3, [pc, #368]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800656a:	d106      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800656c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006572:	d102      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006574:	4b59      	ldr	r3, [pc, #356]	@ (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006578:	e002      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800657e:	e386      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006580:	e385      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006582:	4b57      	ldr	r3, [pc, #348]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006586:	e382      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800658c:	e37f      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800658e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006592:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006596:	430b      	orrs	r3, r1
 8006598:	f040 80a7 	bne.w	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800659c:	4b4c      	ldr	r3, [pc, #304]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800659e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80065a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065ac:	d055      	beq.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065b4:	f200 8096 	bhi.w	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80065b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065be:	f000 8084 	beq.w	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065c8:	f200 808c 	bhi.w	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065d2:	d030      	beq.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065da:	f200 8083 	bhi.w	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d004      	beq.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ea:	d012      	beq.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80065ec:	e07a      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065ee:	4b38      	ldr	r3, [pc, #224]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065fa:	d107      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fe0b 	bl	800721c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800660a:	e340      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006610:	e33d      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006612:	4b2f      	ldr	r3, [pc, #188]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800661a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800661e:	d107      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006620:	f107 0318 	add.w	r3, r7, #24
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fb51 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800662e:	e32e      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006634:	e32b      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006636:	4b26      	ldr	r3, [pc, #152]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800663e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006642:	d107      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006644:	f107 030c 	add.w	r3, r7, #12
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fc93 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006652:	e31c      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006658:	e319      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800665a:	4b1d      	ldr	r3, [pc, #116]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800665c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800665e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006664:	4b1a      	ldr	r3, [pc, #104]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b04      	cmp	r3, #4
 800666e:	d10c      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006676:	4b16      	ldr	r3, [pc, #88]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	08db      	lsrs	r3, r3, #3
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	4a14      	ldr	r2, [pc, #80]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006682:	fa22 f303 	lsr.w	r3, r2, r3
 8006686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006688:	e01e      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800668a:	4b11      	ldr	r3, [pc, #68]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006696:	d106      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800669e:	d102      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066a0:	4b0d      	ldr	r3, [pc, #52]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a4:	e010      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066b2:	d106      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80066b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ba:	d102      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066bc:	4b07      	ldr	r3, [pc, #28]	@ (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066c0:	e002      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80066c6:	e2e2      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066c8:	e2e1      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066ca:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80066cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ce:	e2de      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066d0:	58024400 	.word	0x58024400
 80066d4:	03d09000 	.word	0x03d09000
 80066d8:	003d0900 	.word	0x003d0900
 80066dc:	00f42400 	.word	0x00f42400
 80066e0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066e8:	e2d1      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80066ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ee:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80066f2:	430b      	orrs	r3, r1
 80066f4:	f040 809c 	bne.w	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80066f8:	4b93      	ldr	r3, [pc, #588]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066fc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006700:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006708:	d054      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006710:	f200 808b 	bhi.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006716:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800671a:	f000 8083 	beq.w	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800671e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006720:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006724:	f200 8081 	bhi.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800672e:	d02f      	beq.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006736:	d878      	bhi.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006744:	d012      	beq.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006746:	e070      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006748:	4b7f      	ldr	r3, [pc, #508]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006750:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006754:	d107      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fd5e 	bl	800721c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006764:	e293      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800676a:	e290      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800676c:	4b76      	ldr	r3, [pc, #472]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006778:	d107      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800677a:	f107 0318 	add.w	r3, r7, #24
 800677e:	4618      	mov	r0, r3
 8006780:	f000 faa4 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006788:	e281      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800678e:	e27e      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006790:	4b6d      	ldr	r3, [pc, #436]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800679c:	d107      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800679e:	f107 030c 	add.w	r3, r7, #12
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fbe6 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ac:	e26f      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b2:	e26c      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067b4:	4b64      	ldr	r3, [pc, #400]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067be:	4b62      	ldr	r3, [pc, #392]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d10c      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80067ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d109      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067d0:	4b5d      	ldr	r3, [pc, #372]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	08db      	lsrs	r3, r3, #3
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	4a5c      	ldr	r2, [pc, #368]	@ (800694c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e2:	e01e      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067e4:	4b58      	ldr	r3, [pc, #352]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067f0:	d106      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80067f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067f8:	d102      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067fa:	4b55      	ldr	r3, [pc, #340]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067fe:	e010      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006800:	4b51      	ldr	r3, [pc, #324]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800680c:	d106      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800680e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006814:	d102      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006816:	4b4f      	ldr	r3, [pc, #316]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800681a:	e002      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006820:	e235      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006822:	e234      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006824:	4b4c      	ldr	r3, [pc, #304]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006828:	e231      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800682e:	e22e      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006834:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006838:	430b      	orrs	r3, r1
 800683a:	f040 808f 	bne.w	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800683e:	4b42      	ldr	r3, [pc, #264]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006842:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006846:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800684e:	d06b      	beq.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006856:	d874      	bhi.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800685e:	d056      	beq.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006866:	d86c      	bhi.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800686e:	d03b      	beq.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006876:	d864      	bhi.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800687e:	d021      	beq.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006886:	d85c      	bhi.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800688e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006894:	d004      	beq.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006896:	e054      	b.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006898:	f7fe fa0c 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 800689c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800689e:	e1f6      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068a0:	4b29      	ldr	r3, [pc, #164]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ac:	d107      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ae:	f107 0318 	add.w	r3, r7, #24
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fa0a 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068bc:	e1e7      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c2:	e1e4      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068c4:	4b20      	ldr	r3, [pc, #128]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d0:	d107      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d2:	f107 030c 	add.w	r3, r7, #12
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fb4c 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e0:	e1d5      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e6:	e1d2      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068e8:	4b17      	ldr	r3, [pc, #92]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d109      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068f4:	4b14      	ldr	r3, [pc, #80]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	08db      	lsrs	r3, r3, #3
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	4a13      	ldr	r2, [pc, #76]	@ (800694c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006906:	e1c2      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690c:	e1bf      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800690e:	4b0e      	ldr	r3, [pc, #56]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800691a:	d102      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800691c:	4b0c      	ldr	r3, [pc, #48]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006920:	e1b5      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006926:	e1b2      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006928:	4b07      	ldr	r3, [pc, #28]	@ (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006934:	d102      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006936:	4b07      	ldr	r3, [pc, #28]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693a:	e1a8      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006940:	e1a5      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006946:	e1a2      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006948:	58024400 	.word	0x58024400
 800694c:	03d09000 	.word	0x03d09000
 8006950:	003d0900 	.word	0x003d0900
 8006954:	00f42400 	.word	0x00f42400
 8006958:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800695c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006960:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006964:	430b      	orrs	r3, r1
 8006966:	d173      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006968:	4b9c      	ldr	r3, [pc, #624]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800696a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006970:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006978:	d02f      	beq.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800697a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006980:	d863      	bhi.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698e:	d012      	beq.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006990:	e05b      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006992:	4b92      	ldr	r3, [pc, #584]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800699a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800699e:	d107      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a0:	f107 0318 	add.w	r3, r7, #24
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 f991 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ae:	e16e      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b4:	e16b      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069b6:	4b89      	ldr	r3, [pc, #548]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069c2:	d107      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069c4:	f107 030c 	add.w	r3, r7, #12
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fad3 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d2:	e15c      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d8:	e159      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069da:	4b80      	ldr	r3, [pc, #512]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069e4:	4b7d      	ldr	r3, [pc, #500]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d10c      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80069f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069f6:	4b79      	ldr	r3, [pc, #484]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	08db      	lsrs	r3, r3, #3
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	4a77      	ldr	r2, [pc, #476]	@ (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a08:	e01e      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a0a:	4b74      	ldr	r3, [pc, #464]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a16:	d106      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a1e:	d102      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a20:	4b70      	ldr	r3, [pc, #448]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a24:	e010      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a26:	4b6d      	ldr	r3, [pc, #436]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a32:	d106      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a3a:	d102      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a40:	e002      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a46:	e122      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a48:	e121      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a4e:	e11e      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a54:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	d133      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a5c:	4b5f      	ldr	r3, [pc, #380]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d004      	beq.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a72:	d012      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006a74:	e023      	b.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a76:	4b59      	ldr	r3, [pc, #356]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a82:	d107      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fbc7 	bl	800721c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a92:	e0fc      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a98:	e0f9      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a9a:	4b50      	ldr	r3, [pc, #320]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aa6:	d107      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aa8:	f107 0318 	add.w	r3, r7, #24
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 f90d 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ab6:	e0ea      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006abc:	e0e7      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac2:	e0e4      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006acc:	430b      	orrs	r3, r1
 8006ace:	f040 808d 	bne.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006ad2:	4b42      	ldr	r3, [pc, #264]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006ada:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ae2:	d06b      	beq.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006aea:	d874      	bhi.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af2:	d056      	beq.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006afa:	d86c      	bhi.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b02:	d03b      	beq.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b0a:	d864      	bhi.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b12:	d021      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b1a:	d85c      	bhi.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b28:	d004      	beq.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006b2a:	e054      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006b2c:	f000 f8b8 	bl	8006ca0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b32:	e0ac      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b34:	4b29      	ldr	r3, [pc, #164]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b40:	d107      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b42:	f107 0318 	add.w	r3, r7, #24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f8c0 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b50:	e09d      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b56:	e09a      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b58:	4b20      	ldr	r3, [pc, #128]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b64:	d107      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b66:	f107 030c 	add.w	r3, r7, #12
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fa02 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b74:	e08b      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b7a:	e088      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b7c:	4b17      	ldr	r3, [pc, #92]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d109      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b88:	4b14      	ldr	r3, [pc, #80]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	08db      	lsrs	r3, r3, #3
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	4a13      	ldr	r2, [pc, #76]	@ (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006b94:	fa22 f303 	lsr.w	r3, r2, r3
 8006b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b9a:	e078      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba0:	e075      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bae:	d102      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bb4:	e06b      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bba:	e068      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006bbc:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bc8:	d102      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006bca:	4b07      	ldr	r3, [pc, #28]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bce:	e05e      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd4:	e05b      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bda:	e058      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bdc:	58024400 	.word	0x58024400
 8006be0:	03d09000 	.word	0x03d09000
 8006be4:	003d0900 	.word	0x003d0900
 8006be8:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	d148      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006bf8:	4b27      	ldr	r3, [pc, #156]	@ (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c08:	d02a      	beq.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c10:	d838      	bhi.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d004      	beq.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c1e:	d00d      	beq.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006c20:	e030      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c22:	4b1d      	ldr	r3, [pc, #116]	@ (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c2e:	d102      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006c30:	4b1a      	ldr	r3, [pc, #104]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c34:	e02b      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c3a:	e028      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c3c:	4b16      	ldr	r3, [pc, #88]	@ (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c48:	d107      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fae4 	bl	800721c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c58:	e019      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c5e:	e016      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c60:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c6e:	f107 0318 	add.w	r3, r7, #24
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 f82a 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c7c:	e007      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c82:	e004      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c88:	e001      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3740      	adds	r7, #64	@ 0x40
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	00f42400 	.word	0x00f42400

08006ca0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ca4:	f7fd ffd6 	bl	8004c54 <HAL_RCC_GetHCLKFreq>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	091b      	lsrs	r3, r3, #4
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	4904      	ldr	r1, [pc, #16]	@ (8006cc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006cb6:	5ccb      	ldrb	r3, [r1, r3]
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	0800c8f4 	.word	0x0800c8f4

08006ccc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b089      	sub	sp, #36	@ 0x24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cd4:	4ba1      	ldr	r3, [pc, #644]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006cde:	4b9f      	ldr	r3, [pc, #636]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce2:	0b1b      	lsrs	r3, r3, #12
 8006ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ce8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cea:	4b9c      	ldr	r3, [pc, #624]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	091b      	lsrs	r3, r3, #4
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cf6:	4b99      	ldr	r3, [pc, #612]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfa:	08db      	lsrs	r3, r3, #3
 8006cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8111 	beq.w	8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	f000 8083 	beq.w	8006e28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	f200 80a1 	bhi.w	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d056      	beq.n	8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d36:	e099      	b.n	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d38:	4b88      	ldr	r3, [pc, #544]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d02d      	beq.n	8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d44:	4b85      	ldr	r3, [pc, #532]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	08db      	lsrs	r3, r3, #3
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	4a84      	ldr	r2, [pc, #528]	@ (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6e:	4b7b      	ldr	r3, [pc, #492]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d9e:	e087      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de2:	e065      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df6:	4b59      	ldr	r3, [pc, #356]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e26:	e043      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b48      	ldr	r3, [pc, #288]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e6a:	e021      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7e:	4b37      	ldr	r3, [pc, #220]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	0a5b      	lsrs	r3, r3, #9
 8006eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed6:	ee17 2a90 	vmov	r2, s15
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ede:	4b1f      	ldr	r3, [pc, #124]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ef4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f04:	ee17 2a90 	vmov	r2, s15
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006f0c:	4b13      	ldr	r3, [pc, #76]	@ (8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f10:	0e1b      	lsrs	r3, r3, #24
 8006f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f32:	ee17 2a90 	vmov	r2, s15
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f3a:	e008      	b.n	8006f4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	609a      	str	r2, [r3, #8]
}
 8006f4e:	bf00      	nop
 8006f50:	3724      	adds	r7, #36	@ 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	58024400 	.word	0x58024400
 8006f60:	03d09000 	.word	0x03d09000
 8006f64:	46000000 	.word	0x46000000
 8006f68:	4c742400 	.word	0x4c742400
 8006f6c:	4a742400 	.word	0x4a742400
 8006f70:	4b742400 	.word	0x4b742400

08006f74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b089      	sub	sp, #36	@ 0x24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f7c:	4ba1      	ldr	r3, [pc, #644]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f86:	4b9f      	ldr	r3, [pc, #636]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8a:	0d1b      	lsrs	r3, r3, #20
 8006f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f92:	4b9c      	ldr	r3, [pc, #624]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	0a1b      	lsrs	r3, r3, #8
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f9e:	4b99      	ldr	r3, [pc, #612]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa2:	08db      	lsrs	r3, r3, #3
 8006fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8111 	beq.w	80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	f000 8083 	beq.w	80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	f200 80a1 	bhi.w	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d056      	beq.n	800708c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fde:	e099      	b.n	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe0:	4b88      	ldr	r3, [pc, #544]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d02d      	beq.n	8007048 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fec:	4b85      	ldr	r3, [pc, #532]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	08db      	lsrs	r3, r3, #3
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	4a84      	ldr	r2, [pc, #528]	@ (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007016:	4b7b      	ldr	r3, [pc, #492]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007026:	ed97 6a03 	vldr	s12, [r7, #12]
 800702a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800702e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800703a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007046:	e087      	b.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b6a      	ldr	r3, [pc, #424]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a03 	vldr	s12, [r7, #12]
 800706e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800708a:	e065      	b.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800709a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709e:	4b59      	ldr	r3, [pc, #356]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ce:	e043      	b.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e2:	4b48      	ldr	r3, [pc, #288]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007112:	e021      	b.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007126:	4b37      	ldr	r3, [pc, #220]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007136:	ed97 6a03 	vldr	s12, [r7, #12]
 800713a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800720c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800713e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007156:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007158:	4b2a      	ldr	r3, [pc, #168]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715c:	0a5b      	lsrs	r3, r3, #9
 800715e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800716e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007172:	edd7 6a07 	vldr	s13, [r7, #28]
 8007176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800717a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717e:	ee17 2a90 	vmov	r2, s15
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007186:	4b1f      	ldr	r3, [pc, #124]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800719c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ac:	ee17 2a90 	vmov	r2, s15
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80071b4:	4b13      	ldr	r3, [pc, #76]	@ (8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	0e1b      	lsrs	r3, r3, #24
 80071ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071da:	ee17 2a90 	vmov	r2, s15
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071e2:	e008      	b.n	80071f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	609a      	str	r2, [r3, #8]
}
 80071f6:	bf00      	nop
 80071f8:	3724      	adds	r7, #36	@ 0x24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	58024400 	.word	0x58024400
 8007208:	03d09000 	.word	0x03d09000
 800720c:	46000000 	.word	0x46000000
 8007210:	4c742400 	.word	0x4c742400
 8007214:	4a742400 	.word	0x4a742400
 8007218:	4b742400 	.word	0x4b742400

0800721c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800721c:	b480      	push	{r7}
 800721e:	b089      	sub	sp, #36	@ 0x24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007224:	4ba0      	ldr	r3, [pc, #640]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800722e:	4b9e      	ldr	r3, [pc, #632]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007232:	091b      	lsrs	r3, r3, #4
 8007234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007238:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800723a:	4b9b      	ldr	r3, [pc, #620]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007244:	4b98      	ldr	r3, [pc, #608]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007248:	08db      	lsrs	r3, r3, #3
 800724a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	fb02 f303 	mul.w	r3, r2, r3
 8007254:	ee07 3a90 	vmov	s15, r3
 8007258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8111 	beq.w	800748a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b02      	cmp	r3, #2
 800726c:	f000 8083 	beq.w	8007376 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b02      	cmp	r3, #2
 8007274:	f200 80a1 	bhi.w	80073ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d056      	beq.n	8007332 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007284:	e099      	b.n	80073ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007286:	4b88      	ldr	r3, [pc, #544]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d02d      	beq.n	80072ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007292:	4b85      	ldr	r3, [pc, #532]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	08db      	lsrs	r3, r3, #3
 8007298:	f003 0303 	and.w	r3, r3, #3
 800729c:	4a83      	ldr	r2, [pc, #524]	@ (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800729e:	fa22 f303 	lsr.w	r3, r2, r3
 80072a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	ee07 3a90 	vmov	s15, r3
 80072b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072bc:	4b7a      	ldr	r3, [pc, #488]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80074b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072ec:	e087      	b.n	80073fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80074b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007300:	4b69      	ldr	r3, [pc, #420]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007308:	ee07 3a90 	vmov	s15, r3
 800730c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007310:	ed97 6a03 	vldr	s12, [r7, #12]
 8007314:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80074b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007330:	e065      	b.n	80073fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	ee07 3a90 	vmov	s15, r3
 8007338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80074b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007344:	4b58      	ldr	r3, [pc, #352]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734c:	ee07 3a90 	vmov	s15, r3
 8007350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007354:	ed97 6a03 	vldr	s12, [r7, #12]
 8007358:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80074b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800735c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007364:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007370:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007374:	e043      	b.n	80073fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007380:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80074bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007388:	4b47      	ldr	r3, [pc, #284]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007390:	ee07 3a90 	vmov	s15, r3
 8007394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007398:	ed97 6a03 	vldr	s12, [r7, #12]
 800739c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80074b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b8:	e021      	b.n	80073fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	ee07 3a90 	vmov	s15, r3
 80073c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80074b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80073c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073cc:	4b36      	ldr	r3, [pc, #216]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d4:	ee07 3a90 	vmov	s15, r3
 80073d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80074b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80073fe:	4b2a      	ldr	r3, [pc, #168]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007402:	0a5b      	lsrs	r3, r3, #9
 8007404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007408:	ee07 3a90 	vmov	s15, r3
 800740c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007410:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007418:	edd7 6a07 	vldr	s13, [r7, #28]
 800741c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007424:	ee17 2a90 	vmov	r2, s15
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800742c:	4b1e      	ldr	r3, [pc, #120]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	0c1b      	lsrs	r3, r3, #16
 8007432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007446:	edd7 6a07 	vldr	s13, [r7, #28]
 800744a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800744e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007452:	ee17 2a90 	vmov	r2, s15
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800745a:	4b13      	ldr	r3, [pc, #76]	@ (80074a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800745c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745e:	0e1b      	lsrs	r3, r3, #24
 8007460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007474:	edd7 6a07 	vldr	s13, [r7, #28]
 8007478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800747c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007480:	ee17 2a90 	vmov	r2, s15
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007488:	e008      	b.n	800749c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	609a      	str	r2, [r3, #8]
}
 800749c:	bf00      	nop
 800749e:	3724      	adds	r7, #36	@ 0x24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	58024400 	.word	0x58024400
 80074ac:	03d09000 	.word	0x03d09000
 80074b0:	46000000 	.word	0x46000000
 80074b4:	4c742400 	.word	0x4c742400
 80074b8:	4a742400 	.word	0x4a742400
 80074bc:	4b742400 	.word	0x4b742400

080074c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ce:	4b53      	ldr	r3, [pc, #332]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80074d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d101      	bne.n	80074de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e099      	b.n	8007612 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074de:	4b4f      	ldr	r3, [pc, #316]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a4e      	ldr	r2, [pc, #312]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80074e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ea:	f7fb fd9d 	bl	8003028 <HAL_GetTick>
 80074ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074f0:	e008      	b.n	8007504 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074f2:	f7fb fd99 	bl	8003028 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e086      	b.n	8007612 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007504:	4b45      	ldr	r3, [pc, #276]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1f0      	bne.n	80074f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007510:	4b42      	ldr	r3, [pc, #264]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 8007512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007514:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	031b      	lsls	r3, r3, #12
 800751e:	493f      	ldr	r1, [pc, #252]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 8007520:	4313      	orrs	r3, r2
 8007522:	628b      	str	r3, [r1, #40]	@ 0x28
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	3b01      	subs	r3, #1
 800752a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	3b01      	subs	r3, #1
 8007534:	025b      	lsls	r3, r3, #9
 8007536:	b29b      	uxth	r3, r3
 8007538:	431a      	orrs	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	3b01      	subs	r3, #1
 8007540:	041b      	lsls	r3, r3, #16
 8007542:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	3b01      	subs	r3, #1
 800754e:	061b      	lsls	r3, r3, #24
 8007550:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007554:	4931      	ldr	r1, [pc, #196]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 8007556:	4313      	orrs	r3, r2
 8007558:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800755a:	4b30      	ldr	r3, [pc, #192]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	492d      	ldr	r1, [pc, #180]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 8007568:	4313      	orrs	r3, r2
 800756a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800756c:	4b2b      	ldr	r3, [pc, #172]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 800756e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007570:	f023 0220 	bic.w	r2, r3, #32
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	4928      	ldr	r1, [pc, #160]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 800757a:	4313      	orrs	r3, r2
 800757c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800757e:	4b27      	ldr	r3, [pc, #156]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	4a26      	ldr	r2, [pc, #152]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 8007584:	f023 0310 	bic.w	r3, r3, #16
 8007588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800758a:	4b24      	ldr	r3, [pc, #144]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 800758c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800758e:	4b24      	ldr	r3, [pc, #144]	@ (8007620 <RCCEx_PLL2_Config+0x160>)
 8007590:	4013      	ands	r3, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	69d2      	ldr	r2, [r2, #28]
 8007596:	00d2      	lsls	r2, r2, #3
 8007598:	4920      	ldr	r1, [pc, #128]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 800759a:	4313      	orrs	r3, r2
 800759c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800759e:	4b1f      	ldr	r3, [pc, #124]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	4a1e      	ldr	r2, [pc, #120]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075a4:	f043 0310 	orr.w	r3, r3, #16
 80075a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075b0:	4b1a      	ldr	r3, [pc, #104]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	4a19      	ldr	r2, [pc, #100]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075bc:	e00f      	b.n	80075de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d106      	bne.n	80075d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80075c4:	4b15      	ldr	r3, [pc, #84]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	4a14      	ldr	r2, [pc, #80]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075d0:	e005      	b.n	80075de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075d2:	4b12      	ldr	r3, [pc, #72]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	4a11      	ldr	r2, [pc, #68]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075de:	4b0f      	ldr	r3, [pc, #60]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a0e      	ldr	r2, [pc, #56]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 80075e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ea:	f7fb fd1d 	bl	8003028 <HAL_GetTick>
 80075ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075f0:	e008      	b.n	8007604 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075f2:	f7fb fd19 	bl	8003028 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d901      	bls.n	8007604 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e006      	b.n	8007612 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007604:	4b05      	ldr	r3, [pc, #20]	@ (800761c <RCCEx_PLL2_Config+0x15c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0f0      	beq.n	80075f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007610:	7bfb      	ldrb	r3, [r7, #15]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	58024400 	.word	0x58024400
 8007620:	ffff0007 	.word	0xffff0007

08007624 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007632:	4b53      	ldr	r3, [pc, #332]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	2b03      	cmp	r3, #3
 800763c:	d101      	bne.n	8007642 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e099      	b.n	8007776 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007642:	4b4f      	ldr	r3, [pc, #316]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a4e      	ldr	r2, [pc, #312]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800764c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764e:	f7fb fceb 	bl	8003028 <HAL_GetTick>
 8007652:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007654:	e008      	b.n	8007668 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007656:	f7fb fce7 	bl	8003028 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e086      	b.n	8007776 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007668:	4b45      	ldr	r3, [pc, #276]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1f0      	bne.n	8007656 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007674:	4b42      	ldr	r3, [pc, #264]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007678:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	051b      	lsls	r3, r3, #20
 8007682:	493f      	ldr	r1, [pc, #252]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007684:	4313      	orrs	r3, r2
 8007686:	628b      	str	r3, [r1, #40]	@ 0x28
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	3b01      	subs	r3, #1
 800768e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	3b01      	subs	r3, #1
 8007698:	025b      	lsls	r3, r3, #9
 800769a:	b29b      	uxth	r3, r3
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	061b      	lsls	r3, r3, #24
 80076b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076b8:	4931      	ldr	r1, [pc, #196]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076be:	4b30      	ldr	r3, [pc, #192]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	492d      	ldr	r1, [pc, #180]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	4928      	ldr	r1, [pc, #160]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076e2:	4b27      	ldr	r3, [pc, #156]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 80076e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e6:	4a26      	ldr	r2, [pc, #152]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 80076e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076ee:	4b24      	ldr	r3, [pc, #144]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 80076f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076f2:	4b24      	ldr	r3, [pc, #144]	@ (8007784 <RCCEx_PLL3_Config+0x160>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	69d2      	ldr	r2, [r2, #28]
 80076fa:	00d2      	lsls	r2, r2, #3
 80076fc:	4920      	ldr	r1, [pc, #128]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007702:	4b1f      	ldr	r3, [pc, #124]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007706:	4a1e      	ldr	r2, [pc, #120]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800770c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007714:	4b1a      	ldr	r3, [pc, #104]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007718:	4a19      	ldr	r2, [pc, #100]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 800771a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800771e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007720:	e00f      	b.n	8007742 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d106      	bne.n	8007736 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007728:	4b15      	ldr	r3, [pc, #84]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	4a14      	ldr	r2, [pc, #80]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 800772e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007732:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007734:	e005      	b.n	8007742 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007736:	4b12      	ldr	r3, [pc, #72]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773a:	4a11      	ldr	r2, [pc, #68]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 800773c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007740:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007742:	4b0f      	ldr	r3, [pc, #60]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a0e      	ldr	r2, [pc, #56]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 8007748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800774c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774e:	f7fb fc6b 	bl	8003028 <HAL_GetTick>
 8007752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007754:	e008      	b.n	8007768 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007756:	f7fb fc67 	bl	8003028 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e006      	b.n	8007776 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007768:	4b05      	ldr	r3, [pc, #20]	@ (8007780 <RCCEx_PLL3_Config+0x15c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0f0      	beq.n	8007756 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007774:	7bfb      	ldrb	r3, [r7, #15]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	58024400 	.word	0x58024400
 8007784:	ffff0007 	.word	0xffff0007

08007788 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	@ 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e075      	b.n	8007886 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7f9 fc8f 	bl	80010d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2204      	movs	r2, #4
 80077b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f868 	bl	8007890 <HAL_SD_InitCard>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e05d      	b.n	8007886 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80077ca:	f107 0308 	add.w	r3, r7, #8
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fdb5 	bl	8008340 <HAL_SD_GetCardStatus>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e052      	b.n	8007886 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80077e0:	7e3b      	ldrb	r3, [r7, #24]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80077e6:	7e7b      	ldrb	r3, [r7, #25]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d10a      	bne.n	800780a <HAL_SD_Init+0x82>
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <HAL_SD_Init+0x78>
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007806:	659a      	str	r2, [r3, #88]	@ 0x58
 8007808:	e00b      	b.n	8007822 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780e:	2b01      	cmp	r3, #1
 8007810:	d104      	bne.n	800781c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007818:	659a      	str	r2, [r3, #88]	@ 0x58
 800781a:	e002      	b.n	8007822 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fe73 	bl	8008514 <HAL_SD_ConfigWideBusOperation>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e026      	b.n	8007886 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007838:	f7fb fbf6 	bl	8003028 <HAL_GetTick>
 800783c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800783e:	e011      	b.n	8007864 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007840:	f7fb fbf2 	bl	8003028 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d109      	bne.n	8007864 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007856:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e010      	b.n	8007886 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 ff67 	bl	8008738 <HAL_SD_GetCardState>
 800786a:	4603      	mov	r3, r0
 800786c:	2b04      	cmp	r3, #4
 800786e:	d1e7      	bne.n	8007840 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3728      	adds	r7, #40	@ 0x28
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b08d      	sub	sp, #52	@ 0x34
 8007894:	af02      	add	r7, sp, #8
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800789c:	2300      	movs	r3, #0
 800789e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80078a8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80078ac:	f04f 0100 	mov.w	r1, #0
 80078b0:	f7fe fc76 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80078b4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80078ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e070      	b.n	80079b2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	4a39      	ldr	r2, [pc, #228]	@ (80079bc <HAL_SD_InitCard+0x12c>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	091b      	lsrs	r3, r3, #4
 80078dc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681c      	ldr	r4, [r3, #0]
 80078e2:	466a      	mov	r2, sp
 80078e4:	f107 0318 	add.w	r3, r7, #24
 80078e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80078f0:	f107 030c 	add.w	r3, r7, #12
 80078f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078f6:	4620      	mov	r0, r4
 80078f8:	f003 fcf8 	bl	800b2ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4618      	mov	r0, r3
 8007902:	f003 fd3b 	bl	800b37c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007912:	fbb2 f3f3 	udiv	r3, r2, r3
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800791e:	4a28      	ldr	r2, [pc, #160]	@ (80079c0 <HAL_SD_InitCard+0x130>)
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	fbb2 f3f3 	udiv	r3, r2, r3
 8007926:	3301      	adds	r3, #1
 8007928:	4618      	mov	r0, r3
 800792a:	f7fb fb89 	bl	8003040 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fff0 	bl	8008914 <SD_PowerON>
 8007934:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e02e      	b.n	80079b2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 ff0f 	bl	8008778 <SD_InitCard>
 800795a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e01b      	b.n	80079b2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007982:	4618      	mov	r0, r3
 8007984:	f003 fd90 	bl	800b4a8 <SDMMC_CmdBlockLength>
 8007988:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00f      	beq.n	80079b0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a0b      	ldr	r2, [pc, #44]	@ (80079c4 <HAL_SD_InitCard+0x134>)
 8007996:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	372c      	adds	r7, #44	@ 0x2c
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd90      	pop	{r4, r7, pc}
 80079ba:	bf00      	nop
 80079bc:	014f8b59 	.word	0x014f8b59
 80079c0:	00012110 	.word	0x00012110
 80079c4:	1fe00fff 	.word	0x1fe00fff

080079c8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b092      	sub	sp, #72	@ 0x48
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80079d6:	f7fb fb27 	bl	8003028 <HAL_GetTick>
 80079da:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d107      	bne.n	80079fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e167      	b.n	8007cca <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	f040 815a 	bne.w	8007cbc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	441a      	add	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d907      	bls.n	8007a2c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a20:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e14e      	b.n	8007cca <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2203      	movs	r2, #3
 8007a30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d002      	beq.n	8007a4a <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8007a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a46:	025b      	lsls	r3, r3, #9
 8007a48:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	025b      	lsls	r3, r3, #9
 8007a54:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a56:	2390      	movs	r3, #144	@ 0x90
 8007a58:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f107 0214 	add.w	r2, r7, #20
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f003 fced 	bl	800b450 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a84:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d90a      	bls.n	8007aa2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f003 fd4b 	bl	800b534 <SDMMC_CmdReadMultiBlock>
 8007a9e:	6478      	str	r0, [r7, #68]	@ 0x44
 8007aa0:	e009      	b.n	8007ab6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f003 fd1d 	bl	800b4ee <SDMMC_CmdReadSingleBlock>
 8007ab4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d012      	beq.n	8007ae2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a84      	ldr	r2, [pc, #528]	@ (8007cd4 <HAL_SD_ReadBlocks+0x30c>)
 8007ac2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aca:	431a      	orrs	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e0f3      	b.n	8007cca <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ae6:	e058      	b.n	8007b9a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d033      	beq.n	8007b5e <HAL_SD_ReadBlocks+0x196>
 8007af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af8:	2b1f      	cmp	r3, #31
 8007afa:	d930      	bls.n	8007b5e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007afc:	2300      	movs	r3, #0
 8007afe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b00:	e027      	b.n	8007b52 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f003 fc1a 	bl	800b340 <SDMMC_ReadFIFO>
 8007b0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b18:	3301      	adds	r3, #1
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1e:	0a1b      	lsrs	r3, r3, #8
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b28:	3301      	adds	r3, #1
 8007b2a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b38:	3301      	adds	r3, #1
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b3e:	0e1b      	lsrs	r3, r3, #24
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b48:	3301      	adds	r3, #1
 8007b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b4e:	3301      	adds	r3, #1
 8007b50:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b54:	2b07      	cmp	r3, #7
 8007b56:	d9d4      	bls.n	8007b02 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8007b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5a:	3b20      	subs	r3, #32
 8007b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007b5e:	f7fb fa63 	bl	8003028 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d902      	bls.n	8007b74 <HAL_SD_ReadBlocks+0x1ac>
 8007b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d112      	bne.n	8007b9a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a56      	ldr	r2, [pc, #344]	@ (8007cd4 <HAL_SD_ReadBlocks+0x30c>)
 8007b7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e097      	b.n	8007cca <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba0:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d09f      	beq.n	8007ae8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bb6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d022      	beq.n	8007c0c <HAL_SD_ReadBlocks+0x244>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d91f      	bls.n	8007c0c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d01b      	beq.n	8007c0c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f003 fd15 	bl	800b608 <SDMMC_CmdStopTransfer>
 8007bde:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d012      	beq.n	8007c0c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a3a      	ldr	r2, [pc, #232]	@ (8007cd4 <HAL_SD_ReadBlocks+0x30c>)
 8007bec:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e05e      	b.n	8007cca <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d012      	beq.n	8007c40 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8007cd4 <HAL_SD_ReadBlocks+0x30c>)
 8007c20:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c26:	f043 0208 	orr.w	r2, r3, #8
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e044      	b.n	8007cca <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d012      	beq.n	8007c74 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a20      	ldr	r2, [pc, #128]	@ (8007cd4 <HAL_SD_ReadBlocks+0x30c>)
 8007c54:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c5a:	f043 0202 	orr.w	r2, r3, #2
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e02a      	b.n	8007cca <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d012      	beq.n	8007ca8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a13      	ldr	r2, [pc, #76]	@ (8007cd4 <HAL_SD_ReadBlocks+0x30c>)
 8007c88:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e010      	b.n	8007cca <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a0a      	ldr	r2, [pc, #40]	@ (8007cd8 <HAL_SD_ReadBlocks+0x310>)
 8007cae:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e006      	b.n	8007cca <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cc0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
  }
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3748      	adds	r7, #72	@ 0x48
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	1fe00fff 	.word	0x1fe00fff
 8007cd8:	18000f3a 	.word	0x18000f3a

08007cdc <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b092      	sub	sp, #72	@ 0x48
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cea:	f7fb f99d 	bl	8003028 <HAL_GetTick>
 8007cee:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d107      	bne.n	8007d0e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d02:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e16b      	b.n	8007fe6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	f040 815e 	bne.w	8007fd8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	441a      	add	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d907      	bls.n	8007d40 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d34:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e152      	b.n	8007fe6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2203      	movs	r2, #3
 8007d44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d002      	beq.n	8007d5e <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	025b      	lsls	r3, r3, #9
 8007d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d62:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	025b      	lsls	r3, r3, #9
 8007d68:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d6a:	2390      	movs	r3, #144	@ 0x90
 8007d6c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f107 0218 	add.w	r2, r7, #24
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f003 fb63 	bl	800b450 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d98:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d90a      	bls.n	8007db6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2220      	movs	r2, #32
 8007da4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dac:	4618      	mov	r0, r3
 8007dae:	f003 fc07 	bl	800b5c0 <SDMMC_CmdWriteMultiBlock>
 8007db2:	6478      	str	r0, [r7, #68]	@ 0x44
 8007db4:	e009      	b.n	8007dca <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2210      	movs	r2, #16
 8007dba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f003 fbd9 	bl	800b57a <SDMMC_CmdWriteSingleBlock>
 8007dc8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d012      	beq.n	8007df6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a86      	ldr	r2, [pc, #536]	@ (8007ff0 <HAL_SD_WriteBlocks+0x314>)
 8007dd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dde:	431a      	orrs	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e0f7      	b.n	8007fe6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007dfa:	e05c      	b.n	8007eb6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d037      	beq.n	8007e7a <HAL_SD_WriteBlocks+0x19e>
 8007e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e0c:	2b1f      	cmp	r3, #31
 8007e0e:	d934      	bls.n	8007e7a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007e10:	2300      	movs	r3, #0
 8007e12:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e14:	e02b      	b.n	8007e6e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8007e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1e:	3301      	adds	r3, #1
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	021a      	lsls	r2, r3, #8
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e30:	3301      	adds	r3, #1
 8007e32:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	041a      	lsls	r2, r3, #16
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e42:	3301      	adds	r3, #1
 8007e44:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	061a      	lsls	r2, r3, #24
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e54:	3301      	adds	r3, #1
 8007e56:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f107 0214 	add.w	r2, r7, #20
 8007e60:	4611      	mov	r1, r2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f003 fa79 	bl	800b35a <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8007e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e70:	2b07      	cmp	r3, #7
 8007e72:	d9d0      	bls.n	8007e16 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8007e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e76:	3b20      	subs	r3, #32
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007e7a:	f7fb f8d5 	bl	8003028 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d902      	bls.n	8007e90 <HAL_SD_WriteBlocks+0x1b4>
 8007e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d112      	bne.n	8007eb6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a56      	ldr	r2, [pc, #344]	@ (8007ff0 <HAL_SD_WriteBlocks+0x314>)
 8007e96:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e097      	b.n	8007fe6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ebc:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d09b      	beq.n	8007dfc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ed2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d022      	beq.n	8007f28 <HAL_SD_WriteBlocks+0x24c>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d91f      	bls.n	8007f28 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d01b      	beq.n	8007f28 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f003 fb87 	bl	800b608 <SDMMC_CmdStopTransfer>
 8007efa:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d012      	beq.n	8007f28 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a3a      	ldr	r2, [pc, #232]	@ (8007ff0 <HAL_SD_WriteBlocks+0x314>)
 8007f08:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f10:	431a      	orrs	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e05e      	b.n	8007fe6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2e:	f003 0308 	and.w	r3, r3, #8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d012      	beq.n	8007f5c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8007ff0 <HAL_SD_WriteBlocks+0x314>)
 8007f3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f42:	f043 0208 	orr.w	r2, r3, #8
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e044      	b.n	8007fe6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d012      	beq.n	8007f90 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a20      	ldr	r2, [pc, #128]	@ (8007ff0 <HAL_SD_WriteBlocks+0x314>)
 8007f70:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f76:	f043 0202 	orr.w	r2, r3, #2
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e02a      	b.n	8007fe6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d012      	beq.n	8007fc4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a13      	ldr	r2, [pc, #76]	@ (8007ff0 <HAL_SD_WriteBlocks+0x314>)
 8007fa4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007faa:	f043 0210 	orr.w	r2, r3, #16
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e010      	b.n	8007fe6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff4 <HAL_SD_WriteBlocks+0x318>)
 8007fca:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e006      	b.n	8007fe6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fdc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
  }
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3748      	adds	r7, #72	@ 0x48
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	1fe00fff 	.word	0x1fe00fff
 8007ff4:	18000f3a 	.word	0x18000f3a

08007ff8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008006:	0f9b      	lsrs	r3, r3, #30
 8008008:	b2da      	uxtb	r2, r3
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008012:	0e9b      	lsrs	r3, r3, #26
 8008014:	b2db      	uxtb	r3, r3
 8008016:	f003 030f 	and.w	r3, r3, #15
 800801a:	b2da      	uxtb	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008024:	0e1b      	lsrs	r3, r3, #24
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	b2da      	uxtb	r2, r3
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008036:	0c1b      	lsrs	r3, r3, #16
 8008038:	b2da      	uxtb	r2, r3
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008042:	0a1b      	lsrs	r3, r3, #8
 8008044:	b2da      	uxtb	r2, r3
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800804e:	b2da      	uxtb	r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008058:	0d1b      	lsrs	r3, r3, #20
 800805a:	b29a      	uxth	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008064:	0c1b      	lsrs	r3, r3, #16
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	b2da      	uxtb	r2, r3
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008076:	0bdb      	lsrs	r3, r3, #15
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008088:	0b9b      	lsrs	r3, r3, #14
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	b2da      	uxtb	r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800809a:	0b5b      	lsrs	r3, r3, #13
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ac:	0b1b      	lsrs	r3, r3, #12
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2200      	movs	r2, #0
 80080be:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d163      	bne.n	8008190 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080cc:	009a      	lsls	r2, r3, #2
 80080ce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80080d2:	4013      	ands	r3, r2
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80080d8:	0f92      	lsrs	r2, r2, #30
 80080da:	431a      	orrs	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080e4:	0edb      	lsrs	r3, r3, #27
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080f6:	0e1b      	lsrs	r3, r3, #24
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	f003 0307 	and.w	r3, r3, #7
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008108:	0d5b      	lsrs	r3, r3, #21
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	b2da      	uxtb	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800811a:	0c9b      	lsrs	r3, r3, #18
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800812c:	0bdb      	lsrs	r3, r3, #15
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	b2da      	uxtb	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	7e1b      	ldrb	r3, [r3, #24]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	3302      	adds	r3, #2
 8008150:	2201      	movs	r2, #1
 8008152:	fa02 f303 	lsl.w	r3, r2, r3
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800815a:	fb03 f202 	mul.w	r2, r3, r2
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	7a1b      	ldrb	r3, [r3, #8]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 030f 	and.w	r3, r3, #15
 800816c:	2201      	movs	r2, #1
 800816e:	409a      	lsls	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800817c:	0a52      	lsrs	r2, r2, #9
 800817e:	fb03 f202 	mul.w	r2, r3, r2
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800818c:	655a      	str	r2, [r3, #84]	@ 0x54
 800818e:	e031      	b.n	80081f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008194:	2b01      	cmp	r3, #1
 8008196:	d11d      	bne.n	80081d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800819c:	041b      	lsls	r3, r3, #16
 800819e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081a6:	0c1b      	lsrs	r3, r3, #16
 80081a8:	431a      	orrs	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	3301      	adds	r3, #1
 80081b4:	029a      	lsls	r2, r3, #10
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80081d2:	e00f      	b.n	80081f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a58      	ldr	r2, [pc, #352]	@ (800833c <HAL_SD_GetCardCSD+0x344>)
 80081da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e09d      	b.n	8008330 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081f8:	0b9b      	lsrs	r3, r3, #14
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	b2da      	uxtb	r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800820a:	09db      	lsrs	r3, r3, #7
 800820c:	b2db      	uxtb	r3, r3
 800820e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008212:	b2da      	uxtb	r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800821c:	b2db      	uxtb	r3, r3
 800821e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008222:	b2da      	uxtb	r2, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800822c:	0fdb      	lsrs	r3, r3, #31
 800822e:	b2da      	uxtb	r2, r3
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008238:	0f5b      	lsrs	r3, r3, #29
 800823a:	b2db      	uxtb	r3, r3
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	b2da      	uxtb	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800824a:	0e9b      	lsrs	r3, r3, #26
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800825c:	0d9b      	lsrs	r3, r3, #22
 800825e:	b2db      	uxtb	r3, r3
 8008260:	f003 030f 	and.w	r3, r3, #15
 8008264:	b2da      	uxtb	r2, r3
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800826e:	0d5b      	lsrs	r3, r3, #21
 8008270:	b2db      	uxtb	r3, r3
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	b2da      	uxtb	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	b2da      	uxtb	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800829e:	0bdb      	lsrs	r3, r3, #15
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082b2:	0b9b      	lsrs	r3, r3, #14
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082c6:	0b5b      	lsrs	r3, r3, #13
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082da:	0b1b      	lsrs	r3, r3, #12
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082ee:	0a9b      	lsrs	r3, r3, #10
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008302:	0a1b      	lsrs	r3, r3, #8
 8008304:	b2db      	uxtb	r3, r3
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	b2da      	uxtb	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008316:	085b      	lsrs	r3, r3, #1
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800831e:	b2da      	uxtb	r2, r3
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	1fe00fff 	.word	0x1fe00fff

08008340 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b094      	sub	sp, #80	@ 0x50
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b03      	cmp	r3, #3
 800835a:	d101      	bne.n	8008360 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e0a7      	b.n	80084b0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008360:	f107 0308 	add.w	r3, r7, #8
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fb62 	bl	8008a30 <SD_SendSDStatus>
 800836c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800836e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008370:	2b00      	cmp	r3, #0
 8008372:	d011      	beq.n	8008398 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a4f      	ldr	r2, [pc, #316]	@ (80084b8 <HAL_SD_GetCardStatus+0x178>)
 800837a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008382:	431a      	orrs	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008396:	e070      	b.n	800847a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	099b      	lsrs	r3, r3, #6
 800839c:	b2db      	uxtb	r3, r3
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	0a1b      	lsrs	r3, r3, #8
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	0e1b      	lsrs	r3, r3, #24
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	4313      	orrs	r3, r2
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	061a      	lsls	r2, r3, #24
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80083de:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	0a1b      	lsrs	r3, r3, #8
 80083e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083e8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	0e1b      	lsrs	r3, r3, #24
 80083ee:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	0a1b      	lsrs	r3, r3, #8
 8008400:	b2da      	uxtb	r2, r3
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	0d1b      	lsrs	r3, r3, #20
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 030f 	and.w	r3, r3, #15
 8008410:	b2da      	uxtb	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	0c1b      	lsrs	r3, r3, #16
 800841a:	b29b      	uxth	r3, r3
 800841c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008420:	b29a      	uxth	r2, r3
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	b29b      	uxth	r3, r3
 8008426:	b2db      	uxtb	r3, r3
 8008428:	b29b      	uxth	r3, r3
 800842a:	4313      	orrs	r3, r2
 800842c:	b29a      	uxth	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	0a9b      	lsrs	r3, r3, #10
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800843c:	b2da      	uxtb	r2, r3
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	b2da      	uxtb	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	091b      	lsrs	r3, r3, #4
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f003 030f 	and.w	r3, r3, #15
 800845c:	b2da      	uxtb	r2, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	b2da      	uxtb	r2, r3
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	0e1b      	lsrs	r3, r3, #24
 8008474:	b2da      	uxtb	r2, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008482:	4618      	mov	r0, r3
 8008484:	f003 f810 	bl	800b4a8 <SDMMC_CmdBlockLength>
 8008488:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800848a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00d      	beq.n	80084ac <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a08      	ldr	r2, [pc, #32]	@ (80084b8 <HAL_SD_GetCardStatus+0x178>)
 8008496:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800849c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 80084ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3750      	adds	r7, #80	@ 0x50
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	1fe00fff 	.word	0x1fe00fff

080084bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008514:	b590      	push	{r4, r7, lr}
 8008516:	b08d      	sub	sp, #52	@ 0x34
 8008518:	af02      	add	r7, sp, #8
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2203      	movs	r2, #3
 8008528:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008530:	2b03      	cmp	r3, #3
 8008532:	d02e      	beq.n	8008592 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800853a:	d106      	bne.n	800854a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008540:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	635a      	str	r2, [r3, #52]	@ 0x34
 8008548:	e029      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008550:	d10a      	bne.n	8008568 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fb64 	bl	8008c20 <SD_WideBus_Enable>
 8008558:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	635a      	str	r2, [r3, #52]	@ 0x34
 8008566:	e01a      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fba1 	bl	8008cb6 <SD_WideBus_Disable>
 8008574:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	635a      	str	r2, [r3, #52]	@ 0x34
 8008582:	e00c      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008588:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008590:	e005      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008596:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a5f      	ldr	r2, [pc, #380]	@ (8008728 <HAL_SD_ConfigWideBusOperation+0x214>)
 80085ac:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80085b4:	e096      	b.n	80086e4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80085b6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80085ba:	f04f 0100 	mov.w	r1, #0
 80085be:	f7fd fdef 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80085c2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8083 	beq.w	80086d2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	695a      	ldr	r2, [r3, #20]
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	4950      	ldr	r1, [pc, #320]	@ (800872c <HAL_SD_ConfigWideBusOperation+0x218>)
 80085ea:	fba1 1303 	umull	r1, r3, r1, r3
 80085ee:	0e1b      	lsrs	r3, r3, #24
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d303      	bcc.n	80085fc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	e05a      	b.n	80086b2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008604:	d103      	bne.n	800860e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	61bb      	str	r3, [r7, #24]
 800860c:	e051      	b.n	80086b2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008616:	d126      	bne.n	8008666 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10e      	bne.n	800863e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4a43      	ldr	r2, [pc, #268]	@ (8008730 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d906      	bls.n	8008636 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	4a40      	ldr	r2, [pc, #256]	@ (800872c <HAL_SD_ConfigWideBusOperation+0x218>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	0e5b      	lsrs	r3, r3, #25
 8008632:	61bb      	str	r3, [r7, #24]
 8008634:	e03d      	b.n	80086b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	e039      	b.n	80086b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	fbb2 f3f3 	udiv	r3, r2, r3
 800864a:	4a39      	ldr	r2, [pc, #228]	@ (8008730 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d906      	bls.n	800865e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4a36      	ldr	r2, [pc, #216]	@ (800872c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008654:	fba2 2303 	umull	r2, r3, r2, r3
 8008658:	0e5b      	lsrs	r3, r3, #25
 800865a:	61bb      	str	r3, [r7, #24]
 800865c:	e029      	b.n	80086b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	e025      	b.n	80086b2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10e      	bne.n	800868c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	4a30      	ldr	r2, [pc, #192]	@ (8008734 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d906      	bls.n	8008684 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	4a2c      	ldr	r2, [pc, #176]	@ (800872c <HAL_SD_ConfigWideBusOperation+0x218>)
 800867a:	fba2 2303 	umull	r2, r3, r2, r3
 800867e:	0e1b      	lsrs	r3, r3, #24
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	e016      	b.n	80086b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	e012      	b.n	80086b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	fbb2 f3f3 	udiv	r3, r2, r3
 8008698:	4a26      	ldr	r2, [pc, #152]	@ (8008734 <HAL_SD_ConfigWideBusOperation+0x220>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d906      	bls.n	80086ac <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	4a22      	ldr	r2, [pc, #136]	@ (800872c <HAL_SD_ConfigWideBusOperation+0x218>)
 80086a2:	fba2 2303 	umull	r2, r3, r2, r3
 80086a6:	0e1b      	lsrs	r3, r3, #24
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	e002      	b.n	80086b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681c      	ldr	r4, [r3, #0]
 80086b6:	466a      	mov	r2, sp
 80086b8:	f107 0314 	add.w	r3, r7, #20
 80086bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80086c4:	f107 0308 	add.w	r3, r7, #8
 80086c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086ca:	4620      	mov	r0, r4
 80086cc:	f002 fe0e 	bl	800b2ec <SDMMC_Init>
 80086d0:	e008      	b.n	80086e4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80086ec:	4618      	mov	r0, r3
 80086ee:	f002 fedb 	bl	800b4a8 <SDMMC_CmdBlockLength>
 80086f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00c      	beq.n	8008714 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008728 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008700:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800871c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008720:	4618      	mov	r0, r3
 8008722:	372c      	adds	r7, #44	@ 0x2c
 8008724:	46bd      	mov	sp, r7
 8008726:	bd90      	pop	{r4, r7, pc}
 8008728:	1fe00fff 	.word	0x1fe00fff
 800872c:	55e63b89 	.word	0x55e63b89
 8008730:	02faf080 	.word	0x02faf080
 8008734:	017d7840 	.word	0x017d7840

08008738 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008744:	f107 030c 	add.w	r3, r7, #12
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fa40 	bl	8008bd0 <SD_SendStatus>
 8008750:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	431a      	orrs	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	0a5b      	lsrs	r3, r3, #9
 8008768:	f003 030f 	and.w	r3, r3, #15
 800876c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800876e:	693b      	ldr	r3, [r7, #16]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b090      	sub	sp, #64	@ 0x40
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008784:	f7fa fc50 	bl	8003028 <HAL_GetTick>
 8008788:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f002 fe05 	bl	800b39e <SDMMC_GetPowerState>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d102      	bne.n	80087a0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800879a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800879e:	e0b5      	b.n	800890c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	d02e      	beq.n	8008806 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f003 f850 	bl	800b852 <SDMMC_CmdSendCID>
 80087b2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80087b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <SD_InitCard+0x46>
    {
      return errorstate;
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	e0a6      	b.n	800890c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2100      	movs	r1, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f002 fe30 	bl	800b42a <SDMMC_GetResponse>
 80087ca:	4602      	mov	r2, r0
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2104      	movs	r1, #4
 80087d6:	4618      	mov	r0, r3
 80087d8:	f002 fe27 	bl	800b42a <SDMMC_GetResponse>
 80087dc:	4602      	mov	r2, r0
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2108      	movs	r1, #8
 80087e8:	4618      	mov	r0, r3
 80087ea:	f002 fe1e 	bl	800b42a <SDMMC_GetResponse>
 80087ee:	4602      	mov	r2, r0
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	210c      	movs	r1, #12
 80087fa:	4618      	mov	r0, r3
 80087fc:	f002 fe15 	bl	800b42a <SDMMC_GetResponse>
 8008800:	4602      	mov	r2, r0
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	2b03      	cmp	r3, #3
 800880c:	d01d      	beq.n	800884a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800880e:	e019      	b.n	8008844 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f107 020a 	add.w	r2, r7, #10
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f003 f858 	bl	800b8d0 <SDMMC_CmdSetRelAdd>
 8008820:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <SD_InitCard+0xb4>
      {
        return errorstate;
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	e06f      	b.n	800890c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800882c:	f7fa fbfc 	bl	8003028 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	f241 3287 	movw	r2, #4999	@ 0x1387
 800883a:	4293      	cmp	r3, r2
 800883c:	d902      	bls.n	8008844 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800883e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008842:	e063      	b.n	800890c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008844:	897b      	ldrh	r3, [r7, #10]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0e2      	beq.n	8008810 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	2b03      	cmp	r3, #3
 8008850:	d036      	beq.n	80088c0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008852:	897b      	ldrh	r3, [r7, #10]
 8008854:	461a      	mov	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008862:	041b      	lsls	r3, r3, #16
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f003 f812 	bl	800b890 <SDMMC_CmdSendCSD>
 800886c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800886e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <SD_InitCard+0x100>
    {
      return errorstate;
 8008874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008876:	e049      	b.n	800890c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2100      	movs	r1, #0
 800887e:	4618      	mov	r0, r3
 8008880:	f002 fdd3 	bl	800b42a <SDMMC_GetResponse>
 8008884:	4602      	mov	r2, r0
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2104      	movs	r1, #4
 8008890:	4618      	mov	r0, r3
 8008892:	f002 fdca 	bl	800b42a <SDMMC_GetResponse>
 8008896:	4602      	mov	r2, r0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2108      	movs	r1, #8
 80088a2:	4618      	mov	r0, r3
 80088a4:	f002 fdc1 	bl	800b42a <SDMMC_GetResponse>
 80088a8:	4602      	mov	r2, r0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	210c      	movs	r1, #12
 80088b4:	4618      	mov	r0, r3
 80088b6:	f002 fdb8 	bl	800b42a <SDMMC_GetResponse>
 80088ba:	4602      	mov	r2, r0
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2104      	movs	r1, #4
 80088c6:	4618      	mov	r0, r3
 80088c8:	f002 fdaf 	bl	800b42a <SDMMC_GetResponse>
 80088cc:	4603      	mov	r3, r0
 80088ce:	0d1a      	lsrs	r2, r3, #20
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80088d4:	f107 030c 	add.w	r3, r7, #12
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff fb8c 	bl	8007ff8 <HAL_SD_GetCardCSD>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80088ea:	e00f      	b.n	800890c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088f4:	041b      	lsls	r3, r3, #16
 80088f6:	4619      	mov	r1, r3
 80088f8:	4610      	mov	r0, r2
 80088fa:	f002 fec1 	bl	800b680 <SDMMC_CmdSelDesel>
 80088fe:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <SD_InitCard+0x192>
  {
    return errorstate;
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	e000      	b.n	800890c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3740      	adds	r7, #64	@ 0x40
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f002 feca 	bl	800b6c6 <SDMMC_CmdGoIdleState>
 8008932:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <SD_PowerON+0x2a>
  {
    return errorstate;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	e072      	b.n	8008a24 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4618      	mov	r0, r3
 8008944:	f002 fedd 	bl	800b702 <SDMMC_CmdOperCond>
 8008948:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008950:	d10d      	bne.n	800896e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f002 feb2 	bl	800b6c6 <SDMMC_CmdGoIdleState>
 8008962:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <SD_PowerON+0x60>
    {
      return errorstate;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	e05a      	b.n	8008a24 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008978:	2b01      	cmp	r3, #1
 800897a:	d137      	bne.n	80089ec <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2100      	movs	r1, #0
 8008982:	4618      	mov	r0, r3
 8008984:	f002 fedd 	bl	800b742 <SDMMC_CmdAppCommand>
 8008988:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d02d      	beq.n	80089ec <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008990:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008994:	e046      	b.n	8008a24 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2100      	movs	r1, #0
 800899c:	4618      	mov	r0, r3
 800899e:	f002 fed0 	bl	800b742 <SDMMC_CmdAppCommand>
 80089a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d001      	beq.n	80089ae <SD_PowerON+0x9a>
    {
      return errorstate;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	e03a      	b.n	8008a24 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	491e      	ldr	r1, [pc, #120]	@ (8008a2c <SD_PowerON+0x118>)
 80089b4:	4618      	mov	r0, r3
 80089b6:	f002 fee7 	bl	800b788 <SDMMC_CmdAppOperCommand>
 80089ba:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80089c6:	e02d      	b.n	8008a24 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f002 fd2b 	bl	800b42a <SDMMC_GetResponse>
 80089d4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	0fdb      	lsrs	r3, r3, #31
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d101      	bne.n	80089e2 <SD_PowerON+0xce>
 80089de:	2301      	movs	r3, #1
 80089e0:	e000      	b.n	80089e4 <SD_PowerON+0xd0>
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]

    count++;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	3301      	adds	r3, #1
 80089ea:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d802      	bhi.n	80089fc <SD_PowerON+0xe8>
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0cc      	beq.n	8008996 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d902      	bls.n	8008a0c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a0a:	e00b      	b.n	8008a24 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	c1100000 	.word	0xc1100000

08008a30 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08c      	sub	sp, #48	@ 0x30
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008a3a:	f7fa faf5 	bl	8003028 <HAL_GetTick>
 8008a3e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f002 fced 	bl	800b42a <SDMMC_GetResponse>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a5a:	d102      	bne.n	8008a62 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008a5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a60:	e0b0      	b.n	8008bc4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2140      	movs	r1, #64	@ 0x40
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f002 fd1d 	bl	800b4a8 <SDMMC_CmdBlockLength>
 8008a6e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	e0a0      	b.n	8008bc4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8a:	041b      	lsls	r3, r3, #16
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	f002 fe57 	bl	800b742 <SDMMC_CmdAppCommand>
 8008a94:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	e08d      	b.n	8008bc4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008aae:	2340      	movs	r3, #64	@ 0x40
 8008ab0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008ab2:	2360      	movs	r3, #96	@ 0x60
 8008ab4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f107 0208 	add.w	r2, r7, #8
 8008aca:	4611      	mov	r1, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f002 fcbf 	bl	800b450 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f002 ff3f 	bl	800b95a <SDMMC_CmdStatusRegister>
 8008adc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02b      	beq.n	8008b3c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	e069      	b.n	8008bc4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d013      	beq.n	8008b26 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008afe:	2300      	movs	r3, #0
 8008b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b02:	e00d      	b.n	8008b20 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f002 fc19 	bl	800b340 <SDMMC_ReadFIFO>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b12:	601a      	str	r2, [r3, #0]
        pData++;
 8008b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b16:	3304      	adds	r3, #4
 8008b18:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b22:	2b07      	cmp	r3, #7
 8008b24:	d9ee      	bls.n	8008b04 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008b26:	f7fa fa7f 	bl	8003028 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b34:	d102      	bne.n	8008b3c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008b36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008b3a:	e043      	b.n	8008bc4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b42:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0d2      	beq.n	8008af0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b50:	f003 0308 	and.w	r3, r3, #8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b58:	2308      	movs	r3, #8
 8008b5a:	e033      	b.n	8008bc4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	e02a      	b.n	8008bc4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b74:	f003 0320 	and.w	r3, r3, #32
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d017      	beq.n	8008bac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008b7c:	2320      	movs	r3, #32
 8008b7e:	e021      	b.n	8008bc4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f002 fbdb 	bl	800b340 <SDMMC_ReadFIFO>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8e:	601a      	str	r2, [r3, #0]
    pData++;
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	3304      	adds	r3, #4
 8008b94:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008b96:	f7fa fa47 	bl	8003028 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d102      	bne.n	8008bac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ba6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008baa:	e00b      	b.n	8008bc4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e2      	bne.n	8008b80 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a03      	ldr	r2, [pc, #12]	@ (8008bcc <SD_SendSDStatus+0x19c>)
 8008bc0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3730      	adds	r7, #48	@ 0x30
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	18000f3a 	.word	0x18000f3a

08008bd0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d102      	bne.n	8008be6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008be0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008be4:	e018      	b.n	8008c18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bee:	041b      	lsls	r3, r3, #16
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f002 fe8e 	bl	800b914 <SDMMC_CmdSendStatus>
 8008bf8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	e009      	b.n	8008c18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f002 fc0d 	bl	800b42a <SDMMC_GetResponse>
 8008c10:	4602      	mov	r2, r0
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f002 fbf7 	bl	800b42a <SDMMC_GetResponse>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c46:	d102      	bne.n	8008c4e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008c4c:	e02f      	b.n	8008cae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c4e:	f107 030c 	add.w	r3, r7, #12
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f879 	bl	8008d4c <SD_FindSCR>
 8008c5a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	e023      	b.n	8008cae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01c      	beq.n	8008caa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c78:	041b      	lsls	r3, r3, #16
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f002 fd60 	bl	800b742 <SDMMC_CmdAppCommand>
 8008c82:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	e00f      	b.n	8008cae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2102      	movs	r1, #2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f002 fd97 	bl	800b7c8 <SDMMC_CmdBusWidth>
 8008c9a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	e003      	b.n	8008cae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e001      	b.n	8008cae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008caa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b086      	sub	sp, #24
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f002 fbac 	bl	800b42a <SDMMC_GetResponse>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cdc:	d102      	bne.n	8008ce4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008cde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ce2:	e02f      	b.n	8008d44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ce4:	f107 030c 	add.w	r3, r7, #12
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f82e 	bl	8008d4c <SD_FindSCR>
 8008cf0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	e023      	b.n	8008d44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d01c      	beq.n	8008d40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d0e:	041b      	lsls	r3, r3, #16
 8008d10:	4619      	mov	r1, r3
 8008d12:	4610      	mov	r0, r2
 8008d14:	f002 fd15 	bl	800b742 <SDMMC_CmdAppCommand>
 8008d18:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	e00f      	b.n	8008d44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f002 fd4c 	bl	800b7c8 <SDMMC_CmdBusWidth>
 8008d30:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	e003      	b.n	8008d44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e001      	b.n	8008d44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d40:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3718      	adds	r7, #24
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08e      	sub	sp, #56	@ 0x38
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d56:	f7fa f967 	bl	8003028 <HAL_GetTick>
 8008d5a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008d60:	2300      	movs	r3, #0
 8008d62:	60bb      	str	r3, [r7, #8]
 8008d64:	2300      	movs	r3, #0
 8008d66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2108      	movs	r1, #8
 8008d72:	4618      	mov	r0, r3
 8008d74:	f002 fb98 	bl	800b4a8 <SDMMC_CmdBlockLength>
 8008d78:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d82:	e0ad      	b.n	8008ee0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d8c:	041b      	lsls	r3, r3, #16
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f002 fcd6 	bl	800b742 <SDMMC_CmdAppCommand>
 8008d96:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da0:	e09e      	b.n	8008ee0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008da2:	f04f 33ff 	mov.w	r3, #4294967295
 8008da6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008da8:	2308      	movs	r3, #8
 8008daa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008dac:	2330      	movs	r3, #48	@ 0x30
 8008dae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008db0:	2302      	movs	r3, #2
 8008db2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008db8:	2301      	movs	r3, #1
 8008dba:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f107 0210 	add.w	r2, r7, #16
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f002 fb42 	bl	800b450 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 fd1c 	bl	800b80e <SDMMC_CmdSendSCR>
 8008dd6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d027      	beq.n	8008e2e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	e07e      	b.n	8008ee0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008de8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d113      	bne.n	8008e18 <SD_FindSCR+0xcc>
 8008df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d110      	bne.n	8008e18 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f002 faa0 	bl	800b340 <SDMMC_ReadFIFO>
 8008e00:	4603      	mov	r3, r0
 8008e02:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f002 fa99 	bl	800b340 <SDMMC_ReadFIFO>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	60fb      	str	r3, [r7, #12]
      index++;
 8008e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e14:	3301      	adds	r3, #1
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008e18:	f7fa f906 	bl	8003028 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e26:	d102      	bne.n	8008e2e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008e2c:	e058      	b.n	8008ee0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e34:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008e38:	4013      	ands	r3, r2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0d1      	beq.n	8008de2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e44:	f003 0308 	and.w	r3, r3, #8
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2208      	movs	r2, #8
 8008e52:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e54:	2308      	movs	r3, #8
 8008e56:	e043      	b.n	8008ee0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e036      	b.n	8008ee0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e78:	f003 0320 	and.w	r3, r3, #32
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2220      	movs	r2, #32
 8008e86:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008e88:	2320      	movs	r3, #32
 8008e8a:	e029      	b.n	8008ee0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a15      	ldr	r2, [pc, #84]	@ (8008ee8 <SD_FindSCR+0x19c>)
 8008e92:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	061a      	lsls	r2, r3, #24
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	021b      	lsls	r3, r3, #8
 8008e9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ea0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	0a1b      	lsrs	r3, r3, #8
 8008ea6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008eaa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	0e1b      	lsrs	r3, r3, #24
 8008eb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb4:	601a      	str	r2, [r3, #0]
    scr++;
 8008eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb8:	3304      	adds	r3, #4
 8008eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	061a      	lsls	r2, r3, #24
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ec8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	0a1b      	lsrs	r3, r3, #8
 8008ece:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008ed2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	0e1b      	lsrs	r3, r3, #24
 8008ed8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008edc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3738      	adds	r7, #56	@ 0x38
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	18000f3a 	.word	0x18000f3a

08008eec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e10f      	b.n	800911e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a87      	ldr	r2, [pc, #540]	@ (8009128 <HAL_SPI_Init+0x23c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d00f      	beq.n	8008f2e <HAL_SPI_Init+0x42>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a86      	ldr	r2, [pc, #536]	@ (800912c <HAL_SPI_Init+0x240>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d00a      	beq.n	8008f2e <HAL_SPI_Init+0x42>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a84      	ldr	r2, [pc, #528]	@ (8009130 <HAL_SPI_Init+0x244>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d005      	beq.n	8008f2e <HAL_SPI_Init+0x42>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	2b0f      	cmp	r3, #15
 8008f28:	d901      	bls.n	8008f2e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e0f7      	b.n	800911e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f900 	bl	8009134 <SPI_GetPacketSize>
 8008f34:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a7b      	ldr	r2, [pc, #492]	@ (8009128 <HAL_SPI_Init+0x23c>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00c      	beq.n	8008f5a <HAL_SPI_Init+0x6e>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a79      	ldr	r2, [pc, #484]	@ (800912c <HAL_SPI_Init+0x240>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d007      	beq.n	8008f5a <HAL_SPI_Init+0x6e>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a78      	ldr	r2, [pc, #480]	@ (8009130 <HAL_SPI_Init+0x244>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d002      	beq.n	8008f5a <HAL_SPI_Init+0x6e>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b08      	cmp	r3, #8
 8008f58:	d811      	bhi.n	8008f7e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f5e:	4a72      	ldr	r2, [pc, #456]	@ (8009128 <HAL_SPI_Init+0x23c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d009      	beq.n	8008f78 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a70      	ldr	r2, [pc, #448]	@ (800912c <HAL_SPI_Init+0x240>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d004      	beq.n	8008f78 <HAL_SPI_Init+0x8c>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a6f      	ldr	r2, [pc, #444]	@ (8009130 <HAL_SPI_Init+0x244>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d104      	bne.n	8008f82 <HAL_SPI_Init+0x96>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b10      	cmp	r3, #16
 8008f7c:	d901      	bls.n	8008f82 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e0cd      	b.n	800911e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7f8 fad6 	bl	8001548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0201 	bic.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008fbe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008fc8:	d119      	bne.n	8008ffe <HAL_SPI_Init+0x112>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fd2:	d103      	bne.n	8008fdc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d008      	beq.n	8008fee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10c      	bne.n	8008ffe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fec:	d107      	bne.n	8008ffe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ffc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00f      	beq.n	800902a <HAL_SPI_Init+0x13e>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	2b06      	cmp	r3, #6
 8009010:	d90b      	bls.n	800902a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	e007      	b.n	800903a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009038:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	69da      	ldr	r2, [r3, #28]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009042:	431a      	orrs	r2, r3
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	431a      	orrs	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800904c:	ea42 0103 	orr.w	r1, r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	430a      	orrs	r2, r1
 800905a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009064:	431a      	orrs	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908e:	431a      	orrs	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800909a:	ea42 0103 	orr.w	r1, r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d113      	bne.n	80090da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80090d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0201 	bic.w	r2, r2, #1
 80090e8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	430a      	orrs	r2, r1
 800910a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	40013000 	.word	0x40013000
 800912c:	40003800 	.word	0x40003800
 8009130:	40003c00 	.word	0x40003c00

08009134 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009140:	095b      	lsrs	r3, r3, #5
 8009142:	3301      	adds	r3, #1
 8009144:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	3301      	adds	r3, #1
 800914c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	3307      	adds	r3, #7
 8009152:	08db      	lsrs	r3, r3, #3
 8009154:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	fb02 f303 	mul.w	r3, r2, r3
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e049      	b.n	8009210 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d106      	bne.n	8009196 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7f8 fef3 	bl	8001f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3304      	adds	r3, #4
 80091a6:	4619      	mov	r1, r3
 80091a8:	4610      	mov	r0, r2
 80091aa:	f000 faa3 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e049      	b.n	80092be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f841 	bl	80092c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3304      	adds	r3, #4
 8009254:	4619      	mov	r1, r3
 8009256:	4610      	mov	r0, r2
 8009258:	f000 fa4c 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b083      	sub	sp, #12
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80092ce:	bf00      	nop
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
	...

080092dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d101      	bne.n	80092fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092f6:	2302      	movs	r3, #2
 80092f8:	e0ff      	b.n	80094fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b14      	cmp	r3, #20
 8009306:	f200 80f0 	bhi.w	80094ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800930a:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009365 	.word	0x08009365
 8009314:	080094eb 	.word	0x080094eb
 8009318:	080094eb 	.word	0x080094eb
 800931c:	080094eb 	.word	0x080094eb
 8009320:	080093a5 	.word	0x080093a5
 8009324:	080094eb 	.word	0x080094eb
 8009328:	080094eb 	.word	0x080094eb
 800932c:	080094eb 	.word	0x080094eb
 8009330:	080093e7 	.word	0x080093e7
 8009334:	080094eb 	.word	0x080094eb
 8009338:	080094eb 	.word	0x080094eb
 800933c:	080094eb 	.word	0x080094eb
 8009340:	08009427 	.word	0x08009427
 8009344:	080094eb 	.word	0x080094eb
 8009348:	080094eb 	.word	0x080094eb
 800934c:	080094eb 	.word	0x080094eb
 8009350:	08009469 	.word	0x08009469
 8009354:	080094eb 	.word	0x080094eb
 8009358:	080094eb 	.word	0x080094eb
 800935c:	080094eb 	.word	0x080094eb
 8009360:	080094a9 	.word	0x080094a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68b9      	ldr	r1, [r7, #8]
 800936a:	4618      	mov	r0, r3
 800936c:	f000 fa62 	bl	8009834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699a      	ldr	r2, [r3, #24]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0208 	orr.w	r2, r2, #8
 800937e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	699a      	ldr	r2, [r3, #24]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0204 	bic.w	r2, r2, #4
 800938e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6999      	ldr	r1, [r3, #24]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	691a      	ldr	r2, [r3, #16]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	619a      	str	r2, [r3, #24]
      break;
 80093a2:	e0a5      	b.n	80094f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68b9      	ldr	r1, [r7, #8]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fad2 	bl	8009954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6999      	ldr	r1, [r3, #24]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	021a      	lsls	r2, r3, #8
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	619a      	str	r2, [r3, #24]
      break;
 80093e4:	e084      	b.n	80094f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fb3b 	bl	8009a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	69da      	ldr	r2, [r3, #28]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f042 0208 	orr.w	r2, r2, #8
 8009400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	69da      	ldr	r2, [r3, #28]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 0204 	bic.w	r2, r2, #4
 8009410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	69d9      	ldr	r1, [r3, #28]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	691a      	ldr	r2, [r3, #16]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	61da      	str	r2, [r3, #28]
      break;
 8009424:	e064      	b.n	80094f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68b9      	ldr	r1, [r7, #8]
 800942c:	4618      	mov	r0, r3
 800942e:	f000 fba3 	bl	8009b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69da      	ldr	r2, [r3, #28]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69da      	ldr	r2, [r3, #28]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69d9      	ldr	r1, [r3, #28]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	021a      	lsls	r2, r3, #8
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	61da      	str	r2, [r3, #28]
      break;
 8009466:	e043      	b.n	80094f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68b9      	ldr	r1, [r7, #8]
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fbec 	bl	8009c4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f042 0208 	orr.w	r2, r2, #8
 8009482:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0204 	bic.w	r2, r2, #4
 8009492:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	691a      	ldr	r2, [r3, #16]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80094a6:	e023      	b.n	80094f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68b9      	ldr	r1, [r7, #8]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 fc30 	bl	8009d14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	021a      	lsls	r2, r3, #8
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80094e8:	e002      	b.n	80094f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
      break;
 80094ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop

08009504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d101      	bne.n	8009520 <HAL_TIM_ConfigClockSource+0x1c>
 800951c:	2302      	movs	r3, #2
 800951e:	e0dc      	b.n	80096da <HAL_TIM_ConfigClockSource+0x1d6>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	4b6a      	ldr	r3, [pc, #424]	@ (80096e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800953c:	4013      	ands	r3, r2
 800953e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a64      	ldr	r2, [pc, #400]	@ (80096e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	f000 80a9 	beq.w	80096ae <HAL_TIM_ConfigClockSource+0x1aa>
 800955c:	4a62      	ldr	r2, [pc, #392]	@ (80096e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	f200 80ae 	bhi.w	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009564:	4a61      	ldr	r2, [pc, #388]	@ (80096ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	f000 80a1 	beq.w	80096ae <HAL_TIM_ConfigClockSource+0x1aa>
 800956c:	4a5f      	ldr	r2, [pc, #380]	@ (80096ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	f200 80a6 	bhi.w	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009574:	4a5e      	ldr	r2, [pc, #376]	@ (80096f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009576:	4293      	cmp	r3, r2
 8009578:	f000 8099 	beq.w	80096ae <HAL_TIM_ConfigClockSource+0x1aa>
 800957c:	4a5c      	ldr	r2, [pc, #368]	@ (80096f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800957e:	4293      	cmp	r3, r2
 8009580:	f200 809e 	bhi.w	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009584:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009588:	f000 8091 	beq.w	80096ae <HAL_TIM_ConfigClockSource+0x1aa>
 800958c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009590:	f200 8096 	bhi.w	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009598:	f000 8089 	beq.w	80096ae <HAL_TIM_ConfigClockSource+0x1aa>
 800959c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095a0:	f200 808e 	bhi.w	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095a8:	d03e      	beq.n	8009628 <HAL_TIM_ConfigClockSource+0x124>
 80095aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ae:	f200 8087 	bhi.w	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095b6:	f000 8086 	beq.w	80096c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80095ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095be:	d87f      	bhi.n	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095c0:	2b70      	cmp	r3, #112	@ 0x70
 80095c2:	d01a      	beq.n	80095fa <HAL_TIM_ConfigClockSource+0xf6>
 80095c4:	2b70      	cmp	r3, #112	@ 0x70
 80095c6:	d87b      	bhi.n	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095c8:	2b60      	cmp	r3, #96	@ 0x60
 80095ca:	d050      	beq.n	800966e <HAL_TIM_ConfigClockSource+0x16a>
 80095cc:	2b60      	cmp	r3, #96	@ 0x60
 80095ce:	d877      	bhi.n	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095d0:	2b50      	cmp	r3, #80	@ 0x50
 80095d2:	d03c      	beq.n	800964e <HAL_TIM_ConfigClockSource+0x14a>
 80095d4:	2b50      	cmp	r3, #80	@ 0x50
 80095d6:	d873      	bhi.n	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095d8:	2b40      	cmp	r3, #64	@ 0x40
 80095da:	d058      	beq.n	800968e <HAL_TIM_ConfigClockSource+0x18a>
 80095dc:	2b40      	cmp	r3, #64	@ 0x40
 80095de:	d86f      	bhi.n	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095e0:	2b30      	cmp	r3, #48	@ 0x30
 80095e2:	d064      	beq.n	80096ae <HAL_TIM_ConfigClockSource+0x1aa>
 80095e4:	2b30      	cmp	r3, #48	@ 0x30
 80095e6:	d86b      	bhi.n	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d060      	beq.n	80096ae <HAL_TIM_ConfigClockSource+0x1aa>
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	d867      	bhi.n	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d05c      	beq.n	80096ae <HAL_TIM_ConfigClockSource+0x1aa>
 80095f4:	2b10      	cmp	r3, #16
 80095f6:	d05a      	beq.n	80096ae <HAL_TIM_ConfigClockSource+0x1aa>
 80095f8:	e062      	b.n	80096c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800960a:	f000 fc67 	bl	8009edc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800961c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	609a      	str	r2, [r3, #8]
      break;
 8009626:	e04f      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009638:	f000 fc50 	bl	8009edc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	689a      	ldr	r2, [r3, #8]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800964a:	609a      	str	r2, [r3, #8]
      break;
 800964c:	e03c      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800965a:	461a      	mov	r2, r3
 800965c:	f000 fbc0 	bl	8009de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2150      	movs	r1, #80	@ 0x50
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fc1a 	bl	8009ea0 <TIM_ITRx_SetConfig>
      break;
 800966c:	e02c      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800967a:	461a      	mov	r2, r3
 800967c:	f000 fbdf 	bl	8009e3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2160      	movs	r1, #96	@ 0x60
 8009686:	4618      	mov	r0, r3
 8009688:	f000 fc0a 	bl	8009ea0 <TIM_ITRx_SetConfig>
      break;
 800968c:	e01c      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800969a:	461a      	mov	r2, r3
 800969c:	f000 fba0 	bl	8009de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2140      	movs	r1, #64	@ 0x40
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 fbfa 	bl	8009ea0 <TIM_ITRx_SetConfig>
      break;
 80096ac:	e00c      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4619      	mov	r1, r3
 80096b8:	4610      	mov	r0, r2
 80096ba:	f000 fbf1 	bl	8009ea0 <TIM_ITRx_SetConfig>
      break;
 80096be:	e003      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	73fb      	strb	r3, [r7, #15]
      break;
 80096c4:	e000      	b.n	80096c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80096c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	ffceff88 	.word	0xffceff88
 80096e8:	00100040 	.word	0x00100040
 80096ec:	00100030 	.word	0x00100030
 80096f0:	00100020 	.word	0x00100020

080096f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a43      	ldr	r2, [pc, #268]	@ (8009814 <TIM_Base_SetConfig+0x120>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d013      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009712:	d00f      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a40      	ldr	r2, [pc, #256]	@ (8009818 <TIM_Base_SetConfig+0x124>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d00b      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a3f      	ldr	r2, [pc, #252]	@ (800981c <TIM_Base_SetConfig+0x128>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d007      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a3e      	ldr	r2, [pc, #248]	@ (8009820 <TIM_Base_SetConfig+0x12c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d003      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a3d      	ldr	r2, [pc, #244]	@ (8009824 <TIM_Base_SetConfig+0x130>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d108      	bne.n	8009746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800973a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a32      	ldr	r2, [pc, #200]	@ (8009814 <TIM_Base_SetConfig+0x120>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d01f      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009754:	d01b      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a2f      	ldr	r2, [pc, #188]	@ (8009818 <TIM_Base_SetConfig+0x124>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d017      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a2e      	ldr	r2, [pc, #184]	@ (800981c <TIM_Base_SetConfig+0x128>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d013      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a2d      	ldr	r2, [pc, #180]	@ (8009820 <TIM_Base_SetConfig+0x12c>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00f      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a2c      	ldr	r2, [pc, #176]	@ (8009824 <TIM_Base_SetConfig+0x130>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00b      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a2b      	ldr	r2, [pc, #172]	@ (8009828 <TIM_Base_SetConfig+0x134>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a2a      	ldr	r2, [pc, #168]	@ (800982c <TIM_Base_SetConfig+0x138>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_Base_SetConfig+0x9a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a29      	ldr	r2, [pc, #164]	@ (8009830 <TIM_Base_SetConfig+0x13c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d108      	bne.n	80097a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4313      	orrs	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a14      	ldr	r2, [pc, #80]	@ (8009814 <TIM_Base_SetConfig+0x120>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d00f      	beq.n	80097e6 <TIM_Base_SetConfig+0xf2>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a16      	ldr	r2, [pc, #88]	@ (8009824 <TIM_Base_SetConfig+0x130>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00b      	beq.n	80097e6 <TIM_Base_SetConfig+0xf2>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a15      	ldr	r2, [pc, #84]	@ (8009828 <TIM_Base_SetConfig+0x134>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d007      	beq.n	80097e6 <TIM_Base_SetConfig+0xf2>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a14      	ldr	r2, [pc, #80]	@ (800982c <TIM_Base_SetConfig+0x138>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d003      	beq.n	80097e6 <TIM_Base_SetConfig+0xf2>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a13      	ldr	r2, [pc, #76]	@ (8009830 <TIM_Base_SetConfig+0x13c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d103      	bne.n	80097ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	691a      	ldr	r2, [r3, #16]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f043 0204 	orr.w	r2, r3, #4
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	601a      	str	r2, [r3, #0]
}
 8009806:	bf00      	nop
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	40010000 	.word	0x40010000
 8009818:	40000400 	.word	0x40000400
 800981c:	40000800 	.word	0x40000800
 8009820:	40000c00 	.word	0x40000c00
 8009824:	40010400 	.word	0x40010400
 8009828:	40014000 	.word	0x40014000
 800982c:	40014400 	.word	0x40014400
 8009830:	40014800 	.word	0x40014800

08009834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	f023 0201 	bic.w	r2, r3, #1
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	4b37      	ldr	r3, [pc, #220]	@ (800993c <TIM_OC1_SetConfig+0x108>)
 8009860:	4013      	ands	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f023 0302 	bic.w	r3, r3, #2
 800987c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a2d      	ldr	r2, [pc, #180]	@ (8009940 <TIM_OC1_SetConfig+0x10c>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d00f      	beq.n	80098b0 <TIM_OC1_SetConfig+0x7c>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a2c      	ldr	r2, [pc, #176]	@ (8009944 <TIM_OC1_SetConfig+0x110>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00b      	beq.n	80098b0 <TIM_OC1_SetConfig+0x7c>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a2b      	ldr	r2, [pc, #172]	@ (8009948 <TIM_OC1_SetConfig+0x114>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d007      	beq.n	80098b0 <TIM_OC1_SetConfig+0x7c>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a2a      	ldr	r2, [pc, #168]	@ (800994c <TIM_OC1_SetConfig+0x118>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_OC1_SetConfig+0x7c>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a29      	ldr	r2, [pc, #164]	@ (8009950 <TIM_OC1_SetConfig+0x11c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10c      	bne.n	80098ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f023 0308 	bic.w	r3, r3, #8
 80098b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f023 0304 	bic.w	r3, r3, #4
 80098c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a1c      	ldr	r2, [pc, #112]	@ (8009940 <TIM_OC1_SetConfig+0x10c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00f      	beq.n	80098f2 <TIM_OC1_SetConfig+0xbe>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009944 <TIM_OC1_SetConfig+0x110>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00b      	beq.n	80098f2 <TIM_OC1_SetConfig+0xbe>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a1a      	ldr	r2, [pc, #104]	@ (8009948 <TIM_OC1_SetConfig+0x114>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <TIM_OC1_SetConfig+0xbe>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a19      	ldr	r2, [pc, #100]	@ (800994c <TIM_OC1_SetConfig+0x118>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d003      	beq.n	80098f2 <TIM_OC1_SetConfig+0xbe>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a18      	ldr	r2, [pc, #96]	@ (8009950 <TIM_OC1_SetConfig+0x11c>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d111      	bne.n	8009916 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	4313      	orrs	r3, r2
 8009914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	621a      	str	r2, [r3, #32]
}
 8009930:	bf00      	nop
 8009932:	371c      	adds	r7, #28
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	fffeff8f 	.word	0xfffeff8f
 8009940:	40010000 	.word	0x40010000
 8009944:	40010400 	.word	0x40010400
 8009948:	40014000 	.word	0x40014000
 800994c:	40014400 	.word	0x40014400
 8009950:	40014800 	.word	0x40014800

08009954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009954:	b480      	push	{r7}
 8009956:	b087      	sub	sp, #28
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a1b      	ldr	r3, [r3, #32]
 8009968:	f023 0210 	bic.w	r2, r3, #16
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4b34      	ldr	r3, [pc, #208]	@ (8009a50 <TIM_OC2_SetConfig+0xfc>)
 8009980:	4013      	ands	r3, r2
 8009982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800998a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	021b      	lsls	r3, r3, #8
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4313      	orrs	r3, r2
 8009996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f023 0320 	bic.w	r3, r3, #32
 800999e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a29      	ldr	r2, [pc, #164]	@ (8009a54 <TIM_OC2_SetConfig+0x100>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d003      	beq.n	80099bc <TIM_OC2_SetConfig+0x68>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a28      	ldr	r2, [pc, #160]	@ (8009a58 <TIM_OC2_SetConfig+0x104>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d10d      	bne.n	80099d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a1e      	ldr	r2, [pc, #120]	@ (8009a54 <TIM_OC2_SetConfig+0x100>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d00f      	beq.n	8009a00 <TIM_OC2_SetConfig+0xac>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a1d      	ldr	r2, [pc, #116]	@ (8009a58 <TIM_OC2_SetConfig+0x104>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d00b      	beq.n	8009a00 <TIM_OC2_SetConfig+0xac>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a1c      	ldr	r2, [pc, #112]	@ (8009a5c <TIM_OC2_SetConfig+0x108>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d007      	beq.n	8009a00 <TIM_OC2_SetConfig+0xac>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a60 <TIM_OC2_SetConfig+0x10c>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d003      	beq.n	8009a00 <TIM_OC2_SetConfig+0xac>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009a64 <TIM_OC2_SetConfig+0x110>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d113      	bne.n	8009a28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	621a      	str	r2, [r3, #32]
}
 8009a42:	bf00      	nop
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	feff8fff 	.word	0xfeff8fff
 8009a54:	40010000 	.word	0x40010000
 8009a58:	40010400 	.word	0x40010400
 8009a5c:	40014000 	.word	0x40014000
 8009a60:	40014400 	.word	0x40014400
 8009a64:	40014800 	.word	0x40014800

08009a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	4b33      	ldr	r3, [pc, #204]	@ (8009b60 <TIM_OC3_SetConfig+0xf8>)
 8009a94:	4013      	ands	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f023 0303 	bic.w	r3, r3, #3
 8009a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a28      	ldr	r2, [pc, #160]	@ (8009b64 <TIM_OC3_SetConfig+0xfc>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d003      	beq.n	8009ace <TIM_OC3_SetConfig+0x66>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a27      	ldr	r2, [pc, #156]	@ (8009b68 <TIM_OC3_SetConfig+0x100>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d10d      	bne.n	8009aea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a1d      	ldr	r2, [pc, #116]	@ (8009b64 <TIM_OC3_SetConfig+0xfc>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00f      	beq.n	8009b12 <TIM_OC3_SetConfig+0xaa>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a1c      	ldr	r2, [pc, #112]	@ (8009b68 <TIM_OC3_SetConfig+0x100>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d00b      	beq.n	8009b12 <TIM_OC3_SetConfig+0xaa>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a1b      	ldr	r2, [pc, #108]	@ (8009b6c <TIM_OC3_SetConfig+0x104>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d007      	beq.n	8009b12 <TIM_OC3_SetConfig+0xaa>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a1a      	ldr	r2, [pc, #104]	@ (8009b70 <TIM_OC3_SetConfig+0x108>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d003      	beq.n	8009b12 <TIM_OC3_SetConfig+0xaa>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a19      	ldr	r2, [pc, #100]	@ (8009b74 <TIM_OC3_SetConfig+0x10c>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d113      	bne.n	8009b3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	621a      	str	r2, [r3, #32]
}
 8009b54:	bf00      	nop
 8009b56:	371c      	adds	r7, #28
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	fffeff8f 	.word	0xfffeff8f
 8009b64:	40010000 	.word	0x40010000
 8009b68:	40010400 	.word	0x40010400
 8009b6c:	40014000 	.word	0x40014000
 8009b70:	40014400 	.word	0x40014400
 8009b74:	40014800 	.word	0x40014800

08009b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4b24      	ldr	r3, [pc, #144]	@ (8009c34 <TIM_OC4_SetConfig+0xbc>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	021b      	lsls	r3, r3, #8
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	031b      	lsls	r3, r3, #12
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a19      	ldr	r2, [pc, #100]	@ (8009c38 <TIM_OC4_SetConfig+0xc0>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d00f      	beq.n	8009bf8 <TIM_OC4_SetConfig+0x80>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a18      	ldr	r2, [pc, #96]	@ (8009c3c <TIM_OC4_SetConfig+0xc4>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d00b      	beq.n	8009bf8 <TIM_OC4_SetConfig+0x80>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a17      	ldr	r2, [pc, #92]	@ (8009c40 <TIM_OC4_SetConfig+0xc8>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d007      	beq.n	8009bf8 <TIM_OC4_SetConfig+0x80>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a16      	ldr	r2, [pc, #88]	@ (8009c44 <TIM_OC4_SetConfig+0xcc>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d003      	beq.n	8009bf8 <TIM_OC4_SetConfig+0x80>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a15      	ldr	r2, [pc, #84]	@ (8009c48 <TIM_OC4_SetConfig+0xd0>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d109      	bne.n	8009c0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	019b      	lsls	r3, r3, #6
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	621a      	str	r2, [r3, #32]
}
 8009c26:	bf00      	nop
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	feff8fff 	.word	0xfeff8fff
 8009c38:	40010000 	.word	0x40010000
 8009c3c:	40010400 	.word	0x40010400
 8009c40:	40014000 	.word	0x40014000
 8009c44:	40014400 	.word	0x40014400
 8009c48:	40014800 	.word	0x40014800

08009c4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	4b21      	ldr	r3, [pc, #132]	@ (8009cfc <TIM_OC5_SetConfig+0xb0>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009c8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	041b      	lsls	r3, r3, #16
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a18      	ldr	r2, [pc, #96]	@ (8009d00 <TIM_OC5_SetConfig+0xb4>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00f      	beq.n	8009cc2 <TIM_OC5_SetConfig+0x76>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a17      	ldr	r2, [pc, #92]	@ (8009d04 <TIM_OC5_SetConfig+0xb8>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00b      	beq.n	8009cc2 <TIM_OC5_SetConfig+0x76>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a16      	ldr	r2, [pc, #88]	@ (8009d08 <TIM_OC5_SetConfig+0xbc>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d007      	beq.n	8009cc2 <TIM_OC5_SetConfig+0x76>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a15      	ldr	r2, [pc, #84]	@ (8009d0c <TIM_OC5_SetConfig+0xc0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d003      	beq.n	8009cc2 <TIM_OC5_SetConfig+0x76>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a14      	ldr	r2, [pc, #80]	@ (8009d10 <TIM_OC5_SetConfig+0xc4>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d109      	bne.n	8009cd6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	021b      	lsls	r3, r3, #8
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	621a      	str	r2, [r3, #32]
}
 8009cf0:	bf00      	nop
 8009cf2:	371c      	adds	r7, #28
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	fffeff8f 	.word	0xfffeff8f
 8009d00:	40010000 	.word	0x40010000
 8009d04:	40010400 	.word	0x40010400
 8009d08:	40014000 	.word	0x40014000
 8009d0c:	40014400 	.word	0x40014400
 8009d10:	40014800 	.word	0x40014800

08009d14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	4b22      	ldr	r3, [pc, #136]	@ (8009dc8 <TIM_OC6_SetConfig+0xb4>)
 8009d40:	4013      	ands	r3, r2
 8009d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	051b      	lsls	r3, r3, #20
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a19      	ldr	r2, [pc, #100]	@ (8009dcc <TIM_OC6_SetConfig+0xb8>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d00f      	beq.n	8009d8c <TIM_OC6_SetConfig+0x78>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a18      	ldr	r2, [pc, #96]	@ (8009dd0 <TIM_OC6_SetConfig+0xbc>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d00b      	beq.n	8009d8c <TIM_OC6_SetConfig+0x78>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a17      	ldr	r2, [pc, #92]	@ (8009dd4 <TIM_OC6_SetConfig+0xc0>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d007      	beq.n	8009d8c <TIM_OC6_SetConfig+0x78>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a16      	ldr	r2, [pc, #88]	@ (8009dd8 <TIM_OC6_SetConfig+0xc4>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d003      	beq.n	8009d8c <TIM_OC6_SetConfig+0x78>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a15      	ldr	r2, [pc, #84]	@ (8009ddc <TIM_OC6_SetConfig+0xc8>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d109      	bne.n	8009da0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	695b      	ldr	r3, [r3, #20]
 8009d98:	029b      	lsls	r3, r3, #10
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	621a      	str	r2, [r3, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	feff8fff 	.word	0xfeff8fff
 8009dcc:	40010000 	.word	0x40010000
 8009dd0:	40010400 	.word	0x40010400
 8009dd4:	40014000 	.word	0x40014000
 8009dd8:	40014400 	.word	0x40014400
 8009ddc:	40014800 	.word	0x40014800

08009de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f023 0201 	bic.w	r2, r3, #1
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	011b      	lsls	r3, r3, #4
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f023 030a 	bic.w	r3, r3, #10
 8009e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	621a      	str	r2, [r3, #32]
}
 8009e32:	bf00      	nop
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b087      	sub	sp, #28
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	60f8      	str	r0, [r7, #12]
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6a1b      	ldr	r3, [r3, #32]
 8009e54:	f023 0210 	bic.w	r2, r3, #16
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	031b      	lsls	r3, r3, #12
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	621a      	str	r2, [r3, #32]
}
 8009e92:	bf00      	nop
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
	...

08009ea0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	4b09      	ldr	r3, [pc, #36]	@ (8009ed8 <TIM_ITRx_SetConfig+0x38>)
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	f043 0307 	orr.w	r3, r3, #7
 8009ec2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	609a      	str	r2, [r3, #8]
}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	ffcfff8f 	.word	0xffcfff8f

08009edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	021a      	lsls	r2, r3, #8
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	609a      	str	r2, [r3, #8]
}
 8009f10:	bf00      	nop
 8009f12:	371c      	adds	r7, #28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d101      	bne.n	8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f30:	2302      	movs	r3, #2
 8009f32:	e06d      	b.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a30      	ldr	r2, [pc, #192]	@ (800a01c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d004      	beq.n	8009f68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a2f      	ldr	r2, [pc, #188]	@ (800a020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d108      	bne.n	8009f7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009f6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a20      	ldr	r2, [pc, #128]	@ (800a01c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d022      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa6:	d01d      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a1d      	ldr	r2, [pc, #116]	@ (800a024 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d018      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a1c      	ldr	r2, [pc, #112]	@ (800a028 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d013      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800a02c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00e      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a15      	ldr	r2, [pc, #84]	@ (800a020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d009      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a16      	ldr	r2, [pc, #88]	@ (800a030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d004      	beq.n	8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a15      	ldr	r2, [pc, #84]	@ (800a034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d10c      	bne.n	8009ffe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	40010000 	.word	0x40010000
 800a020:	40010400 	.word	0x40010400
 800a024:	40000400 	.word	0x40000400
 800a028:	40000800 	.word	0x40000800
 800a02c:	40000c00 	.word	0x40000c00
 800a030:	40001800 	.word	0x40001800
 800a034:	40014000 	.word	0x40014000

0800a038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d101      	bne.n	800a054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a050:	2302      	movs	r3, #2
 800a052:	e065      	b.n	800a120 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	4313      	orrs	r3, r2
 800a068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	4313      	orrs	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4313      	orrs	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	041b      	lsls	r3, r3, #16
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a16      	ldr	r2, [pc, #88]	@ (800a12c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d004      	beq.n	800a0e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a14      	ldr	r2, [pc, #80]	@ (800a130 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d115      	bne.n	800a10e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ec:	051b      	lsls	r3, r3, #20
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	69db      	ldr	r3, [r3, #28]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	40010000 	.word	0x40010000
 800a130:	40010400 	.word	0x40010400

0800a134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e042      	b.n	800a1cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d106      	bne.n	800a15e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7f8 fb0d 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2224      	movs	r2, #36	@ 0x24
 800a162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f022 0201 	bic.w	r2, r2, #1
 800a174:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fd90 	bl	800aca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f825 	bl	800a1d4 <UART_SetConfig>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d101      	bne.n	800a194 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e01b      	b.n	800a1cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685a      	ldr	r2, [r3, #4]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689a      	ldr	r2, [r3, #8]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f042 0201 	orr.w	r2, r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fe0f 	bl	800ade8 <UART_CheckIdleState>
 800a1ca:	4603      	mov	r3, r0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1d8:	b092      	sub	sp, #72	@ 0x48
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	689a      	ldr	r2, [r3, #8]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	431a      	orrs	r2, r3
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	695b      	ldr	r3, [r3, #20]
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	4bbe      	ldr	r3, [pc, #760]	@ (800a4fc <UART_SetConfig+0x328>)
 800a204:	4013      	ands	r3, r2
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	6812      	ldr	r2, [r2, #0]
 800a20a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a20c:	430b      	orrs	r3, r1
 800a20e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4ab3      	ldr	r2, [pc, #716]	@ (800a500 <UART_SetConfig+0x32c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d004      	beq.n	800a240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a23c:	4313      	orrs	r3, r2
 800a23e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689a      	ldr	r2, [r3, #8]
 800a246:	4baf      	ldr	r3, [pc, #700]	@ (800a504 <UART_SetConfig+0x330>)
 800a248:	4013      	ands	r3, r2
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	6812      	ldr	r2, [r2, #0]
 800a24e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a250:	430b      	orrs	r3, r1
 800a252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a25a:	f023 010f 	bic.w	r1, r3, #15
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4aa6      	ldr	r2, [pc, #664]	@ (800a508 <UART_SetConfig+0x334>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d177      	bne.n	800a364 <UART_SetConfig+0x190>
 800a274:	4ba5      	ldr	r3, [pc, #660]	@ (800a50c <UART_SetConfig+0x338>)
 800a276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a278:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a27c:	2b28      	cmp	r3, #40	@ 0x28
 800a27e:	d86d      	bhi.n	800a35c <UART_SetConfig+0x188>
 800a280:	a201      	add	r2, pc, #4	@ (adr r2, 800a288 <UART_SetConfig+0xb4>)
 800a282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a286:	bf00      	nop
 800a288:	0800a32d 	.word	0x0800a32d
 800a28c:	0800a35d 	.word	0x0800a35d
 800a290:	0800a35d 	.word	0x0800a35d
 800a294:	0800a35d 	.word	0x0800a35d
 800a298:	0800a35d 	.word	0x0800a35d
 800a29c:	0800a35d 	.word	0x0800a35d
 800a2a0:	0800a35d 	.word	0x0800a35d
 800a2a4:	0800a35d 	.word	0x0800a35d
 800a2a8:	0800a335 	.word	0x0800a335
 800a2ac:	0800a35d 	.word	0x0800a35d
 800a2b0:	0800a35d 	.word	0x0800a35d
 800a2b4:	0800a35d 	.word	0x0800a35d
 800a2b8:	0800a35d 	.word	0x0800a35d
 800a2bc:	0800a35d 	.word	0x0800a35d
 800a2c0:	0800a35d 	.word	0x0800a35d
 800a2c4:	0800a35d 	.word	0x0800a35d
 800a2c8:	0800a33d 	.word	0x0800a33d
 800a2cc:	0800a35d 	.word	0x0800a35d
 800a2d0:	0800a35d 	.word	0x0800a35d
 800a2d4:	0800a35d 	.word	0x0800a35d
 800a2d8:	0800a35d 	.word	0x0800a35d
 800a2dc:	0800a35d 	.word	0x0800a35d
 800a2e0:	0800a35d 	.word	0x0800a35d
 800a2e4:	0800a35d 	.word	0x0800a35d
 800a2e8:	0800a345 	.word	0x0800a345
 800a2ec:	0800a35d 	.word	0x0800a35d
 800a2f0:	0800a35d 	.word	0x0800a35d
 800a2f4:	0800a35d 	.word	0x0800a35d
 800a2f8:	0800a35d 	.word	0x0800a35d
 800a2fc:	0800a35d 	.word	0x0800a35d
 800a300:	0800a35d 	.word	0x0800a35d
 800a304:	0800a35d 	.word	0x0800a35d
 800a308:	0800a34d 	.word	0x0800a34d
 800a30c:	0800a35d 	.word	0x0800a35d
 800a310:	0800a35d 	.word	0x0800a35d
 800a314:	0800a35d 	.word	0x0800a35d
 800a318:	0800a35d 	.word	0x0800a35d
 800a31c:	0800a35d 	.word	0x0800a35d
 800a320:	0800a35d 	.word	0x0800a35d
 800a324:	0800a35d 	.word	0x0800a35d
 800a328:	0800a355 	.word	0x0800a355
 800a32c:	2301      	movs	r3, #1
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a332:	e222      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a334:	2304      	movs	r3, #4
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33a:	e21e      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a33c:	2308      	movs	r3, #8
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a342:	e21a      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a344:	2310      	movs	r3, #16
 800a346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34a:	e216      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a34c:	2320      	movs	r3, #32
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e212      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a354:	2340      	movs	r3, #64	@ 0x40
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e20e      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a35c:	2380      	movs	r3, #128	@ 0x80
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a362:	e20a      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a69      	ldr	r2, [pc, #420]	@ (800a510 <UART_SetConfig+0x33c>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d130      	bne.n	800a3d0 <UART_SetConfig+0x1fc>
 800a36e:	4b67      	ldr	r3, [pc, #412]	@ (800a50c <UART_SetConfig+0x338>)
 800a370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a372:	f003 0307 	and.w	r3, r3, #7
 800a376:	2b05      	cmp	r3, #5
 800a378:	d826      	bhi.n	800a3c8 <UART_SetConfig+0x1f4>
 800a37a:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <UART_SetConfig+0x1ac>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a399 	.word	0x0800a399
 800a384:	0800a3a1 	.word	0x0800a3a1
 800a388:	0800a3a9 	.word	0x0800a3a9
 800a38c:	0800a3b1 	.word	0x0800a3b1
 800a390:	0800a3b9 	.word	0x0800a3b9
 800a394:	0800a3c1 	.word	0x0800a3c1
 800a398:	2300      	movs	r3, #0
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e1ec      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a6:	e1e8      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a3a8:	2308      	movs	r3, #8
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ae:	e1e4      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a3b0:	2310      	movs	r3, #16
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b6:	e1e0      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a3b8:	2320      	movs	r3, #32
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e1dc      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a3c0:	2340      	movs	r3, #64	@ 0x40
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e1d8      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a3c8:	2380      	movs	r3, #128	@ 0x80
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e1d4      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a4f      	ldr	r2, [pc, #316]	@ (800a514 <UART_SetConfig+0x340>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d130      	bne.n	800a43c <UART_SetConfig+0x268>
 800a3da:	4b4c      	ldr	r3, [pc, #304]	@ (800a50c <UART_SetConfig+0x338>)
 800a3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3de:	f003 0307 	and.w	r3, r3, #7
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	d826      	bhi.n	800a434 <UART_SetConfig+0x260>
 800a3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3ec <UART_SetConfig+0x218>)
 800a3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ec:	0800a405 	.word	0x0800a405
 800a3f0:	0800a40d 	.word	0x0800a40d
 800a3f4:	0800a415 	.word	0x0800a415
 800a3f8:	0800a41d 	.word	0x0800a41d
 800a3fc:	0800a425 	.word	0x0800a425
 800a400:	0800a42d 	.word	0x0800a42d
 800a404:	2300      	movs	r3, #0
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e1b6      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a40c:	2304      	movs	r3, #4
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e1b2      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a414:	2308      	movs	r3, #8
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41a:	e1ae      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a41c:	2310      	movs	r3, #16
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a422:	e1aa      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a424:	2320      	movs	r3, #32
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e1a6      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a42c:	2340      	movs	r3, #64	@ 0x40
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e1a2      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a434:	2380      	movs	r3, #128	@ 0x80
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e19e      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a35      	ldr	r2, [pc, #212]	@ (800a518 <UART_SetConfig+0x344>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d130      	bne.n	800a4a8 <UART_SetConfig+0x2d4>
 800a446:	4b31      	ldr	r3, [pc, #196]	@ (800a50c <UART_SetConfig+0x338>)
 800a448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a44a:	f003 0307 	and.w	r3, r3, #7
 800a44e:	2b05      	cmp	r3, #5
 800a450:	d826      	bhi.n	800a4a0 <UART_SetConfig+0x2cc>
 800a452:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <UART_SetConfig+0x284>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a471 	.word	0x0800a471
 800a45c:	0800a479 	.word	0x0800a479
 800a460:	0800a481 	.word	0x0800a481
 800a464:	0800a489 	.word	0x0800a489
 800a468:	0800a491 	.word	0x0800a491
 800a46c:	0800a499 	.word	0x0800a499
 800a470:	2300      	movs	r3, #0
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e180      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a478:	2304      	movs	r3, #4
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47e:	e17c      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a480:	2308      	movs	r3, #8
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a486:	e178      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a488:	2310      	movs	r3, #16
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48e:	e174      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a490:	2320      	movs	r3, #32
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a496:	e170      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a498:	2340      	movs	r3, #64	@ 0x40
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e16c      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a4a0:	2380      	movs	r3, #128	@ 0x80
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e168      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a1b      	ldr	r2, [pc, #108]	@ (800a51c <UART_SetConfig+0x348>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d142      	bne.n	800a538 <UART_SetConfig+0x364>
 800a4b2:	4b16      	ldr	r3, [pc, #88]	@ (800a50c <UART_SetConfig+0x338>)
 800a4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	2b05      	cmp	r3, #5
 800a4bc:	d838      	bhi.n	800a530 <UART_SetConfig+0x35c>
 800a4be:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c4 <UART_SetConfig+0x2f0>)
 800a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c4:	0800a4dd 	.word	0x0800a4dd
 800a4c8:	0800a4e5 	.word	0x0800a4e5
 800a4cc:	0800a4ed 	.word	0x0800a4ed
 800a4d0:	0800a4f5 	.word	0x0800a4f5
 800a4d4:	0800a521 	.word	0x0800a521
 800a4d8:	0800a529 	.word	0x0800a529
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e14a      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ea:	e146      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a4ec:	2308      	movs	r3, #8
 800a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f2:	e142      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a4f4:	2310      	movs	r3, #16
 800a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fa:	e13e      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a4fc:	cfff69f3 	.word	0xcfff69f3
 800a500:	58000c00 	.word	0x58000c00
 800a504:	11fff4ff 	.word	0x11fff4ff
 800a508:	40011000 	.word	0x40011000
 800a50c:	58024400 	.word	0x58024400
 800a510:	40004400 	.word	0x40004400
 800a514:	40004800 	.word	0x40004800
 800a518:	40004c00 	.word	0x40004c00
 800a51c:	40005000 	.word	0x40005000
 800a520:	2320      	movs	r3, #32
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e128      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a528:	2340      	movs	r3, #64	@ 0x40
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52e:	e124      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a530:	2380      	movs	r3, #128	@ 0x80
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a536:	e120      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4acb      	ldr	r2, [pc, #812]	@ (800a86c <UART_SetConfig+0x698>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d176      	bne.n	800a630 <UART_SetConfig+0x45c>
 800a542:	4bcb      	ldr	r3, [pc, #812]	@ (800a870 <UART_SetConfig+0x69c>)
 800a544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a54a:	2b28      	cmp	r3, #40	@ 0x28
 800a54c:	d86c      	bhi.n	800a628 <UART_SetConfig+0x454>
 800a54e:	a201      	add	r2, pc, #4	@ (adr r2, 800a554 <UART_SetConfig+0x380>)
 800a550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a554:	0800a5f9 	.word	0x0800a5f9
 800a558:	0800a629 	.word	0x0800a629
 800a55c:	0800a629 	.word	0x0800a629
 800a560:	0800a629 	.word	0x0800a629
 800a564:	0800a629 	.word	0x0800a629
 800a568:	0800a629 	.word	0x0800a629
 800a56c:	0800a629 	.word	0x0800a629
 800a570:	0800a629 	.word	0x0800a629
 800a574:	0800a601 	.word	0x0800a601
 800a578:	0800a629 	.word	0x0800a629
 800a57c:	0800a629 	.word	0x0800a629
 800a580:	0800a629 	.word	0x0800a629
 800a584:	0800a629 	.word	0x0800a629
 800a588:	0800a629 	.word	0x0800a629
 800a58c:	0800a629 	.word	0x0800a629
 800a590:	0800a629 	.word	0x0800a629
 800a594:	0800a609 	.word	0x0800a609
 800a598:	0800a629 	.word	0x0800a629
 800a59c:	0800a629 	.word	0x0800a629
 800a5a0:	0800a629 	.word	0x0800a629
 800a5a4:	0800a629 	.word	0x0800a629
 800a5a8:	0800a629 	.word	0x0800a629
 800a5ac:	0800a629 	.word	0x0800a629
 800a5b0:	0800a629 	.word	0x0800a629
 800a5b4:	0800a611 	.word	0x0800a611
 800a5b8:	0800a629 	.word	0x0800a629
 800a5bc:	0800a629 	.word	0x0800a629
 800a5c0:	0800a629 	.word	0x0800a629
 800a5c4:	0800a629 	.word	0x0800a629
 800a5c8:	0800a629 	.word	0x0800a629
 800a5cc:	0800a629 	.word	0x0800a629
 800a5d0:	0800a629 	.word	0x0800a629
 800a5d4:	0800a619 	.word	0x0800a619
 800a5d8:	0800a629 	.word	0x0800a629
 800a5dc:	0800a629 	.word	0x0800a629
 800a5e0:	0800a629 	.word	0x0800a629
 800a5e4:	0800a629 	.word	0x0800a629
 800a5e8:	0800a629 	.word	0x0800a629
 800a5ec:	0800a629 	.word	0x0800a629
 800a5f0:	0800a629 	.word	0x0800a629
 800a5f4:	0800a621 	.word	0x0800a621
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fe:	e0bc      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a600:	2304      	movs	r3, #4
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a606:	e0b8      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a608:	2308      	movs	r3, #8
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60e:	e0b4      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a610:	2310      	movs	r3, #16
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a616:	e0b0      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a618:	2320      	movs	r3, #32
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61e:	e0ac      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a620:	2340      	movs	r3, #64	@ 0x40
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e0a8      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a628:	2380      	movs	r3, #128	@ 0x80
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62e:	e0a4      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a8f      	ldr	r2, [pc, #572]	@ (800a874 <UART_SetConfig+0x6a0>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d130      	bne.n	800a69c <UART_SetConfig+0x4c8>
 800a63a:	4b8d      	ldr	r3, [pc, #564]	@ (800a870 <UART_SetConfig+0x69c>)
 800a63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63e:	f003 0307 	and.w	r3, r3, #7
 800a642:	2b05      	cmp	r3, #5
 800a644:	d826      	bhi.n	800a694 <UART_SetConfig+0x4c0>
 800a646:	a201      	add	r2, pc, #4	@ (adr r2, 800a64c <UART_SetConfig+0x478>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a665 	.word	0x0800a665
 800a650:	0800a66d 	.word	0x0800a66d
 800a654:	0800a675 	.word	0x0800a675
 800a658:	0800a67d 	.word	0x0800a67d
 800a65c:	0800a685 	.word	0x0800a685
 800a660:	0800a68d 	.word	0x0800a68d
 800a664:	2300      	movs	r3, #0
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e086      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a66c:	2304      	movs	r3, #4
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e082      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a674:	2308      	movs	r3, #8
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a67a:	e07e      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a67c:	2310      	movs	r3, #16
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a682:	e07a      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a684:	2320      	movs	r3, #32
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e076      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a68c:	2340      	movs	r3, #64	@ 0x40
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e072      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a694:	2380      	movs	r3, #128	@ 0x80
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e06e      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a75      	ldr	r2, [pc, #468]	@ (800a878 <UART_SetConfig+0x6a4>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d130      	bne.n	800a708 <UART_SetConfig+0x534>
 800a6a6:	4b72      	ldr	r3, [pc, #456]	@ (800a870 <UART_SetConfig+0x69c>)
 800a6a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6aa:	f003 0307 	and.w	r3, r3, #7
 800a6ae:	2b05      	cmp	r3, #5
 800a6b0:	d826      	bhi.n	800a700 <UART_SetConfig+0x52c>
 800a6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b8 <UART_SetConfig+0x4e4>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a6d1 	.word	0x0800a6d1
 800a6bc:	0800a6d9 	.word	0x0800a6d9
 800a6c0:	0800a6e1 	.word	0x0800a6e1
 800a6c4:	0800a6e9 	.word	0x0800a6e9
 800a6c8:	0800a6f1 	.word	0x0800a6f1
 800a6cc:	0800a6f9 	.word	0x0800a6f9
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e050      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a6d8:	2304      	movs	r3, #4
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e04c      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a6e0:	2308      	movs	r3, #8
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e6:	e048      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a6e8:	2310      	movs	r3, #16
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ee:	e044      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a6f0:	2320      	movs	r3, #32
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e040      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a6f8:	2340      	movs	r3, #64	@ 0x40
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e03c      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a700:	2380      	movs	r3, #128	@ 0x80
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e038      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a5b      	ldr	r2, [pc, #364]	@ (800a87c <UART_SetConfig+0x6a8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d130      	bne.n	800a774 <UART_SetConfig+0x5a0>
 800a712:	4b57      	ldr	r3, [pc, #348]	@ (800a870 <UART_SetConfig+0x69c>)
 800a714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a716:	f003 0307 	and.w	r3, r3, #7
 800a71a:	2b05      	cmp	r3, #5
 800a71c:	d826      	bhi.n	800a76c <UART_SetConfig+0x598>
 800a71e:	a201      	add	r2, pc, #4	@ (adr r2, 800a724 <UART_SetConfig+0x550>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a73d 	.word	0x0800a73d
 800a728:	0800a745 	.word	0x0800a745
 800a72c:	0800a74d 	.word	0x0800a74d
 800a730:	0800a755 	.word	0x0800a755
 800a734:	0800a75d 	.word	0x0800a75d
 800a738:	0800a765 	.word	0x0800a765
 800a73c:	2302      	movs	r3, #2
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e01a      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a744:	2304      	movs	r3, #4
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e016      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a74c:	2308      	movs	r3, #8
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a752:	e012      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a754:	2310      	movs	r3, #16
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75a:	e00e      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a75c:	2320      	movs	r3, #32
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e00a      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a764:	2340      	movs	r3, #64	@ 0x40
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e006      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a76c:	2380      	movs	r3, #128	@ 0x80
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e002      	b.n	800a77a <UART_SetConfig+0x5a6>
 800a774:	2380      	movs	r3, #128	@ 0x80
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a3f      	ldr	r2, [pc, #252]	@ (800a87c <UART_SetConfig+0x6a8>)
 800a780:	4293      	cmp	r3, r2
 800a782:	f040 80f8 	bne.w	800a976 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a786:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a78a:	2b20      	cmp	r3, #32
 800a78c:	dc46      	bgt.n	800a81c <UART_SetConfig+0x648>
 800a78e:	2b02      	cmp	r3, #2
 800a790:	f2c0 8082 	blt.w	800a898 <UART_SetConfig+0x6c4>
 800a794:	3b02      	subs	r3, #2
 800a796:	2b1e      	cmp	r3, #30
 800a798:	d87e      	bhi.n	800a898 <UART_SetConfig+0x6c4>
 800a79a:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a0 <UART_SetConfig+0x5cc>)
 800a79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a0:	0800a823 	.word	0x0800a823
 800a7a4:	0800a899 	.word	0x0800a899
 800a7a8:	0800a82b 	.word	0x0800a82b
 800a7ac:	0800a899 	.word	0x0800a899
 800a7b0:	0800a899 	.word	0x0800a899
 800a7b4:	0800a899 	.word	0x0800a899
 800a7b8:	0800a83b 	.word	0x0800a83b
 800a7bc:	0800a899 	.word	0x0800a899
 800a7c0:	0800a899 	.word	0x0800a899
 800a7c4:	0800a899 	.word	0x0800a899
 800a7c8:	0800a899 	.word	0x0800a899
 800a7cc:	0800a899 	.word	0x0800a899
 800a7d0:	0800a899 	.word	0x0800a899
 800a7d4:	0800a899 	.word	0x0800a899
 800a7d8:	0800a84b 	.word	0x0800a84b
 800a7dc:	0800a899 	.word	0x0800a899
 800a7e0:	0800a899 	.word	0x0800a899
 800a7e4:	0800a899 	.word	0x0800a899
 800a7e8:	0800a899 	.word	0x0800a899
 800a7ec:	0800a899 	.word	0x0800a899
 800a7f0:	0800a899 	.word	0x0800a899
 800a7f4:	0800a899 	.word	0x0800a899
 800a7f8:	0800a899 	.word	0x0800a899
 800a7fc:	0800a899 	.word	0x0800a899
 800a800:	0800a899 	.word	0x0800a899
 800a804:	0800a899 	.word	0x0800a899
 800a808:	0800a899 	.word	0x0800a899
 800a80c:	0800a899 	.word	0x0800a899
 800a810:	0800a899 	.word	0x0800a899
 800a814:	0800a899 	.word	0x0800a899
 800a818:	0800a88b 	.word	0x0800a88b
 800a81c:	2b40      	cmp	r3, #64	@ 0x40
 800a81e:	d037      	beq.n	800a890 <UART_SetConfig+0x6bc>
 800a820:	e03a      	b.n	800a898 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a822:	f7fc fa3d 	bl	8006ca0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a826:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a828:	e03c      	b.n	800a8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a82a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fc fa4c 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a838:	e034      	b.n	800a8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a83a:	f107 0318 	add.w	r3, r7, #24
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fc fb98 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a848:	e02c      	b.n	800a8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a84a:	4b09      	ldr	r3, [pc, #36]	@ (800a870 <UART_SetConfig+0x69c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	2b00      	cmp	r3, #0
 800a854:	d016      	beq.n	800a884 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a856:	4b06      	ldr	r3, [pc, #24]	@ (800a870 <UART_SetConfig+0x69c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	08db      	lsrs	r3, r3, #3
 800a85c:	f003 0303 	and.w	r3, r3, #3
 800a860:	4a07      	ldr	r2, [pc, #28]	@ (800a880 <UART_SetConfig+0x6ac>)
 800a862:	fa22 f303 	lsr.w	r3, r2, r3
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a868:	e01c      	b.n	800a8a4 <UART_SetConfig+0x6d0>
 800a86a:	bf00      	nop
 800a86c:	40011400 	.word	0x40011400
 800a870:	58024400 	.word	0x58024400
 800a874:	40007800 	.word	0x40007800
 800a878:	40007c00 	.word	0x40007c00
 800a87c:	58000c00 	.word	0x58000c00
 800a880:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a884:	4b9d      	ldr	r3, [pc, #628]	@ (800aafc <UART_SetConfig+0x928>)
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a888:	e00c      	b.n	800a8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a88a:	4b9d      	ldr	r3, [pc, #628]	@ (800ab00 <UART_SetConfig+0x92c>)
 800a88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a88e:	e009      	b.n	800a8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a896:	e005      	b.n	800a8a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f000 81de 	beq.w	800ac68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b0:	4a94      	ldr	r2, [pc, #592]	@ (800ab04 <UART_SetConfig+0x930>)
 800a8b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	4413      	add	r3, r2
 800a8ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d305      	bcc.n	800a8dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d903      	bls.n	800a8e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a8e2:	e1c1      	b.n	800ac68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	60bb      	str	r3, [r7, #8]
 800a8ea:	60fa      	str	r2, [r7, #12]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f0:	4a84      	ldr	r2, [pc, #528]	@ (800ab04 <UART_SetConfig+0x930>)
 800a8f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	607a      	str	r2, [r7, #4]
 800a8fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a906:	f7f5 fce7 	bl	80002d8 <__aeabi_uldivmod>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4610      	mov	r0, r2
 800a910:	4619      	mov	r1, r3
 800a912:	f04f 0200 	mov.w	r2, #0
 800a916:	f04f 0300 	mov.w	r3, #0
 800a91a:	020b      	lsls	r3, r1, #8
 800a91c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a920:	0202      	lsls	r2, r0, #8
 800a922:	6979      	ldr	r1, [r7, #20]
 800a924:	6849      	ldr	r1, [r1, #4]
 800a926:	0849      	lsrs	r1, r1, #1
 800a928:	2000      	movs	r0, #0
 800a92a:	460c      	mov	r4, r1
 800a92c:	4605      	mov	r5, r0
 800a92e:	eb12 0804 	adds.w	r8, r2, r4
 800a932:	eb43 0905 	adc.w	r9, r3, r5
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	469a      	mov	sl, r3
 800a93e:	4693      	mov	fp, r2
 800a940:	4652      	mov	r2, sl
 800a942:	465b      	mov	r3, fp
 800a944:	4640      	mov	r0, r8
 800a946:	4649      	mov	r1, r9
 800a948:	f7f5 fcc6 	bl	80002d8 <__aeabi_uldivmod>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4613      	mov	r3, r2
 800a952:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a95a:	d308      	bcc.n	800a96e <UART_SetConfig+0x79a>
 800a95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a962:	d204      	bcs.n	800a96e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a96a:	60da      	str	r2, [r3, #12]
 800a96c:	e17c      	b.n	800ac68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a974:	e178      	b.n	800ac68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a97e:	f040 80c5 	bne.w	800ab0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a982:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a986:	2b20      	cmp	r3, #32
 800a988:	dc48      	bgt.n	800aa1c <UART_SetConfig+0x848>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	db7b      	blt.n	800aa86 <UART_SetConfig+0x8b2>
 800a98e:	2b20      	cmp	r3, #32
 800a990:	d879      	bhi.n	800aa86 <UART_SetConfig+0x8b2>
 800a992:	a201      	add	r2, pc, #4	@ (adr r2, 800a998 <UART_SetConfig+0x7c4>)
 800a994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a998:	0800aa23 	.word	0x0800aa23
 800a99c:	0800aa2b 	.word	0x0800aa2b
 800a9a0:	0800aa87 	.word	0x0800aa87
 800a9a4:	0800aa87 	.word	0x0800aa87
 800a9a8:	0800aa33 	.word	0x0800aa33
 800a9ac:	0800aa87 	.word	0x0800aa87
 800a9b0:	0800aa87 	.word	0x0800aa87
 800a9b4:	0800aa87 	.word	0x0800aa87
 800a9b8:	0800aa43 	.word	0x0800aa43
 800a9bc:	0800aa87 	.word	0x0800aa87
 800a9c0:	0800aa87 	.word	0x0800aa87
 800a9c4:	0800aa87 	.word	0x0800aa87
 800a9c8:	0800aa87 	.word	0x0800aa87
 800a9cc:	0800aa87 	.word	0x0800aa87
 800a9d0:	0800aa87 	.word	0x0800aa87
 800a9d4:	0800aa87 	.word	0x0800aa87
 800a9d8:	0800aa53 	.word	0x0800aa53
 800a9dc:	0800aa87 	.word	0x0800aa87
 800a9e0:	0800aa87 	.word	0x0800aa87
 800a9e4:	0800aa87 	.word	0x0800aa87
 800a9e8:	0800aa87 	.word	0x0800aa87
 800a9ec:	0800aa87 	.word	0x0800aa87
 800a9f0:	0800aa87 	.word	0x0800aa87
 800a9f4:	0800aa87 	.word	0x0800aa87
 800a9f8:	0800aa87 	.word	0x0800aa87
 800a9fc:	0800aa87 	.word	0x0800aa87
 800aa00:	0800aa87 	.word	0x0800aa87
 800aa04:	0800aa87 	.word	0x0800aa87
 800aa08:	0800aa87 	.word	0x0800aa87
 800aa0c:	0800aa87 	.word	0x0800aa87
 800aa10:	0800aa87 	.word	0x0800aa87
 800aa14:	0800aa87 	.word	0x0800aa87
 800aa18:	0800aa79 	.word	0x0800aa79
 800aa1c:	2b40      	cmp	r3, #64	@ 0x40
 800aa1e:	d02e      	beq.n	800aa7e <UART_SetConfig+0x8aa>
 800aa20:	e031      	b.n	800aa86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa22:	f7fa f947 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 800aa26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa28:	e033      	b.n	800aa92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa2a:	f7fa f959 	bl	8004ce0 <HAL_RCC_GetPCLK2Freq>
 800aa2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa30:	e02f      	b.n	800aa92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fc f948 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa40:	e027      	b.n	800aa92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa42:	f107 0318 	add.w	r3, r7, #24
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fc fa94 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa50:	e01f      	b.n	800aa92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa52:	4b2d      	ldr	r3, [pc, #180]	@ (800ab08 <UART_SetConfig+0x934>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d009      	beq.n	800aa72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa5e:	4b2a      	ldr	r3, [pc, #168]	@ (800ab08 <UART_SetConfig+0x934>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	08db      	lsrs	r3, r3, #3
 800aa64:	f003 0303 	and.w	r3, r3, #3
 800aa68:	4a24      	ldr	r2, [pc, #144]	@ (800aafc <UART_SetConfig+0x928>)
 800aa6a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa70:	e00f      	b.n	800aa92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aa72:	4b22      	ldr	r3, [pc, #136]	@ (800aafc <UART_SetConfig+0x928>)
 800aa74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa76:	e00c      	b.n	800aa92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa78:	4b21      	ldr	r3, [pc, #132]	@ (800ab00 <UART_SetConfig+0x92c>)
 800aa7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa7c:	e009      	b.n	800aa92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa84:	e005      	b.n	800aa92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 80e7 	beq.w	800ac68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9e:	4a19      	ldr	r2, [pc, #100]	@ (800ab04 <UART_SetConfig+0x930>)
 800aaa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaa8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaac:	005a      	lsls	r2, r3, #1
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	085b      	lsrs	r3, r3, #1
 800aab4:	441a      	add	r2, r3
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	fbb2 f3f3 	udiv	r3, r2, r3
 800aabe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac2:	2b0f      	cmp	r3, #15
 800aac4:	d916      	bls.n	800aaf4 <UART_SetConfig+0x920>
 800aac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aacc:	d212      	bcs.n	800aaf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	f023 030f 	bic.w	r3, r3, #15
 800aad6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aada:	085b      	lsrs	r3, r3, #1
 800aadc:	b29b      	uxth	r3, r3
 800aade:	f003 0307 	and.w	r3, r3, #7
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aae6:	4313      	orrs	r3, r2
 800aae8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aaf0:	60da      	str	r2, [r3, #12]
 800aaf2:	e0b9      	b.n	800ac68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aafa:	e0b5      	b.n	800ac68 <UART_SetConfig+0xa94>
 800aafc:	03d09000 	.word	0x03d09000
 800ab00:	003d0900 	.word	0x003d0900
 800ab04:	0800c904 	.word	0x0800c904
 800ab08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab10:	2b20      	cmp	r3, #32
 800ab12:	dc49      	bgt.n	800aba8 <UART_SetConfig+0x9d4>
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	db7c      	blt.n	800ac12 <UART_SetConfig+0xa3e>
 800ab18:	2b20      	cmp	r3, #32
 800ab1a:	d87a      	bhi.n	800ac12 <UART_SetConfig+0xa3e>
 800ab1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab24 <UART_SetConfig+0x950>)
 800ab1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab22:	bf00      	nop
 800ab24:	0800abaf 	.word	0x0800abaf
 800ab28:	0800abb7 	.word	0x0800abb7
 800ab2c:	0800ac13 	.word	0x0800ac13
 800ab30:	0800ac13 	.word	0x0800ac13
 800ab34:	0800abbf 	.word	0x0800abbf
 800ab38:	0800ac13 	.word	0x0800ac13
 800ab3c:	0800ac13 	.word	0x0800ac13
 800ab40:	0800ac13 	.word	0x0800ac13
 800ab44:	0800abcf 	.word	0x0800abcf
 800ab48:	0800ac13 	.word	0x0800ac13
 800ab4c:	0800ac13 	.word	0x0800ac13
 800ab50:	0800ac13 	.word	0x0800ac13
 800ab54:	0800ac13 	.word	0x0800ac13
 800ab58:	0800ac13 	.word	0x0800ac13
 800ab5c:	0800ac13 	.word	0x0800ac13
 800ab60:	0800ac13 	.word	0x0800ac13
 800ab64:	0800abdf 	.word	0x0800abdf
 800ab68:	0800ac13 	.word	0x0800ac13
 800ab6c:	0800ac13 	.word	0x0800ac13
 800ab70:	0800ac13 	.word	0x0800ac13
 800ab74:	0800ac13 	.word	0x0800ac13
 800ab78:	0800ac13 	.word	0x0800ac13
 800ab7c:	0800ac13 	.word	0x0800ac13
 800ab80:	0800ac13 	.word	0x0800ac13
 800ab84:	0800ac13 	.word	0x0800ac13
 800ab88:	0800ac13 	.word	0x0800ac13
 800ab8c:	0800ac13 	.word	0x0800ac13
 800ab90:	0800ac13 	.word	0x0800ac13
 800ab94:	0800ac13 	.word	0x0800ac13
 800ab98:	0800ac13 	.word	0x0800ac13
 800ab9c:	0800ac13 	.word	0x0800ac13
 800aba0:	0800ac13 	.word	0x0800ac13
 800aba4:	0800ac05 	.word	0x0800ac05
 800aba8:	2b40      	cmp	r3, #64	@ 0x40
 800abaa:	d02e      	beq.n	800ac0a <UART_SetConfig+0xa36>
 800abac:	e031      	b.n	800ac12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abae:	f7fa f881 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 800abb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abb4:	e033      	b.n	800ac1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abb6:	f7fa f893 	bl	8004ce0 <HAL_RCC_GetPCLK2Freq>
 800abba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abbc:	e02f      	b.n	800ac1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fc f882 	bl	8006ccc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abcc:	e027      	b.n	800ac1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abce:	f107 0318 	add.w	r3, r7, #24
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fc f9ce 	bl	8006f74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abdc:	e01f      	b.n	800ac1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abde:	4b2d      	ldr	r3, [pc, #180]	@ (800ac94 <UART_SetConfig+0xac0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0320 	and.w	r3, r3, #32
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d009      	beq.n	800abfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abea:	4b2a      	ldr	r3, [pc, #168]	@ (800ac94 <UART_SetConfig+0xac0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	08db      	lsrs	r3, r3, #3
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	4a28      	ldr	r2, [pc, #160]	@ (800ac98 <UART_SetConfig+0xac4>)
 800abf6:	fa22 f303 	lsr.w	r3, r2, r3
 800abfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abfc:	e00f      	b.n	800ac1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800abfe:	4b26      	ldr	r3, [pc, #152]	@ (800ac98 <UART_SetConfig+0xac4>)
 800ac00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac02:	e00c      	b.n	800ac1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac04:	4b25      	ldr	r3, [pc, #148]	@ (800ac9c <UART_SetConfig+0xac8>)
 800ac06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac08:	e009      	b.n	800ac1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac10:	e005      	b.n	800ac1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac1c:	bf00      	nop
    }

    if (pclk != 0U)
 800ac1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d021      	beq.n	800ac68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac28:	4a1d      	ldr	r2, [pc, #116]	@ (800aca0 <UART_SetConfig+0xacc>)
 800ac2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac32:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	085b      	lsrs	r3, r3, #1
 800ac3c:	441a      	add	r2, r3
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4a:	2b0f      	cmp	r3, #15
 800ac4c:	d909      	bls.n	800ac62 <UART_SetConfig+0xa8e>
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac54:	d205      	bcs.n	800ac62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	60da      	str	r2, [r3, #12]
 800ac60:	e002      	b.n	800ac68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2200      	movs	r2, #0
 800ac82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ac84:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3748      	adds	r7, #72	@ 0x48
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac92:	bf00      	nop
 800ac94:	58024400 	.word	0x58024400
 800ac98:	03d09000 	.word	0x03d09000
 800ac9c:	003d0900 	.word	0x003d0900
 800aca0:	0800c904 	.word	0x0800c904

0800aca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb0:	f003 0308 	and.w	r3, r3, #8
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00a      	beq.n	800acce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	430a      	orrs	r2, r1
 800accc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	430a      	orrs	r2, r1
 800acee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf4:	f003 0302 	and.w	r3, r3, #2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00a      	beq.n	800ad12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00a      	beq.n	800ad34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad38:	f003 0310 	and.w	r3, r3, #16
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00a      	beq.n	800ad56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad5a:	f003 0320 	and.w	r3, r3, #32
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00a      	beq.n	800ad78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	430a      	orrs	r2, r1
 800ad76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d01a      	beq.n	800adba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	430a      	orrs	r2, r1
 800ad98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ada2:	d10a      	bne.n	800adba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00a      	beq.n	800addc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	430a      	orrs	r2, r1
 800adda:	605a      	str	r2, [r3, #4]
  }
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b098      	sub	sp, #96	@ 0x60
 800adec:	af02      	add	r7, sp, #8
 800adee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800adf8:	f7f8 f916 	bl	8003028 <HAL_GetTick>
 800adfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0308 	and.w	r3, r3, #8
 800ae08:	2b08      	cmp	r3, #8
 800ae0a:	d12f      	bne.n	800ae6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae14:	2200      	movs	r2, #0
 800ae16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f88e 	bl	800af3c <UART_WaitOnFlagUntilTimeout>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d022      	beq.n	800ae6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2e:	e853 3f00 	ldrex	r3, [r3]
 800ae32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae44:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae4c:	e841 2300 	strex	r3, r2, [r1]
 800ae50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1e6      	bne.n	800ae26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e063      	b.n	800af34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 0304 	and.w	r3, r3, #4
 800ae76:	2b04      	cmp	r3, #4
 800ae78:	d149      	bne.n	800af0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae82:	2200      	movs	r2, #0
 800ae84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 f857 	bl	800af3c <UART_WaitOnFlagUntilTimeout>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d03c      	beq.n	800af0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9c:	e853 3f00 	ldrex	r3, [r3]
 800aea0:	623b      	str	r3, [r7, #32]
   return(result);
 800aea2:	6a3b      	ldr	r3, [r7, #32]
 800aea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aeb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e6      	bne.n	800ae94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3308      	adds	r3, #8
 800aecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	e853 3f00 	ldrex	r3, [r3]
 800aed4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f023 0301 	bic.w	r3, r3, #1
 800aedc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3308      	adds	r3, #8
 800aee4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aee6:	61fa      	str	r2, [r7, #28]
 800aee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeea:	69b9      	ldr	r1, [r7, #24]
 800aeec:	69fa      	ldr	r2, [r7, #28]
 800aeee:	e841 2300 	strex	r3, r2, [r1]
 800aef2:	617b      	str	r3, [r7, #20]
   return(result);
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1e5      	bne.n	800aec6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2220      	movs	r2, #32
 800aefe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af0a:	2303      	movs	r3, #3
 800af0c:	e012      	b.n	800af34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2220      	movs	r2, #32
 800af12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2220      	movs	r2, #32
 800af1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3758      	adds	r7, #88	@ 0x58
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	603b      	str	r3, [r7, #0]
 800af48:	4613      	mov	r3, r2
 800af4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af4c:	e04f      	b.n	800afee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af54:	d04b      	beq.n	800afee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af56:	f7f8 f867 	bl	8003028 <HAL_GetTick>
 800af5a:	4602      	mov	r2, r0
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	69ba      	ldr	r2, [r7, #24]
 800af62:	429a      	cmp	r2, r3
 800af64:	d302      	bcc.n	800af6c <UART_WaitOnFlagUntilTimeout+0x30>
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af6c:	2303      	movs	r3, #3
 800af6e:	e04e      	b.n	800b00e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0304 	and.w	r3, r3, #4
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d037      	beq.n	800afee <UART_WaitOnFlagUntilTimeout+0xb2>
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b80      	cmp	r3, #128	@ 0x80
 800af82:	d034      	beq.n	800afee <UART_WaitOnFlagUntilTimeout+0xb2>
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2b40      	cmp	r3, #64	@ 0x40
 800af88:	d031      	beq.n	800afee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	69db      	ldr	r3, [r3, #28]
 800af90:	f003 0308 	and.w	r3, r3, #8
 800af94:	2b08      	cmp	r3, #8
 800af96:	d110      	bne.n	800afba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2208      	movs	r2, #8
 800af9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 f839 	bl	800b018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2208      	movs	r2, #8
 800afaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e029      	b.n	800b00e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	69db      	ldr	r3, [r3, #28]
 800afc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afc8:	d111      	bne.n	800afee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800afd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 f81f 	bl	800b018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2220      	movs	r2, #32
 800afde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e00f      	b.n	800b00e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	69da      	ldr	r2, [r3, #28]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	4013      	ands	r3, r2
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	429a      	cmp	r2, r3
 800affc:	bf0c      	ite	eq
 800affe:	2301      	moveq	r3, #1
 800b000:	2300      	movne	r3, #0
 800b002:	b2db      	uxtb	r3, r3
 800b004:	461a      	mov	r2, r3
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d0a0      	beq.n	800af4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
	...

0800b018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b018:	b480      	push	{r7}
 800b01a:	b095      	sub	sp, #84	@ 0x54
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b028:	e853 3f00 	ldrex	r3, [r3]
 800b02c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b03e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b040:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b042:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b044:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b046:	e841 2300 	strex	r3, r2, [r1]
 800b04a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e6      	bne.n	800b020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3308      	adds	r3, #8
 800b058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05a:	6a3b      	ldr	r3, [r7, #32]
 800b05c:	e853 3f00 	ldrex	r3, [r3]
 800b060:	61fb      	str	r3, [r7, #28]
   return(result);
 800b062:	69fa      	ldr	r2, [r7, #28]
 800b064:	4b1e      	ldr	r3, [pc, #120]	@ (800b0e0 <UART_EndRxTransfer+0xc8>)
 800b066:	4013      	ands	r3, r2
 800b068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3308      	adds	r3, #8
 800b070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b076:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e5      	bne.n	800b052 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d118      	bne.n	800b0c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	e853 3f00 	ldrex	r3, [r3]
 800b09a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	f023 0310 	bic.w	r3, r3, #16
 800b0a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0ac:	61bb      	str	r3, [r7, #24]
 800b0ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	6979      	ldr	r1, [r7, #20]
 800b0b2:	69ba      	ldr	r2, [r7, #24]
 800b0b4:	e841 2300 	strex	r3, r2, [r1]
 800b0b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e6      	bne.n	800b08e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2220      	movs	r2, #32
 800b0c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b0d4:	bf00      	nop
 800b0d6:	3754      	adds	r7, #84	@ 0x54
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	effffffe 	.word	0xeffffffe

0800b0e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d101      	bne.n	800b0fa <HAL_UARTEx_DisableFifoMode+0x16>
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	e027      	b.n	800b14a <HAL_UARTEx_DisableFifoMode+0x66>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2224      	movs	r2, #36	@ 0x24
 800b106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f022 0201 	bic.w	r2, r2, #1
 800b120:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b128:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2220      	movs	r2, #32
 800b13c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3714      	adds	r7, #20
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e02d      	b.n	800b1ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2224      	movs	r2, #36	@ 0x24
 800b17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0201 	bic.w	r2, r2, #1
 800b194:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f850 	bl	800b250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d101      	bne.n	800b1ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	e02d      	b.n	800b246 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2224      	movs	r2, #36	@ 0x24
 800b1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0201 	bic.w	r2, r2, #1
 800b210:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f812 	bl	800b250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2220      	movs	r2, #32
 800b238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d108      	bne.n	800b272 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b270:	e031      	b.n	800b2d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b272:	2310      	movs	r3, #16
 800b274:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b276:	2310      	movs	r3, #16
 800b278:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	0e5b      	lsrs	r3, r3, #25
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 0307 	and.w	r3, r3, #7
 800b288:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	0f5b      	lsrs	r3, r3, #29
 800b292:	b2db      	uxtb	r3, r3
 800b294:	f003 0307 	and.w	r3, r3, #7
 800b298:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
 800b29c:	7b3a      	ldrb	r2, [r7, #12]
 800b29e:	4911      	ldr	r1, [pc, #68]	@ (800b2e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b2a0:	5c8a      	ldrb	r2, [r1, r2]
 800b2a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2a6:	7b3a      	ldrb	r2, [r7, #12]
 800b2a8:	490f      	ldr	r1, [pc, #60]	@ (800b2e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b2aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	7b7a      	ldrb	r2, [r7, #13]
 800b2bc:	4909      	ldr	r1, [pc, #36]	@ (800b2e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b2be:	5c8a      	ldrb	r2, [r1, r2]
 800b2c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2c4:	7b7a      	ldrb	r2, [r7, #13]
 800b2c6:	4908      	ldr	r1, [pc, #32]	@ (800b2e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b2c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	0800c91c 	.word	0x0800c91c
 800b2e8:	0800c924 	.word	0x0800c924

0800b2ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b2ec:	b084      	sub	sp, #16
 800b2ee:	b480      	push	{r7}
 800b2f0:	b085      	sub	sp, #20
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	f107 001c 	add.w	r0, r7, #28
 800b2fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b302:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b304:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b306:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b30a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b30e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b312:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	4313      	orrs	r3, r2
 800b318:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	4b07      	ldr	r3, [pc, #28]	@ (800b33c <SDMMC_Init+0x50>)
 800b320:	4013      	ands	r3, r2
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	431a      	orrs	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3714      	adds	r7, #20
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	b004      	add	sp, #16
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	ffc02c00 	.word	0xffc02c00

0800b340 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b34e:	4618      	mov	r0, r3
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f043 0203 	orr.w	r2, r3, #3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b083      	sub	sp, #12
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0303 	and.w	r3, r3, #3
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
	...

0800b3bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b3da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b3e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b3e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68da      	ldr	r2, [r3, #12]
 800b3f2:	4b06      	ldr	r3, [pc, #24]	@ (800b40c <SDMMC_SendCommand+0x50>)
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr
 800b40c:	fffee0c0 	.word	0xfffee0c0

0800b410 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	b2db      	uxtb	r3, r3
}
 800b41e:	4618      	mov	r0, r3
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b085      	sub	sp, #20
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3314      	adds	r3, #20
 800b438:	461a      	mov	r2, r3
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	4413      	add	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b476:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b47c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b482:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	4313      	orrs	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	431a      	orrs	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0

}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b088      	sub	sp, #32
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b4b6:	2310      	movs	r3, #16
 800b4b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ca:	f107 0308 	add.w	r3, r7, #8
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7ff ff73 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b4d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4da:	2110      	movs	r1, #16
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fa5f 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b4e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4e4:	69fb      	ldr	r3, [r7, #28]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3720      	adds	r7, #32
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b088      	sub	sp, #32
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b4fc:	2311      	movs	r3, #17
 800b4fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b500:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b506:	2300      	movs	r3, #0
 800b508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b50a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b50e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b510:	f107 0308 	add.w	r3, r7, #8
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7ff ff50 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b51c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b520:	2111      	movs	r1, #17
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fa3c 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b52a:	69fb      	ldr	r3, [r7, #28]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3720      	adds	r7, #32
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b542:	2312      	movs	r3, #18
 800b544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b546:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b54a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b54c:	2300      	movs	r3, #0
 800b54e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b554:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b556:	f107 0308 	add.w	r3, r7, #8
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7ff ff2d 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b562:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b566:	2112      	movs	r1, #18
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fa19 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b56e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b570:	69fb      	ldr	r3, [r7, #28]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3720      	adds	r7, #32
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b088      	sub	sp, #32
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b588:	2318      	movs	r3, #24
 800b58a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b58c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b592:	2300      	movs	r3, #0
 800b594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b59a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b59c:	f107 0308 	add.w	r3, r7, #8
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff ff0a 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b5a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5ac:	2118      	movs	r1, #24
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f9f6 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b5b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5b6:	69fb      	ldr	r3, [r7, #28]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3720      	adds	r7, #32
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b5ce:	2319      	movs	r3, #25
 800b5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5e2:	f107 0308 	add.w	r3, r7, #8
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff fee7 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b5ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5f2:	2119      	movs	r1, #25
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f9d3 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b5fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5fc:	69fb      	ldr	r3, [r7, #28]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3720      	adds	r7, #32
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b088      	sub	sp, #32
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b614:	230c      	movs	r3, #12
 800b616:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b61c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b61e:	2300      	movs	r3, #0
 800b620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b626:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b640:	f107 0308 	add.w	r3, r7, #8
 800b644:	4619      	mov	r1, r3
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff feb8 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b64c:	4a0b      	ldr	r2, [pc, #44]	@ (800b67c <SDMMC_CmdStopTransfer+0x74>)
 800b64e:	210c      	movs	r1, #12
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f9a5 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b656:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b66a:	d101      	bne.n	800b670 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b66c:	2300      	movs	r3, #0
 800b66e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b670:	69fb      	ldr	r3, [r7, #28]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3720      	adds	r7, #32
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	05f5e100 	.word	0x05f5e100

0800b680 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b088      	sub	sp, #32
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b68e:	2307      	movs	r3, #7
 800b690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b698:	2300      	movs	r3, #0
 800b69a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b69c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6a2:	f107 0308 	add.w	r3, r7, #8
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff fe87 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b6ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6b2:	2107      	movs	r1, #7
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f973 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b6ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6bc:	69fb      	ldr	r3, [r7, #28]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3720      	adds	r7, #32
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b088      	sub	sp, #32
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6e4:	f107 0308 	add.w	r3, r7, #8
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7ff fe66 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fb97 	bl	800be24 <SDMMC_GetCmdError>
 800b6f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f8:	69fb      	ldr	r3, [r7, #28]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3720      	adds	r7, #32
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b088      	sub	sp, #32
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b70a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b70e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b710:	2308      	movs	r3, #8
 800b712:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b71e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b722:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b724:	f107 0308 	add.w	r3, r7, #8
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7ff fe46 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fb29 	bl	800bd88 <SDMMC_GetCmdResp7>
 800b736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b738:	69fb      	ldr	r3, [r7, #28]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3720      	adds	r7, #32
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b088      	sub	sp, #32
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b750:	2337      	movs	r3, #55	@ 0x37
 800b752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b75a:	2300      	movs	r3, #0
 800b75c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b75e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b764:	f107 0308 	add.w	r3, r7, #8
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7ff fe26 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b770:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b774:	2137      	movs	r1, #55	@ 0x37
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f912 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b77c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b77e:	69fb      	ldr	r3, [r7, #28]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3720      	adds	r7, #32
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b088      	sub	sp, #32
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b796:	2329      	movs	r3, #41	@ 0x29
 800b798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b79a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b79e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7aa:	f107 0308 	add.w	r3, r7, #8
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff fe03 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fa2e 	bl	800bc18 <SDMMC_GetCmdResp3>
 800b7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7be:	69fb      	ldr	r3, [r7, #28]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3720      	adds	r7, #32
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b7d6:	2306      	movs	r3, #6
 800b7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ea:	f107 0308 	add.w	r3, r7, #8
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff fde3 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b7f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7fa:	2106      	movs	r1, #6
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f8cf 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b804:	69fb      	ldr	r3, [r7, #28]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3720      	adds	r7, #32
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b088      	sub	sp, #32
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b816:	2300      	movs	r3, #0
 800b818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b81a:	2333      	movs	r3, #51	@ 0x33
 800b81c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b81e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b82c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b82e:	f107 0308 	add.w	r3, r7, #8
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff fdc1 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b83a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b83e:	2133      	movs	r1, #51	@ 0x33
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f8ad 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b848:	69fb      	ldr	r3, [r7, #28]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3720      	adds	r7, #32
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b088      	sub	sp, #32
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b85e:	2302      	movs	r3, #2
 800b860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b862:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b868:	2300      	movs	r3, #0
 800b86a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b86c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b870:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b872:	f107 0308 	add.w	r3, r7, #8
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff fd9f 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f980 	bl	800bb84 <SDMMC_GetCmdResp2>
 800b884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b886:	69fb      	ldr	r3, [r7, #28]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3720      	adds	r7, #32
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b89e:	2309      	movs	r3, #9
 800b8a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b8a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b8a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8b2:	f107 0308 	add.w	r3, r7, #8
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff fd7f 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f960 	bl	800bb84 <SDMMC_GetCmdResp2>
 800b8c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8c6:	69fb      	ldr	r3, [r7, #28]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3720      	adds	r7, #32
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8f2:	f107 0308 	add.w	r3, r7, #8
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff fd5f 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	2103      	movs	r1, #3
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f9c8 	bl	800bc98 <SDMMC_GetCmdResp6>
 800b908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b90a:	69fb      	ldr	r3, [r7, #28]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3720      	adds	r7, #32
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b088      	sub	sp, #32
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b922:	230d      	movs	r3, #13
 800b924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b926:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b92a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b92c:	2300      	movs	r3, #0
 800b92e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b934:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b936:	f107 0308 	add.w	r3, r7, #8
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7ff fd3d 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b942:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b946:	210d      	movs	r1, #13
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f829 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b94e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b950:	69fb      	ldr	r3, [r7, #28]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3720      	adds	r7, #32
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b088      	sub	sp, #32
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b962:	2300      	movs	r3, #0
 800b964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b966:	230d      	movs	r3, #13
 800b968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b96a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b96e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b970:	2300      	movs	r3, #0
 800b972:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b978:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b97a:	f107 0308 	add.w	r3, r7, #8
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff fd1b 	bl	800b3bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b98a:	210d      	movs	r1, #13
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f807 	bl	800b9a0 <SDMMC_GetCmdResp1>
 800b992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b994:	69fb      	ldr	r3, [r7, #28]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3720      	adds	r7, #32
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	607a      	str	r2, [r7, #4]
 800b9ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9ae:	4b70      	ldr	r3, [pc, #448]	@ (800bb70 <SDMMC_GetCmdResp1+0x1d0>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a70      	ldr	r2, [pc, #448]	@ (800bb74 <SDMMC_GetCmdResp1+0x1d4>)
 800b9b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9b8:	0a5a      	lsrs	r2, r3, #9
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	fb02 f303 	mul.w	r3, r2, r3
 800b9c0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	1e5a      	subs	r2, r3, #1
 800b9c6:	61fa      	str	r2, [r7, #28]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d102      	bne.n	800b9d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b9d0:	e0c9      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9d6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b9d8:	69ba      	ldr	r2, [r7, #24]
 800b9da:	4b67      	ldr	r3, [pc, #412]	@ (800bb78 <SDMMC_GetCmdResp1+0x1d8>)
 800b9dc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0ef      	beq.n	800b9c2 <SDMMC_GetCmdResp1+0x22>
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1ea      	bne.n	800b9c2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f0:	f003 0304 	and.w	r3, r3, #4
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d004      	beq.n	800ba02 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2204      	movs	r2, #4
 800b9fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9fe:	2304      	movs	r3, #4
 800ba00:	e0b1      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d004      	beq.n	800ba18 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2201      	movs	r2, #1
 800ba12:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e0a6      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	4a58      	ldr	r2, [pc, #352]	@ (800bb7c <SDMMC_GetCmdResp1+0x1dc>)
 800ba1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7ff fcf6 	bl	800b410 <SDMMC_GetCommandResponse>
 800ba24:	4603      	mov	r3, r0
 800ba26:	461a      	mov	r2, r3
 800ba28:	7afb      	ldrb	r3, [r7, #11]
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d001      	beq.n	800ba32 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e099      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba32:	2100      	movs	r1, #0
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f7ff fcf8 	bl	800b42a <SDMMC_GetResponse>
 800ba3a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	4b50      	ldr	r3, [pc, #320]	@ (800bb80 <SDMMC_GetCmdResp1+0x1e0>)
 800ba40:	4013      	ands	r3, r2
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e08d      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	da02      	bge.n	800ba56 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ba50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ba54:	e087      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba60:	2340      	movs	r3, #64	@ 0x40
 800ba62:	e080      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba6e:	2380      	movs	r3, #128	@ 0x80
 800ba70:	e079      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba80:	e071      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ba8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba90:	e069      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800baa0:	e061      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800baac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bab0:	e059      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800babc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bac0:	e051      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bacc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bad0:	e049      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800badc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bae0:	e041      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800baec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800baf0:	e039      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bafc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800bb00:	e031      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb0c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800bb10:	e029      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d002      	beq.n	800bb22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bb20:	e021      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bb30:	e019      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800bb40:	e011      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bb4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bb50:	e009      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f003 0308 	and.w	r3, r3, #8
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bb5c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800bb60:	e001      	b.n	800bb66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3720      	adds	r7, #32
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	24000000 	.word	0x24000000
 800bb74:	10624dd3 	.word	0x10624dd3
 800bb78:	00200045 	.word	0x00200045
 800bb7c:	002000c5 	.word	0x002000c5
 800bb80:	fdffe008 	.word	0xfdffe008

0800bb84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb8c:	4b1f      	ldr	r3, [pc, #124]	@ (800bc0c <SDMMC_GetCmdResp2+0x88>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a1f      	ldr	r2, [pc, #124]	@ (800bc10 <SDMMC_GetCmdResp2+0x8c>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	0a5b      	lsrs	r3, r3, #9
 800bb98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb9c:	fb02 f303 	mul.w	r3, r2, r3
 800bba0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1e5a      	subs	r2, r3, #1
 800bba6:	60fa      	str	r2, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d102      	bne.n	800bbb2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbb0:	e026      	b.n	800bc00 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbb6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0ef      	beq.n	800bba2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1ea      	bne.n	800bba2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbd0:	f003 0304 	and.w	r3, r3, #4
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d004      	beq.n	800bbe2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2204      	movs	r2, #4
 800bbdc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbde:	2304      	movs	r3, #4
 800bbe0:	e00e      	b.n	800bc00 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbe6:	f003 0301 	and.w	r3, r3, #1
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d004      	beq.n	800bbf8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e003      	b.n	800bc00 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a06      	ldr	r2, [pc, #24]	@ (800bc14 <SDMMC_GetCmdResp2+0x90>)
 800bbfc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	24000000 	.word	0x24000000
 800bc10:	10624dd3 	.word	0x10624dd3
 800bc14:	002000c5 	.word	0x002000c5

0800bc18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc20:	4b1a      	ldr	r3, [pc, #104]	@ (800bc8c <SDMMC_GetCmdResp3+0x74>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a1a      	ldr	r2, [pc, #104]	@ (800bc90 <SDMMC_GetCmdResp3+0x78>)
 800bc26:	fba2 2303 	umull	r2, r3, r2, r3
 800bc2a:	0a5b      	lsrs	r3, r3, #9
 800bc2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc30:	fb02 f303 	mul.w	r3, r2, r3
 800bc34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	1e5a      	subs	r2, r3, #1
 800bc3a:	60fa      	str	r2, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d102      	bne.n	800bc46 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc44:	e01b      	b.n	800bc7e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc4a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0ef      	beq.n	800bc36 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1ea      	bne.n	800bc36 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc64:	f003 0304 	and.w	r3, r3, #4
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d004      	beq.n	800bc76 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2204      	movs	r2, #4
 800bc70:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc72:	2304      	movs	r3, #4
 800bc74:	e003      	b.n	800bc7e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4a06      	ldr	r2, [pc, #24]	@ (800bc94 <SDMMC_GetCmdResp3+0x7c>)
 800bc7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3714      	adds	r7, #20
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	24000000 	.word	0x24000000
 800bc90:	10624dd3 	.word	0x10624dd3
 800bc94:	002000c5 	.word	0x002000c5

0800bc98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	460b      	mov	r3, r1
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bca6:	4b35      	ldr	r3, [pc, #212]	@ (800bd7c <SDMMC_GetCmdResp6+0xe4>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a35      	ldr	r2, [pc, #212]	@ (800bd80 <SDMMC_GetCmdResp6+0xe8>)
 800bcac:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb0:	0a5b      	lsrs	r3, r3, #9
 800bcb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcb6:	fb02 f303 	mul.w	r3, r2, r3
 800bcba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	1e5a      	subs	r2, r3, #1
 800bcc0:	61fa      	str	r2, [r7, #28]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcc6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bcca:	e052      	b.n	800bd72 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcd0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0ef      	beq.n	800bcbc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1ea      	bne.n	800bcbc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcea:	f003 0304 	and.w	r3, r3, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d004      	beq.n	800bcfc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2204      	movs	r2, #4
 800bcf6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcf8:	2304      	movs	r3, #4
 800bcfa:	e03a      	b.n	800bd72 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd00:	f003 0301 	and.w	r3, r3, #1
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e02f      	b.n	800bd72 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f7ff fb7c 	bl	800b410 <SDMMC_GetCommandResponse>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	7afb      	ldrb	r3, [r7, #11]
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d001      	beq.n	800bd26 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e025      	b.n	800bd72 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	4a16      	ldr	r2, [pc, #88]	@ (800bd84 <SDMMC_GetCmdResp6+0xec>)
 800bd2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f7ff fb7b 	bl	800b42a <SDMMC_GetResponse>
 800bd34:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d106      	bne.n	800bd4e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	0c1b      	lsrs	r3, r3, #16
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e011      	b.n	800bd72 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd5c:	e009      	b.n	800bd72 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d002      	beq.n	800bd6e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd6c:	e001      	b.n	800bd72 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3720      	adds	r7, #32
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	24000000 	.word	0x24000000
 800bd80:	10624dd3 	.word	0x10624dd3
 800bd84:	002000c5 	.word	0x002000c5

0800bd88 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd90:	4b22      	ldr	r3, [pc, #136]	@ (800be1c <SDMMC_GetCmdResp7+0x94>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a22      	ldr	r2, [pc, #136]	@ (800be20 <SDMMC_GetCmdResp7+0x98>)
 800bd96:	fba2 2303 	umull	r2, r3, r2, r3
 800bd9a:	0a5b      	lsrs	r3, r3, #9
 800bd9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bda0:	fb02 f303 	mul.w	r3, r2, r3
 800bda4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	1e5a      	subs	r2, r3, #1
 800bdaa:	60fa      	str	r2, [r7, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d102      	bne.n	800bdb6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bdb4:	e02c      	b.n	800be10 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0ef      	beq.n	800bda6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1ea      	bne.n	800bda6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdd4:	f003 0304 	and.w	r3, r3, #4
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d004      	beq.n	800bde6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2204      	movs	r2, #4
 800bde0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bde2:	2304      	movs	r3, #4
 800bde4:	e014      	b.n	800be10 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d004      	beq.n	800bdfc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e009      	b.n	800be10 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2240      	movs	r2, #64	@ 0x40
 800be0c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800be0e:	2300      	movs	r3, #0

}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	24000000 	.word	0x24000000
 800be20:	10624dd3 	.word	0x10624dd3

0800be24 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be2c:	4b11      	ldr	r3, [pc, #68]	@ (800be74 <SDMMC_GetCmdError+0x50>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a11      	ldr	r2, [pc, #68]	@ (800be78 <SDMMC_GetCmdError+0x54>)
 800be32:	fba2 2303 	umull	r2, r3, r2, r3
 800be36:	0a5b      	lsrs	r3, r3, #9
 800be38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be3c:	fb02 f303 	mul.w	r3, r2, r3
 800be40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	1e5a      	subs	r2, r3, #1
 800be46:	60fa      	str	r2, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d102      	bne.n	800be52 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800be50:	e009      	b.n	800be66 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d0f1      	beq.n	800be42 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a06      	ldr	r2, [pc, #24]	@ (800be7c <SDMMC_GetCmdError+0x58>)
 800be62:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	24000000 	.word	0x24000000
 800be78:	10624dd3 	.word	0x10624dd3
 800be7c:	002000c5 	.word	0x002000c5

0800be80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be80:	b084      	sub	sp, #16
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	f107 001c 	add.w	r0, r7, #28
 800be8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800be96:	2b01      	cmp	r3, #1
 800be98:	d121      	bne.n	800bede <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68da      	ldr	r2, [r3, #12]
 800beaa:	4b2c      	ldr	r3, [pc, #176]	@ (800bf5c <USB_CoreInit+0xdc>)
 800beac:	4013      	ands	r3, r2
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bebe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d105      	bne.n	800bed2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 faaa 	bl	800c42c <USB_CoreReset>
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]
 800bedc:	e01b      	b.n	800bf16 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fa9e 	bl	800c42c <USB_CoreReset>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bef4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d106      	bne.n	800bf0a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	639a      	str	r2, [r3, #56]	@ 0x38
 800bf08:	e005      	b.n	800bf16 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bf16:	7fbb      	ldrb	r3, [r7, #30]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d116      	bne.n	800bf4a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf2a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf60 <USB_CoreInit+0xe0>)
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f043 0206 	orr.w	r2, r3, #6
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f043 0220 	orr.w	r2, r3, #32
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bf4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3710      	adds	r7, #16
 800bf50:	46bd      	mov	sp, r7
 800bf52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf56:	b004      	add	sp, #16
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	ffbdffbf 	.word	0xffbdffbf
 800bf60:	03ee0000 	.word	0x03ee0000

0800bf64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	f023 0201 	bic.w	r2, r3, #1
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	370c      	adds	r7, #12
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bf92:	2300      	movs	r3, #0
 800bf94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bfa2:	78fb      	ldrb	r3, [r7, #3]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d115      	bne.n	800bfd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bfb4:	200a      	movs	r0, #10
 800bfb6:	f7f7 f843 	bl	8003040 <HAL_Delay>
      ms += 10U;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	330a      	adds	r3, #10
 800bfbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fa25 	bl	800c410 <USB_GetMode>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d01e      	beq.n	800c00a <USB_SetCurrentMode+0x84>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2bc7      	cmp	r3, #199	@ 0xc7
 800bfd0:	d9f0      	bls.n	800bfb4 <USB_SetCurrentMode+0x2e>
 800bfd2:	e01a      	b.n	800c00a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bfd4:	78fb      	ldrb	r3, [r7, #3]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d115      	bne.n	800c006 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bfe6:	200a      	movs	r0, #10
 800bfe8:	f7f7 f82a 	bl	8003040 <HAL_Delay>
      ms += 10U;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	330a      	adds	r3, #10
 800bff0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fa0c 	bl	800c410 <USB_GetMode>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d005      	beq.n	800c00a <USB_SetCurrentMode+0x84>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2bc7      	cmp	r3, #199	@ 0xc7
 800c002:	d9f0      	bls.n	800bfe6 <USB_SetCurrentMode+0x60>
 800c004:	e001      	b.n	800c00a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	e005      	b.n	800c016 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2bc8      	cmp	r3, #200	@ 0xc8
 800c00e:	d101      	bne.n	800c014 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e000      	b.n	800c016 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
	...

0800c020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c020:	b084      	sub	sp, #16
 800c022:	b580      	push	{r7, lr}
 800c024:	b086      	sub	sp, #24
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c02e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c03a:	2300      	movs	r3, #0
 800c03c:	613b      	str	r3, [r7, #16]
 800c03e:	e009      	b.n	800c054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	3340      	adds	r3, #64	@ 0x40
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	2200      	movs	r2, #0
 800c04c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	3301      	adds	r3, #1
 800c052:	613b      	str	r3, [r7, #16]
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	2b0e      	cmp	r3, #14
 800c058:	d9f2      	bls.n	800c040 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c05a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d11c      	bne.n	800c09c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c070:	f043 0302 	orr.w	r3, r3, #2
 800c074:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c07a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	e005      	b.n	800c0a8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d10d      	bne.n	800c0d8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d104      	bne.n	800c0ce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f968 	bl	800c39c <USB_SetDevSpeed>
 800c0cc:	e008      	b.n	800c0e0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f963 	bl	800c39c <USB_SetDevSpeed>
 800c0d6:	e003      	b.n	800c0e0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0d8:	2103      	movs	r1, #3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f95e 	bl	800c39c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0e0:	2110      	movs	r1, #16
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f8fa 	bl	800c2dc <USB_FlushTxFifo>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f924 	bl	800c340 <USB_FlushRxFifo>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c108:	461a      	mov	r2, r3
 800c10a:	2300      	movs	r3, #0
 800c10c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c114:	461a      	mov	r2, r3
 800c116:	2300      	movs	r3, #0
 800c118:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c120:	461a      	mov	r2, r3
 800c122:	2300      	movs	r3, #0
 800c124:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c126:	2300      	movs	r3, #0
 800c128:	613b      	str	r3, [r7, #16]
 800c12a:	e043      	b.n	800c1b4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	015a      	lsls	r2, r3, #5
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	4413      	add	r3, r2
 800c134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c13e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c142:	d118      	bne.n	800c176 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	4413      	add	r3, r2
 800c152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c156:	461a      	mov	r2, r3
 800c158:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c15c:	6013      	str	r3, [r2, #0]
 800c15e:	e013      	b.n	800c188 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	015a      	lsls	r2, r3, #5
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	4413      	add	r3, r2
 800c168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c16c:	461a      	mov	r2, r3
 800c16e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c172:	6013      	str	r3, [r2, #0]
 800c174:	e008      	b.n	800c188 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	015a      	lsls	r2, r3, #5
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	4413      	add	r3, r2
 800c17e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c182:	461a      	mov	r2, r3
 800c184:	2300      	movs	r3, #0
 800c186:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	015a      	lsls	r2, r3, #5
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	4413      	add	r3, r2
 800c190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c194:	461a      	mov	r2, r3
 800c196:	2300      	movs	r3, #0
 800c198:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	015a      	lsls	r2, r3, #5
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c1ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	613b      	str	r3, [r7, #16]
 800c1b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d3b5      	bcc.n	800c12c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	613b      	str	r3, [r7, #16]
 800c1c4:	e043      	b.n	800c24e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1dc:	d118      	bne.n	800c210 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10a      	bne.n	800c1fa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	015a      	lsls	r2, r3, #5
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c1f6:	6013      	str	r3, [r2, #0]
 800c1f8:	e013      	b.n	800c222 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c206:	461a      	mov	r2, r3
 800c208:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c20c:	6013      	str	r3, [r2, #0]
 800c20e:	e008      	b.n	800c222 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	015a      	lsls	r2, r3, #5
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4413      	add	r3, r2
 800c218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c21c:	461a      	mov	r2, r3
 800c21e:	2300      	movs	r3, #0
 800c220:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c22e:	461a      	mov	r2, r3
 800c230:	2300      	movs	r3, #0
 800c232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	015a      	lsls	r2, r3, #5
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c240:	461a      	mov	r2, r3
 800c242:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	3301      	adds	r3, #1
 800c24c:	613b      	str	r3, [r7, #16]
 800c24e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c252:	461a      	mov	r2, r3
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	4293      	cmp	r3, r2
 800c258:	d3b5      	bcc.n	800c1c6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c26c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c27a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c27c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c280:	2b00      	cmp	r3, #0
 800c282:	d105      	bne.n	800c290 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	699b      	ldr	r3, [r3, #24]
 800c288:	f043 0210 	orr.w	r2, r3, #16
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	699a      	ldr	r2, [r3, #24]
 800c294:	4b0f      	ldr	r3, [pc, #60]	@ (800c2d4 <USB_DevInit+0x2b4>)
 800c296:	4313      	orrs	r3, r2
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c29c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d005      	beq.n	800c2b0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	f043 0208 	orr.w	r2, r3, #8
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c2b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d105      	bne.n	800c2c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	699a      	ldr	r2, [r3, #24]
 800c2bc:	4b06      	ldr	r3, [pc, #24]	@ (800c2d8 <USB_DevInit+0x2b8>)
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3718      	adds	r7, #24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2d0:	b004      	add	sp, #16
 800c2d2:	4770      	bx	lr
 800c2d4:	803c3800 	.word	0x803c3800
 800c2d8:	40000004 	.word	0x40000004

0800c2dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c2f6:	d901      	bls.n	800c2fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e01b      	b.n	800c334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	2b00      	cmp	r3, #0
 800c302:	daf2      	bge.n	800c2ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c304:	2300      	movs	r3, #0
 800c306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	019b      	lsls	r3, r3, #6
 800c30c:	f043 0220 	orr.w	r2, r3, #32
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	3301      	adds	r3, #1
 800c318:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c320:	d901      	bls.n	800c326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c322:	2303      	movs	r3, #3
 800c324:	e006      	b.n	800c334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	f003 0320 	and.w	r3, r3, #32
 800c32e:	2b20      	cmp	r3, #32
 800c330:	d0f0      	beq.n	800c314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c348:	2300      	movs	r3, #0
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3301      	adds	r3, #1
 800c350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c358:	d901      	bls.n	800c35e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c35a:	2303      	movs	r3, #3
 800c35c:	e018      	b.n	800c390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	daf2      	bge.n	800c34c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2210      	movs	r2, #16
 800c36e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	3301      	adds	r3, #1
 800c374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c37c:	d901      	bls.n	800c382 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c37e:	2303      	movs	r3, #3
 800c380:	e006      	b.n	800c390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	f003 0310 	and.w	r3, r3, #16
 800c38a:	2b10      	cmp	r3, #16
 800c38c:	d0f0      	beq.n	800c370 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	68f9      	ldr	r1, [r7, #12]
 800c3b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3714      	adds	r7, #20
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c3e8:	f023 0303 	bic.w	r3, r3, #3
 800c3ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c3fc:	f043 0302 	orr.w	r3, r3, #2
 800c400:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3714      	adds	r7, #20
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	f003 0301 	and.w	r3, r3, #1
}
 800c420:	4618      	mov	r0, r3
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c434:	2300      	movs	r3, #0
 800c436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	3301      	adds	r3, #1
 800c43c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c444:	d901      	bls.n	800c44a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c446:	2303      	movs	r3, #3
 800c448:	e01b      	b.n	800c482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	daf2      	bge.n	800c438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c452:	2300      	movs	r3, #0
 800c454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	f043 0201 	orr.w	r2, r3, #1
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3301      	adds	r3, #1
 800c466:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c46e:	d901      	bls.n	800c474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c470:	2303      	movs	r3, #3
 800c472:	e006      	b.n	800c482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	f003 0301 	and.w	r3, r3, #1
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d0f0      	beq.n	800c462 <USB_CoreReset+0x36>

  return HAL_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
	...

0800c490 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c494:	4904      	ldr	r1, [pc, #16]	@ (800c4a8 <MX_FATFS_Init+0x18>)
 800c496:	4805      	ldr	r0, [pc, #20]	@ (800c4ac <MX_FATFS_Init+0x1c>)
 800c498:	f000 f9e4 	bl	800c864 <FATFS_LinkDriver>
 800c49c:	4603      	mov	r3, r0
 800c49e:	461a      	mov	r2, r3
 800c4a0:	4b03      	ldr	r3, [pc, #12]	@ (800c4b0 <MX_FATFS_Init+0x20>)
 800c4a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c4a4:	bf00      	nop
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	24000f54 	.word	0x24000f54
 800c4ac:	0800c92c 	.word	0x0800c92c
 800c4b0:	24000f50 	.word	0x24000f50

0800c4b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c4be:	f000 f879 	bl	800c5b4 <BSP_SD_IsDetected>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d001      	beq.n	800c4cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c4c8:	2302      	movs	r3, #2
 800c4ca:	e012      	b.n	800c4f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c4cc:	480b      	ldr	r0, [pc, #44]	@ (800c4fc <BSP_SD_Init+0x48>)
 800c4ce:	f7fb f95b 	bl	8007788 <HAL_SD_Init>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c4d6:	79fb      	ldrb	r3, [r7, #7]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d109      	bne.n	800c4f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c4dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c4e0:	4806      	ldr	r0, [pc, #24]	@ (800c4fc <BSP_SD_Init+0x48>)
 800c4e2:	f7fc f817 	bl	8008514 <HAL_SD_ConfigWideBusOperation>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d001      	beq.n	800c4f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c4f0:	79fb      	ldrb	r3, [r7, #7]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	24000128 	.word	0x24000128

0800c500 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af02      	add	r7, sp, #8
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	68f9      	ldr	r1, [r7, #12]
 800c51c:	4806      	ldr	r0, [pc, #24]	@ (800c538 <BSP_SD_ReadBlocks+0x38>)
 800c51e:	f7fb fa53 	bl	80079c8 <HAL_SD_ReadBlocks>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c528:	2301      	movs	r3, #1
 800c52a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	24000128 	.word	0x24000128

0800c53c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	68f9      	ldr	r1, [r7, #12]
 800c558:	4806      	ldr	r0, [pc, #24]	@ (800c574 <BSP_SD_WriteBlocks+0x38>)
 800c55a:	f7fb fbbf 	bl	8007cdc <HAL_SD_WriteBlocks>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c568:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	24000128 	.word	0x24000128

0800c578 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c57c:	4805      	ldr	r0, [pc, #20]	@ (800c594 <BSP_SD_GetCardState+0x1c>)
 800c57e:	f7fc f8db 	bl	8008738 <HAL_SD_GetCardState>
 800c582:	4603      	mov	r3, r0
 800c584:	2b04      	cmp	r3, #4
 800c586:	bf14      	ite	ne
 800c588:	2301      	movne	r3, #1
 800c58a:	2300      	moveq	r3, #0
 800c58c:	b2db      	uxtb	r3, r3
}
 800c58e:	4618      	mov	r0, r3
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	24000128 	.word	0x24000128

0800c598 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	4803      	ldr	r0, [pc, #12]	@ (800c5b0 <BSP_SD_GetCardInfo+0x18>)
 800c5a4:	f7fb ff8a 	bl	80084bc <HAL_SD_GetCardInfo>
}
 800c5a8:	bf00      	nop
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	24000128 	.word	0x24000128

0800c5b4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c5be:	f000 f80b 	bl	800c5d8 <BSP_PlatformIsDetected>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d101      	bne.n	800c5cc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	b2db      	uxtb	r3, r3
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c5e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c5e6:	4806      	ldr	r0, [pc, #24]	@ (800c600 <BSP_PlatformIsDetected+0x28>)
 800c5e8:	f7f7 f87c 	bl	80036e4 <HAL_GPIO_ReadPin>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d001      	beq.n	800c5f6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c5f6:	79fb      	ldrb	r3, [r7, #7]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	58020c00 	.word	0x58020c00

0800c604 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4603      	mov	r3, r0
 800c60c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c60e:	4b0b      	ldr	r3, [pc, #44]	@ (800c63c <SD_CheckStatus+0x38>)
 800c610:	2201      	movs	r2, #1
 800c612:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c614:	f7ff ffb0 	bl	800c578 <BSP_SD_GetCardState>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d107      	bne.n	800c62e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c61e:	4b07      	ldr	r3, [pc, #28]	@ (800c63c <SD_CheckStatus+0x38>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f023 0301 	bic.w	r3, r3, #1
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	4b04      	ldr	r3, [pc, #16]	@ (800c63c <SD_CheckStatus+0x38>)
 800c62c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c62e:	4b03      	ldr	r3, [pc, #12]	@ (800c63c <SD_CheckStatus+0x38>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	b2db      	uxtb	r3, r3
}
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	2400000d 	.word	0x2400000d

0800c640 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c64a:	4b0b      	ldr	r3, [pc, #44]	@ (800c678 <SD_initialize+0x38>)
 800c64c:	2201      	movs	r2, #1
 800c64e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c650:	f7ff ff30 	bl	800c4b4 <BSP_SD_Init>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d107      	bne.n	800c66a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c65a:	79fb      	ldrb	r3, [r7, #7]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff ffd1 	bl	800c604 <SD_CheckStatus>
 800c662:	4603      	mov	r3, r0
 800c664:	461a      	mov	r2, r3
 800c666:	4b04      	ldr	r3, [pc, #16]	@ (800c678 <SD_initialize+0x38>)
 800c668:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c66a:	4b03      	ldr	r3, [pc, #12]	@ (800c678 <SD_initialize+0x38>)
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	b2db      	uxtb	r3, r3
}
 800c670:	4618      	mov	r0, r3
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	2400000d 	.word	0x2400000d

0800c67c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c686:	79fb      	ldrb	r3, [r7, #7]
 800c688:	4618      	mov	r0, r3
 800c68a:	f7ff ffbb 	bl	800c604 <SD_CheckStatus>
 800c68e:	4603      	mov	r3, r0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	607a      	str	r2, [r7, #4]
 800c6a2:	603b      	str	r3, [r7, #0]
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	6879      	ldr	r1, [r7, #4]
 800c6b4:	68b8      	ldr	r0, [r7, #8]
 800c6b6:	f7ff ff23 	bl	800c500 <BSP_SD_ReadBlocks>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d107      	bne.n	800c6d0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c6c0:	bf00      	nop
 800c6c2:	f7ff ff59 	bl	800c578 <BSP_SD_GetCardState>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1fa      	bne.n	800c6c2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b086      	sub	sp, #24
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	603b      	str	r3, [r7, #0]
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	6879      	ldr	r1, [r7, #4]
 800c6f6:	68b8      	ldr	r0, [r7, #8]
 800c6f8:	f7ff ff20 	bl	800c53c <BSP_SD_WriteBlocks>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d107      	bne.n	800c712 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c702:	bf00      	nop
 800c704:	f7ff ff38 	bl	800c578 <BSP_SD_GetCardState>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1fa      	bne.n	800c704 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c712:	7dfb      	ldrb	r3, [r7, #23]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3718      	adds	r7, #24
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b08c      	sub	sp, #48	@ 0x30
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	603a      	str	r2, [r7, #0]
 800c726:	71fb      	strb	r3, [r7, #7]
 800c728:	460b      	mov	r3, r1
 800c72a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c732:	4b25      	ldr	r3, [pc, #148]	@ (800c7c8 <SD_ioctl+0xac>)
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	f003 0301 	and.w	r3, r3, #1
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <SD_ioctl+0x28>
 800c740:	2303      	movs	r3, #3
 800c742:	e03c      	b.n	800c7be <SD_ioctl+0xa2>

  switch (cmd)
 800c744:	79bb      	ldrb	r3, [r7, #6]
 800c746:	2b03      	cmp	r3, #3
 800c748:	d834      	bhi.n	800c7b4 <SD_ioctl+0x98>
 800c74a:	a201      	add	r2, pc, #4	@ (adr r2, 800c750 <SD_ioctl+0x34>)
 800c74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c750:	0800c761 	.word	0x0800c761
 800c754:	0800c769 	.word	0x0800c769
 800c758:	0800c781 	.word	0x0800c781
 800c75c:	0800c79b 	.word	0x0800c79b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c766:	e028      	b.n	800c7ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c768:	f107 0308 	add.w	r3, r7, #8
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff ff13 	bl	800c598 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c772:	6a3a      	ldr	r2, [r7, #32]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c77e:	e01c      	b.n	800c7ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c780:	f107 0308 	add.w	r3, r7, #8
 800c784:	4618      	mov	r0, r3
 800c786:	f7ff ff07 	bl	800c598 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c792:	2300      	movs	r3, #0
 800c794:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c798:	e00f      	b.n	800c7ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c79a:	f107 0308 	add.w	r3, r7, #8
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7ff fefa 	bl	800c598 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a6:	0a5a      	lsrs	r2, r3, #9
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c7b2:	e002      	b.n	800c7ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c7b4:	2304      	movs	r3, #4
 800c7b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c7ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3730      	adds	r7, #48	@ 0x30
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	2400000d 	.word	0x2400000d

0800c7cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c7e2:	4b1f      	ldr	r3, [pc, #124]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c7e4:	7a5b      	ldrb	r3, [r3, #9]
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d131      	bne.n	800c850 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c7ec:	4b1c      	ldr	r3, [pc, #112]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c7ee:	7a5b      	ldrb	r3, [r3, #9]
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c7fa:	4b19      	ldr	r3, [pc, #100]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c7fc:	7a5b      	ldrb	r3, [r3, #9]
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	4a17      	ldr	r2, [pc, #92]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c80a:	4b15      	ldr	r3, [pc, #84]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c80c:	7a5b      	ldrb	r3, [r3, #9]
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	461a      	mov	r2, r3
 800c812:	4b13      	ldr	r3, [pc, #76]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c814:	4413      	add	r3, r2
 800c816:	79fa      	ldrb	r2, [r7, #7]
 800c818:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c81a:	4b11      	ldr	r3, [pc, #68]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c81c:	7a5b      	ldrb	r3, [r3, #9]
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	1c5a      	adds	r2, r3, #1
 800c822:	b2d1      	uxtb	r1, r2
 800c824:	4a0e      	ldr	r2, [pc, #56]	@ (800c860 <FATFS_LinkDriverEx+0x94>)
 800c826:	7251      	strb	r1, [r2, #9]
 800c828:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c82a:	7dbb      	ldrb	r3, [r7, #22]
 800c82c:	3330      	adds	r3, #48	@ 0x30
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	3301      	adds	r3, #1
 800c838:	223a      	movs	r2, #58	@ 0x3a
 800c83a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	3302      	adds	r3, #2
 800c840:	222f      	movs	r2, #47	@ 0x2f
 800c842:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	3303      	adds	r3, #3
 800c848:	2200      	movs	r2, #0
 800c84a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c850:	7dfb      	ldrb	r3, [r7, #23]
}
 800c852:	4618      	mov	r0, r3
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	24000f58 	.word	0x24000f58

0800c864 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c86e:	2200      	movs	r2, #0
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7ff ffaa 	bl	800c7cc <FATFS_LinkDriverEx>
 800c878:	4603      	mov	r3, r0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <memset>:
 800c882:	4402      	add	r2, r0
 800c884:	4603      	mov	r3, r0
 800c886:	4293      	cmp	r3, r2
 800c888:	d100      	bne.n	800c88c <memset+0xa>
 800c88a:	4770      	bx	lr
 800c88c:	f803 1b01 	strb.w	r1, [r3], #1
 800c890:	e7f9      	b.n	800c886 <memset+0x4>
	...

0800c894 <__libc_init_array>:
 800c894:	b570      	push	{r4, r5, r6, lr}
 800c896:	4d0d      	ldr	r5, [pc, #52]	@ (800c8cc <__libc_init_array+0x38>)
 800c898:	4c0d      	ldr	r4, [pc, #52]	@ (800c8d0 <__libc_init_array+0x3c>)
 800c89a:	1b64      	subs	r4, r4, r5
 800c89c:	10a4      	asrs	r4, r4, #2
 800c89e:	2600      	movs	r6, #0
 800c8a0:	42a6      	cmp	r6, r4
 800c8a2:	d109      	bne.n	800c8b8 <__libc_init_array+0x24>
 800c8a4:	4d0b      	ldr	r5, [pc, #44]	@ (800c8d4 <__libc_init_array+0x40>)
 800c8a6:	4c0c      	ldr	r4, [pc, #48]	@ (800c8d8 <__libc_init_array+0x44>)
 800c8a8:	f000 f818 	bl	800c8dc <_init>
 800c8ac:	1b64      	subs	r4, r4, r5
 800c8ae:	10a4      	asrs	r4, r4, #2
 800c8b0:	2600      	movs	r6, #0
 800c8b2:	42a6      	cmp	r6, r4
 800c8b4:	d105      	bne.n	800c8c2 <__libc_init_array+0x2e>
 800c8b6:	bd70      	pop	{r4, r5, r6, pc}
 800c8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8bc:	4798      	blx	r3
 800c8be:	3601      	adds	r6, #1
 800c8c0:	e7ee      	b.n	800c8a0 <__libc_init_array+0xc>
 800c8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8c6:	4798      	blx	r3
 800c8c8:	3601      	adds	r6, #1
 800c8ca:	e7f2      	b.n	800c8b2 <__libc_init_array+0x1e>
 800c8cc:	0800c948 	.word	0x0800c948
 800c8d0:	0800c948 	.word	0x0800c948
 800c8d4:	0800c948 	.word	0x0800c948
 800c8d8:	0800c94c 	.word	0x0800c94c

0800c8dc <_init>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	bf00      	nop
 800c8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e2:	bc08      	pop	{r3}
 800c8e4:	469e      	mov	lr, r3
 800c8e6:	4770      	bx	lr

0800c8e8 <_fini>:
 800c8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ea:	bf00      	nop
 800c8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ee:	bc08      	pop	{r3}
 800c8f0:	469e      	mov	lr, r3
 800c8f2:	4770      	bx	lr
